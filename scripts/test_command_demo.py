#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã /test
"""

import sys
import os
import asyncio

# Add the parent directory to the path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot import ShansAi
from tests.test_utilities import TestDataGenerator


async def demo_test_command():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã /test"""
    print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /test")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = ShansAi()
    
    # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã
    generator = TestDataGenerator()
    mock_update = generator.create_mock_update(12345, "/test quick")
    mock_context = generator.create_mock_context()
    
    print("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /test quick...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        await bot.test_command(mock_update, mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        if mock_context.bot.send_message.called:
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /test —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞
            call_args = mock_context.bot.send_message.call_args
            message_text = call_args[1]['text']
            parse_mode = call_args[1].get('parse_mode', None)
            
            print(f"üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (parse_mode: {parse_mode}):")
            print("-" * 40)
            print(message_text[:200] + "..." if len(message_text) > 200 else message_text)
            print("-" * 40)
        else:
            print("‚ùå –ö–æ–º–∞–Ω–¥–∞ /test –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤
    test_types = ['quick', 'regression', 'all', 'comprehensive']
    
    for test_type in test_types:
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /test {test_type}...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π mock —Å –Ω—É–∂–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        mock_update = generator.create_mock_update(12345, f"/test {test_type}")
        mock_context = generator.create_mock_context()
        
        try:
            await bot.test_command(mock_update, mock_context)
            print(f"‚úÖ /test {test_type} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /test {test_type}: {e}")
    
    print("\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    test_results = [
        {
            'success': True,
            'stdout': 'Test passed\nAll tests completed successfully',
            'stderr': '',
            'duration': 1.5,
            'test_type': 'quick'
        },
        {
            'success': False,
            'stdout': 'Some output',
            'stderr': 'Test failed\nError message',
            'duration': 2.0,
            'test_type': 'regression'
        }
    ]
    
    for i, result in enumerate(test_results, 1):
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä {i} - {'–£—Å–ø–µ—Ö' if result['success'] else '–ù–µ—É–¥–∞—á–∞'}:")
        formatted = bot._format_test_results(result, result['test_type'])
        print("-" * 40)
        print(formatted[:300] + "..." if len(formatted) > 300 else formatted)
        print("-" * 40)
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã /test")
    
    try:
        asyncio.run(demo_test_command())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
