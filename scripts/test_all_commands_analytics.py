#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤–æ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞
"""

import asyncio
import sys
import os
import logging
from unittest.mock import Mock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.botality_service import BotalityService, initialize_botality_service, send_botality_analytics
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def create_mock_update(command: str = None, text: str = None, callback_data: str = None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫ –æ–±—ä–µ–∫—Ç–∞ Update –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    mock_update = Mock()
    mock_user = Mock()
    
    mock_user.id = 12345
    mock_user.is_bot = False
    mock_user.username = "test_user"
    
    if command:
        # –î–ª—è –∫–æ–º–∞–Ω–¥
        mock_message = Mock()
        mock_message.message_id = 67890
        mock_message.from_user = mock_user
        mock_message.text = f"/{command}"
        mock_message.date = Mock()
        mock_message.date.timestamp.return_value = 1692612310
        
        mock_update.message = mock_message
        mock_update.callback_query = None
        
    elif text:
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        mock_message = Mock()
        mock_message.message_id = 67891
        mock_message.from_user = mock_user
        mock_message.text = text
        mock_message.date = Mock()
        mock_message.date.timestamp.return_value = 1692612310
        
        mock_update.message = mock_message
        mock_update.callback_query = None
        
    elif callback_data:
        # –î–ª—è callback queries
        mock_callback = Mock()
        mock_callback.id = "callback_123"
        mock_callback.from_user = mock_user
        mock_callback.data = callback_data
        mock_callback.message = Mock()
        mock_callback.message.message_id = 67892
        mock_callback.message.date = Mock()
        mock_callback.message.date.timestamp.return_value = 1692612310
        
        mock_update.message = None
        mock_update.callback_query = mock_callback
    
    return mock_update


async def test_command_analytics():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    test_token = "46422ed2-e3b1-4c71-846a-81694cf2b18c"
    initialize_botality_service(test_token)
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    commands = [
        "start", "help", "support", "rate", "limits", 
        "info", "list", "search", "compare", "portfolio"
    ]
    
    results = {}
    
    for command in commands:
        try:
            mock_update = create_mock_update(command=command)
            await send_botality_analytics(mock_update)
            results[command] = "‚úÖ OK"
            logger.info(f"  {command}: ‚úÖ OK")
        except Exception as e:
            results[command] = f"‚ùå Error: {e}"
            logger.error(f"  {command}: ‚ùå Error: {e}")
    
    return results


async def test_message_analytics():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    test_messages = [
        "AAPL.US",
        "VOO.US, SPY.US",
        "Hello bot!",
        "Test message"
    ]
    
    results = {}
    
    for message in test_messages:
        try:
            mock_update = create_mock_update(text=message)
            await send_botality_analytics(mock_update)
            results[message] = "‚úÖ OK"
            logger.info(f"  '{message}': ‚úÖ OK")
        except Exception as e:
            results[message] = f"‚ùå Error: {e}"
            logger.error(f"  '{message}': ‚ùå Error: {e}")
    
    return results


async def test_callback_analytics():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è callback queries"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è callback queries...")
    
    test_callbacks = [
        "analyze_chart",
        "show_portfolio",
        "compare_assets",
        "button_click"
    ]
    
    results = {}
    
    for callback in test_callbacks:
        try:
            mock_update = create_mock_update(callback_data=callback)
            await send_botality_analytics(mock_update)
            results[callback] = "‚úÖ OK"
            logger.info(f"  '{callback}': ‚úÖ OK")
        except Exception as e:
            results[callback] = f"‚ùå Error: {e}"
            logger.error(f"  '{callback}': ‚ùå Error: {e}")
    
    return results


async def test_reply_keyboard_analytics():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è reply keyboard"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è reply keyboard...")
    
    test_buttons = [
        "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å",
        "üîç –ü–æ–∏—Å–∫",
        "üìà –°—Ä–∞–≤–Ω–∏—Ç—å",
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    ]
    
    results = {}
    
    for button in test_buttons:
        try:
            mock_update = create_mock_update(text=button)
            await send_botality_analytics(mock_update)
            results[button] = "‚úÖ OK"
            logger.info(f"  '{button}': ‚úÖ OK")
        except Exception as e:
            results[button] = f"‚ùå Error: {e}"
            logger.error(f"  '{button}': ‚ùå Error: {e}")
    
    return results


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        command_results = await test_command_analytics()
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        await asyncio.sleep(0.5)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        message_results = await test_message_analytics()
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        await asyncio.sleep(0.5)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º callback queries
        callback_results = await test_callback_analytics()
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        await asyncio.sleep(0.5)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º reply keyboard
        keyboard_results = await test_reply_keyboard_analytics()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        logger.info("=" * 50)
        
        logger.info("\nüîπ –ö–û–ú–ê–ù–î–´:")
        for command, result in command_results.items():
            logger.info(f"  /{command}: {result}")
        
        logger.info("\nüîπ –°–û–û–ë–©–ï–ù–ò–Ø:")
        for message, result in message_results.items():
            logger.info(f"  '{message}': {result}")
        
        logger.info("\nüîπ CALLBACK QUERIES:")
        for callback, result in callback_results.items():
            logger.info(f"  '{callback}': {result}")
        
        logger.info("\nüîπ REPLY KEYBOARD:")
        for button, result in keyboard_results.items():
            logger.info(f"  '{button}': {result}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã
        all_results = list(command_results.values()) + list(message_results.values()) + list(callback_results.values()) + list(keyboard_results.values())
        successful = sum(1 for result in all_results if result.startswith("‚úÖ"))
        total = len(all_results)
        
        logger.info(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê: {successful}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
        if successful == total:
            logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            return 0
        else:
            logger.warning(f"‚ö†Ô∏è {total - successful} —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            return 1
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
