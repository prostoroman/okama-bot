#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–∞–Ω–¥–æ–π /compare sber.moex oblg.moex
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot import ShansAi
from unittest.mock import Mock, patch

def debug_compare_issue():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–∞–Ω–¥–æ–π compare"""
    
    # –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with patch('bot.Config') as mock_config:
        mock_config.validate.return_value = None
        bot = ShansAi()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /compare sber.moex oblg.moex
    symbols = ['sber.moex', 'oblg.moex']
    
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /compare sber.moex oblg.moex")
    print("=" * 50)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π)
    user_context = {'saved_portfolios': {}}
    saved_portfolios = user_context.get('saved_portfolios', {})
    
    print(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏: {list(saved_portfolios.keys())}")
    print()
    
    expanded_symbols = []
    portfolio_descriptions = []
    portfolio_contexts = []
    
    for symbol in symbols:
        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–∞: '{symbol}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
        is_portfolio = symbol in saved_portfolios
        print(f"   üîç is_portfolio –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ saved_portfolios: {is_portfolio}")
        
        # Additional check: avoid treating asset symbols as portfolios
        if is_portfolio and ('.' in symbol and 
            not any(indicator in symbol.upper() for indicator in ['PORTFOLIO_', 'PF_', '.PF', '.pf'])):
            # This looks like an asset symbol, not a portfolio
            print(f"   üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–∏–º–≤–æ–ª '{symbol}' —Å–æ–¥–µ—Ä–∂–∏—Ç '.' –∏ –Ω–µ –∏–º–µ–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
            print(f"   üîç –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è: {[indicator for indicator in ['PORTFOLIO_', 'PF_', '.PF', '.pf'] if indicator in symbol.upper()]}")
            is_portfolio = False
            print(f"   ‚úÖ –°–∏–º–≤–æ–ª '{symbol}' –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤")
        else:
            print(f"   üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∞:")
            print(f"   üîç   is_portfolio: {is_portfolio}")
            print(f"   üîç   —Å–æ–¥–µ—Ä–∂–∏—Ç '.': {'.' in symbol}")
            print(f"   üîç   –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è: {[indicator for indicator in ['PORTFOLIO_', 'PF_', '.PF', '.pf'] if indicator in symbol.upper()]}")
        
        if not is_portfolio:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º case-insensitive match
            for portfolio_key in saved_portfolios.keys():
                if (symbol.lower() == portfolio_key.lower() or
                    symbol.upper() == portfolio_key.upper()):
                    # Additional check: avoid treating asset symbols as portfolios
                    if ('.' in symbol and 
                        not any(indicator in symbol.upper() for indicator in ['PORTFOLIO_', 'PF_', '.PF', '.pf'])):
                        # This looks like an asset symbol, not a portfolio
                        is_portfolio = False
                        break
                    else:
                        # Use the exact key from saved_portfolios
                        symbol = portfolio_key
                        is_portfolio = True
                        break
        
        print(f"   is_portfolio: {is_portfolio}")
        print(f"   –≤ saved_portfolios: {symbol in saved_portfolios}")
        
        if is_portfolio:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: –°–∏–º–≤–æ–ª '{symbol}' —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—å!")
            # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
        else:
            print(f"   ‚úÖ –°–∏–º–≤–æ–ª '{symbol}' —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤")
            # –û–±—ã—á–Ω—ã–π –∞–∫—Ç–∏–≤
            expanded_symbols.append(symbol)
            portfolio_descriptions.append(symbol)
            portfolio_contexts.append({
                'symbol': symbol,
                'portfolio_symbols': [symbol],
                'portfolio_weights': [1.0],
                'portfolio_currency': None,
                'portfolio_object': None
            })
        
        print()
    
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"   expanded_symbols: {expanded_symbols}")
    print(f"   portfolio_descriptions: {portfolio_descriptions}")
    print(f"   portfolio_contexts: {[ctx['symbol'] for ctx in portfolio_contexts]}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    try:
        has_portfolios_only = all(isinstance(s, (Mock,)) for s in expanded_symbols)
        has_assets_only = all(not isinstance(s, (Mock,)) for s in expanded_symbols)
        is_mixed_comparison = not (has_portfolios_only or has_assets_only)
        
        print("üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
        print(f"   has_portfolios_only: {has_portfolios_only}")
        print(f"   has_assets_only: {has_assets_only}")
        print(f"   is_mixed_comparison: {is_mixed_comparison}")
        
        if has_assets_only:
            print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–æ–≤")
        elif has_portfolios_only:
            print("   ‚ùå –û–®–ò–ë–ö–ê: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)")
        elif is_mixed_comparison:
            print("   ‚ùå –û–®–ò–ë–ö–ê: —Å–º–µ—à–∞–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)")
            
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞: {e}")
    
    print()
    print("üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print("   - expanded_symbols: ['sber.moex', 'oblg.moex']")
    print("   - has_assets_only: True")
    print("   - is_mixed_comparison: False")
    print("   - has_portfolios_only: False")

def test_with_existing_portfolios():
    """–¢–µ—Å—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è–º–∏"""
    print("\n" + "=" * 50)
    print("üß™ –¢–µ—Å—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è–º–∏")
    print("=" * 50)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ—Ä—Ç—Ñ–µ–ª—è–º–∏
    user_context = {
        'saved_portfolios': {
            'sber.moex': {
                'symbols': ['SBER.MOEX', 'GAZP.MOEX'],
                'weights': [0.7, 0.3],
                'currency': 'RUB'
            },
            'oblg.moex': {
                'symbols': ['OBLG.MOEX', 'SUGD.MOEX'],
                'weights': [0.6, 0.4],
                'currency': 'RUB'
            }
        }
    }
    
    saved_portfolios = user_context.get('saved_portfolios', {})
    symbols = ['sber.moex', 'oblg.moex']
    
    print(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏: {list(saved_portfolios.keys())}")
    print()
    
    for symbol in symbols:
        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–∞: '{symbol}'")
        
        is_portfolio = symbol in saved_portfolios
        print(f"   üîç is_portfolio –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ saved_portfolios: {is_portfolio}")
        
        # Additional check: avoid treating asset symbols as portfolios
        if is_portfolio and ('.' in symbol and 
            not any(indicator in symbol.upper() for indicator in ['PORTFOLIO_', 'PF_', '.PF', '.pf'])):
            # This looks like an asset symbol, not a portfolio
            print(f"   üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–∏–º–≤–æ–ª '{symbol}' —Å–æ–¥–µ—Ä–∂–∏—Ç '.' –∏ –Ω–µ –∏–º–µ–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
            print(f"   üîç –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è: {[indicator for indicator in ['PORTFOLIO_', 'PF_', '.PF', '.pf'] if indicator in symbol.upper()]}")
            is_portfolio = False
            print(f"   ‚úÖ –°–∏–º–≤–æ–ª '{symbol}' –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤")
        else:
            print(f"   üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∞:")
            print(f"   üîç   is_portfolio: {is_portfolio}")
            print(f"   üîç   —Å–æ–¥–µ—Ä–∂–∏—Ç '.': {'.' in symbol}")
            print(f"   üîç   –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è: {[indicator for indicator in ['PORTFOLIO_', 'PF_', '.PF', '.pf'] if indicator in symbol.upper()]}")
        
        if not is_portfolio:
            for portfolio_key in saved_portfolios.keys():
                if (symbol.lower() == portfolio_key.lower() or
                    symbol.upper() == portfolio_key.upper()):
                    # Additional check: avoid treating asset symbols as portfolios
                    if ('.' in symbol and 
                        not any(indicator in symbol.upper() for indicator in ['PORTFOLIO_', 'PF_', '.PF', '.pf'])):
                        # This looks like an asset symbol, not a portfolio
                        is_portfolio = False
                        break
                    else:
                        # Use the exact key from saved_portfolios
                        symbol = portfolio_key
                        is_portfolio = True
                        break
        
        print(f"   is_portfolio: {is_portfolio}")
        
        if is_portfolio:
            print(f"   ‚úÖ –°–∏–º–≤–æ–ª '{symbol}' —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—å")
            portfolio_info = saved_portfolios[symbol]
            print(f"   –°–æ—Å—Ç–∞–≤: {portfolio_info['symbols']}")
            print(f"   –í–µ—Å–∞: {portfolio_info['weights']}")
        else:
            print(f"   ‚ùå –°–∏–º–≤–æ–ª '{symbol}' –ù–ï —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—å")
        
        print()

if __name__ == '__main__':
    debug_compare_issue()
    test_with_existing_portfolios()
