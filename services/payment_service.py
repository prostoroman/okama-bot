"""
Payment service for Telegram Stars integration
Handles Pro subscription purchases and payment processing
"""

import os
import logging
from datetime import datetime, timedelta
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import ContextTypes
from telegram.error import TelegramError

from .db import upgrade_to_pro, get_user_status

logger = logging.getLogger(__name__)

# Payment configuration
PRO_PRICE_STARS = int(os.getenv('PRO_PRICE_STARS', '1000'))  # Price in Telegram Stars
PRO_DURATION_DAYS = int(os.getenv('PRO_DURATION_DAYS', '30'))
STARS_TEST_MODE = os.getenv('STARS_TEST_MODE', 'false').lower() == 'true'

class PaymentService:
    """Service for handling payment operations"""
    
    def __init__(self):
        mode = "TEST" if STARS_TEST_MODE else "PRODUCTION"
        logger.info(f"Payment service initialized for Telegram Stars ({mode} mode)")
    
    async def send_invoice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Send invoice for Pro subscription using Telegram Stars
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        user_id = update.effective_user.id
        user_status = get_user_status(user_id)
        
        # Check if user already has active Pro subscription
        if user_status['is_pro_active']:
            paid_until = datetime.fromisoformat(user_status['paid_until'])
            await update.message.reply_text(
                f"‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è Pro –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {paid_until.strftime('%d.%m.%Y')}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞."
            )
            return
        
        try:
            # Create invoice with empty provider_token for Telegram Stars
            await context.bot.send_invoice(
                chat_id=user_id,
                title="üíé Pro –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É",
                description=f"–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ {PRO_DURATION_DAYS} –¥–Ω–µ–π",
                payload=f"pro_subscription_{user_id}",
                provider_token="",  # Empty string for Telegram Stars
                currency="XTR",  # Telegram Stars currency code
                prices=[LabeledPrice("Pro –¥–æ—Å—Ç—É–ø", PRO_PRICE_STARS)],
                start_parameter=f"pro_{user_id}",
                is_flexible=False,
                need_name=False,
                need_phone_number=False,
                need_email=False,
                need_shipping_address=False,
                send_phone_number_to_provider=False,
                send_email_to_provider=False,
                disable_notification=False,
                protect_content=False,
                reply_to_message_id=None,
                allow_sending_without_reply=False,
                reply_markup=None,
                # Test mode configuration
                **({"test_mode": STARS_TEST_MODE} if STARS_TEST_MODE else {})
            )
            
        except TelegramError as e:
            logger.error(f"Failed to send invoice to user {user_id}: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
            )
    
    async def send_stars_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Send Stars payment request
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        user_id = update.effective_user.id
        user_status = get_user_status(user_id)
        
        # Check if user already has active Pro subscription
        if user_status['is_pro_active']:
            paid_until = datetime.fromisoformat(user_status['paid_until'])
            await update.message.reply_text(
                f"‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è Pro –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {paid_until.strftime('%d.%m.%Y')}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞."
            )
            return
        
        message = f"""üíé <b>Pro –¥–æ—Å—Ç—É–ø - {PRO_PRICE_STARS} ‚≠ê</b>

<b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>
‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–æ—Ç—É
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
‚úÖ –î–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º
‚úÖ –î–µ–π—Å—Ç–≤—É–µ—Ç {PRO_DURATION_DAYS} –¥–Ω–µ–π

<b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars</b>
{f"üß™ <b>–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú</b> - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ Stars" if STARS_TEST_MODE else ""}
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"üíé –û–ø–ª–∞—Ç–∏—Ç—å {PRO_PRICE_STARS} ‚≠ê", callback_data="pay_stars")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
        ])
        
        await update.message.reply_text(message, reply_markup=keyboard, parse_mode='HTML')
    
    async def handle_successful_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle successful payment and upgrade user to Pro
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        if not update.message or not update.message.successful_payment:
            return
        
        user_id = update.effective_user.id
        payment = update.message.successful_payment
        
        # Verify payment details
        if payment.total_amount != PRO_PRICE_STARS:
            logger.warning(f"Payment amount mismatch for user {user_id}: {payment.total_amount} != {PRO_PRICE_STARS}")
        
        # Upgrade user to Pro
        success = upgrade_to_pro(user_id, PRO_DURATION_DAYS)
        
        if success:
            paid_until = datetime.utcnow().replace(microsecond=0) + timedelta(days=PRO_DURATION_DAYS)
            
            message = f"""üéâ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</b>

‚úÖ –í–∞—à Pro –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {paid_until.strftime('%d.%m.%Y %H:%M')} UTC
üíé –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!

–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞."""
            
            await update.message.reply_text(message, parse_mode='HTML')
            
            # Log successful payment
            logger.info(f"User {user_id} successfully upgraded to Pro until {paid_until.isoformat()}")
            
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Pro –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
            )
            logger.error(f"Failed to upgrade user {user_id} to Pro after payment")
    
    async def handle_pre_checkout_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle pre-checkout query for invoice payments
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        query = update.pre_checkout_query
        
        # Verify payment details
        if query.total_amount != PRO_PRICE_STARS:
            await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        # Verify payload
        expected_payload = f"pro_subscription_{query.from_user.id}"
        if query.invoice_payload != expected_payload:
            await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        # Approve payment
        await query.answer(ok=True)
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle callback queries for payment buttons
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        query = update.callback_query
        await query.answer()
        
        if query.data == "buy_pro":
            await self.send_stars_payment(update, context)
        elif query.data == "pay_stars":
            await self.send_invoice(update, context)
        elif query.data == "cancel_payment":
            await query.edit_message_text("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        elif query.data == "show_profile":
            await self.show_profile(update, context)
    
    async def show_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Show user profile with subscription status
        
        Args:
            update: Telegram update object
            context: Bot context
        """
        user_id = update.effective_user.id
        user_status = get_user_status(user_id)
        
        # Format user info
        username = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
        first_name = update.effective_user.first_name or ""
        last_name = update.effective_user.last_name or ""
        full_name = f"{first_name} {last_name}".strip()
        
        # Format subscription info
        if user_status['is_pro_active']:
            paid_until = datetime.fromisoformat(user_status['paid_until'])
            plan_info = f"üíé <b>Pro</b> (–¥–æ {paid_until.strftime('%d.%m.%Y')})"
            requests_info = "‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
        else:
            plan_info = "üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π</b>"
            remaining = user_status['remaining_requests']
            total = user_status['daily_limit']
            requests_info = f"üìä {remaining}/{total} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è"
        
        message = f"""üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

<b>–ò–º—è:</b> {full_name}
<b>Username:</b> @{username}
<b>ID:</b> {user_id}

<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {plan_info}
<b>–ó–∞–ø—Ä–æ—Å—ã:</b> {requests_info}

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/buy - –ö—É–ø–∏—Ç—å Pro –¥–æ—Å—Ç—É–ø
/profile - –≠—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å
/support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å Pro", callback_data="buy_pro")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_profile")]
        ])
        
        if update.callback_query:
            await update.callback_query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
        else:
            await update.message.reply_text(message, reply_markup=keyboard, parse_mode='HTML')

# Global payment service instance
payment_service = PaymentService()
