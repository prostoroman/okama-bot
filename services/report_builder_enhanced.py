"""
Enhanced Report Builder

–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å:
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
- –ö—Ä–∞—Å–∏–≤—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
- –ü–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
- –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤–∞–ª—é—Ç
"""

from __future__ import annotations
from typing import Dict, List, Tuple, Any, Optional
import io
import logging

import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

logger = logging.getLogger(__name__)

class EnhancedReportBuilder:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è
        plt.style.use('default')
        self.colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']
        
    def build_report(self, intent: str, data: Dict[str, Any], user_query: str) -> Tuple[str, List[bytes]]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
        try:
            if intent == 'asset_single':
                return self._build_single_asset_report(data, user_query)
            elif intent == 'asset_compare':
                return self._build_comparison_report(data, user_query)
            elif intent == 'portfolio_analysis':
                return self._build_portfolio_report(data, user_query)
            elif intent == 'inflation_data':
                return self._build_inflation_report(data, user_query)
            elif intent == 'macro_data':
                return self._build_macro_report(data, user_query)
            else:
                return self._build_generic_report(data, user_query)
                
        except Exception as e:
            logger.error(f"Error building report: {e}")
            return f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}", []
    
    def _build_single_asset_report(self, data: Dict[str, Any], user_query: str) -> Tuple[str, List[bytes]]:
        """–°—Ç—Ä–æ–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É –∞–∫—Ç–∏–≤—É"""
        ticker = data.get('ticker', 'Unknown')
        name = data.get('name', ticker)
        currency = data.get('currency', 'Unknown')
        period = data.get('period', 'Unknown')
        metrics = data.get('metrics', {})
        prices = data.get('prices')
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report_text = f"üìä **–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞: {name} ({ticker})**\n\n"
        report_text += f"**–í–∞–ª—é—Ç–∞:** {currency}\n"
        report_text += f"**–ü–µ—Ä–∏–æ–¥:** {period}\n\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        if metrics:
            report_text += "**–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**\n"
            if metrics.get('cagr') is not None:
                report_text += f"‚Ä¢ CAGR: {metrics['cagr']*100:.2f}%\n"
            if metrics.get('volatility') is not None:
                report_text += f"‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {metrics['volatility']*100:.2f}%\n"
            if metrics.get('sharpe') is not None:
                report_text += f"‚Ä¢ Sharpe Ratio: {metrics['sharpe']:.2f}\n"
            if metrics.get('max_drawdown') is not None:
                report_text += f"‚Ä¢ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics['max_drawdown']*100:.2f}%\n"
            if metrics.get('total_return') is not None:
                report_text += f"‚Ä¢ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics['total_return']*100:.2f}%\n"
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        charts = []
        if isinstance(prices, pd.Series) and not prices.empty:
            # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8))
            
            # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
            ax1.plot(prices.index, prices.values, color=self.colors[0], linewidth=2)
            ax1.set_title(f'–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω—ã: {name} ({ticker})', fontsize=14, fontweight='bold')
            ax1.set_ylabel(f'–¶–µ–Ω–∞ ({currency})', fontsize=12)
            ax1.grid(True, alpha=0.3)
            ax1.tick_params(axis='x', rotation=45)
            
            # –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            returns = prices.pct_change().dropna()
            cumulative_returns = (1 + returns).cumprod()
            ax2.plot(cumulative_returns.index, cumulative_returns.values, color=self.colors[1], linewidth=2)
            ax2.set_title('–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', fontsize=14, fontweight='bold')
            ax2.set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (—Ä–∞–∑—ã)', fontsize=12)
            ax2.grid(True, alpha=0.3)
            ax2.tick_params(axis='x', rotation=45)
            
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
        
        return report_text, charts
    
    def _build_comparison_report(self, data: Dict[str, Any], user_query: str) -> Tuple[str, List[bytes]]:
        """–°—Ç—Ä–æ–∏—Ç –æ—Ç—á–µ—Ç –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é –∞–∫—Ç–∏–≤–æ–≤"""
        tickers = data.get('tickers', [])
        metrics = data.get('metrics', {})
        correlation = data.get('correlation')
        prices = data.get('prices')
        period = data.get('period', 'Unknown')
        currency = data.get('currency', 'Unknown')
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report_text = f"‚öñÔ∏è **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤**\n\n"
        report_text += f"**–ê–∫—Ç–∏–≤—ã:** {', '.join(tickers)}\n"
        report_text += f"**–ü–µ—Ä–∏–æ–¥:** {period}\n"
        report_text += f"**–í–∞–ª—é—Ç–∞:** {currency}\n\n"
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫
        if metrics:
            report_text += "**–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫:**\n"
            metrics_table = self._create_metrics_table(metrics)
            report_text += metrics_table + "\n"
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        if isinstance(correlation, pd.DataFrame) and not correlation.empty:
            report_text += "**–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏:**\n"
            try:
                correlation_text = correlation.round(3).to_string()
                report_text += correlation_text + "\n"
            except Exception as e:
                report_text += f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: {str(e)}\n"
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        charts = []
        if isinstance(prices, pd.DataFrame) and not prices.empty:
            # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
            
            # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω
            for i, ticker in enumerate(tickers):
                if ticker in prices:
                    normalized_prices = prices[ticker] / prices[ticker].iloc[0] * 100
                    ax1.plot(normalized_prices.index, normalized_prices.values, 
                            label=ticker, color=self.colors[i % len(self.colors)], linewidth=2)
            
            ax1.set_title('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã (–±–∞–∑–∞ = 100)', fontsize=14, fontweight='bold')
            ax1.set_ylabel('–¶–µ–Ω–∞ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)', fontsize=12)
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            ax1.tick_params(axis='x', rotation=45)
            
            # –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            returns = prices.pct_change().dropna()
            cumulative_returns = (1 + returns).cumprod()
            
            for i, ticker in enumerate(tickers):
                if ticker in cumulative_returns:
                    ax2.plot(cumulative_returns.index, cumulative_returns[ticker].values,
                            label=ticker, color=self.colors[i % len(self.colors)], linewidth=2)
            
            ax2.set_title('–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', fontsize=14, fontweight='bold')
            ax2.set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (—Ä–∞–∑—ã)', fontsize=12)
            ax2.legend()
            ax2.grid(True, alpha=0.3)
            ax2.tick_params(axis='x', rotation=45)
            
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
        
        return report_text, charts
    
    def _build_portfolio_report(self, data: Dict[str, Any], user_query: str) -> Tuple[str, List[bytes]]:
        """–°—Ç—Ä–æ–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        tickers = data.get('tickers', [])
        weights = data.get('weights', [])
        metrics = data.get('metrics', {})
        portfolio_prices = data.get('portfolio_prices')
        frontier = data.get('frontier')
        period = data.get('period', 'Unknown')
        currency = data.get('currency', 'Unknown')
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report_text = f"üíº **–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è**\n\n"
        report_text += f"**–ê–∫—Ç–∏–≤—ã:** {', '.join(tickers)}\n"
        report_text += f"**–í–µ—Å–∞:** {', '.join([f'{w*100:.1f}%' for w in weights])}\n"
        report_text += f"**–ü–µ—Ä–∏–æ–¥:** {period}\n"
        report_text += f"**–í–∞–ª—é—Ç–∞:** {currency}\n\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        if metrics:
            report_text += "**–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è:**\n"
            if metrics.get('cagr') is not None:
                report_text += f"‚Ä¢ CAGR: {metrics['cagr']*100:.2f}%\n"
            if metrics.get('volatility') is not None:
                report_text += f"‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {metrics['volatility']*100:.2f}%\n"
            if metrics.get('sharpe') is not None:
                report_text += f"‚Ä¢ Sharpe Ratio: {metrics['sharpe']:.2f}\n"
            if metrics.get('max_drawdown') is not None:
                report_text += f"‚Ä¢ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics['max_drawdown']*100:.2f}%\n"
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        charts = []
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        if isinstance(portfolio_prices, pd.Series) and not portfolio_prices.empty:
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
            
            # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
            ax1.plot(portfolio_prices.index, portfolio_prices.values, 
                    color=self.colors[0], linewidth=2)
            ax1.set_title('–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è', fontsize=14, fontweight='bold')
            ax1.set_ylabel(f'–°—Ç–æ–∏–º–æ—Å—Ç—å ({currency})', fontsize=12)
            ax1.grid(True, alpha=0.3)
            ax1.tick_params(axis='x', rotation=45)
            
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≤–µ—Å–æ–≤
            if weights:
                ax2.pie(weights, labels=tickers, autopct='%1.1f%%', 
                       colors=self.colors[:len(weights)], startangle=90)
                ax2.set_title('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è', fontsize=14, fontweight='bold')
            
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
        
        # Efficient Frontier
        if isinstance(frontier, pd.DataFrame) and not frontier.empty and 'vol' in frontier.columns and 'ret' in frontier.columns:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.scatter(frontier['vol'], frontier['ret'], s=20, alpha=0.6, color=self.colors[0])
            ax.set_xlabel('–†–∏—Å–∫ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)', fontsize=12)
            ax.set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', fontsize=12)
            ax.set_title('Efficient Frontier', fontsize=14, fontweight='bold')
            ax.grid(True, alpha=0.3)
            
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
        
        return report_text, charts
    
    def _build_inflation_report(self, data: Dict[str, Any], user_query: str) -> Tuple[str, List[bytes]]:
        """–°—Ç—Ä–æ–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –∏–Ω—Ñ–ª—è—Ü–∏–∏"""
        ticker = data.get('ticker', 'Unknown')
        country = data.get('country', 'Unknown')
        cpi_data = data.get('cpi')
        period = data.get('period', 'Unknown')
        metrics = data.get('metrics', {})
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report_text = f"üìà **–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–ª—è—Ü–∏–∏**\n\n"
        report_text += f"**–°—Ç—Ä–∞–Ω–∞:** {country}\n"
        report_text += f"**–¢–∏–∫–µ—Ä:** {ticker}\n"
        report_text += f"**–ü–µ—Ä–∏–æ–¥:** {period}\n\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        if metrics:
            report_text += "**–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
            if metrics.get('cagr') is not None:
                report_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–æ–π —Ä–æ—Å—Ç: {metrics['cagr']*100:.2f}%\n"
            if metrics.get('volatility') is not None:
                report_text += f"‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {metrics['volatility']*100:.2f}%\n"
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        charts = []
        if isinstance(cpi_data, pd.Series) and not cpi_data.empty:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(cpi_data.index, cpi_data.values, color=self.colors[0], linewidth=2)
            ax.set_title(f'–ò–Ω–¥–µ–∫—Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω (CPI) - {country}', fontsize=14, fontweight='bold')
            ax.set_ylabel('CPI', fontsize=12)
            ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
            ax.grid(True, alpha=0.3)
            ax.tick_params(axis='x', rotation=45)
            
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
        
        return report_text, charts
    
    def _build_macro_report(self, data: Dict[str, Any], user_query: str) -> Tuple[str, List[bytes]]:
        """–°—Ç—Ä–æ–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º"""
        # –î–ª—è –º–∞–∫—Ä–æ-–¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤
        return self._build_comparison_report(data, user_query)
    
    def _build_generic_report(self, data: Dict[str, Any], user_query: str) -> Tuple[str, List[bytes]]:
        """–°—Ç—Ä–æ–∏—Ç –æ–±—â–∏–π –æ—Ç—á–µ—Ç"""
        report_text = f"üìä **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑**\n\n"
        report_text += f"**–ó–∞–ø—Ä–æ—Å:** {user_query}\n\n"
        
        if 'error' in data:
            report_text += f"‚ùå **–û—à–∏–±–∫–∞:** {data['error']}\n"
        else:
            report_text += "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ\n"
        
        return report_text, []
    
    def _create_metrics_table(self, metrics: Dict[str, Dict[str, Any]]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫"""
        if not metrics:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        rows = []
        for ticker, metric_data in metrics.items():
            row = {
                '–¢–∏–∫–µ—Ä': ticker,
                'CAGR (%)': f"{(metric_data.get('cagr') or 0)*100:.2f}",
                '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)': f"{(metric_data.get('volatility') or 0)*100:.2f}",
                'Sharpe': f"{(metric_data.get('sharpe') or 0):.2f}",
                '–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞ (%)': f"{(metric_data.get('max_drawdown') or 0)*100:.2f}"
            }
            rows.append(row)
        
        df = pd.DataFrame(rows)
        return df.to_string(index=False)
    
    def _fig_to_png(self, fig) -> bytes:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç matplotlib figure –≤ PNG bytes"""
        buf = io.BytesIO()
        fig.savefig(buf, format='png', dpi=150, bbox_inches='tight')
        plt.close(fig)
        buf.seek(0)
        return buf.read()
    
    def create_csv_report(self, data: Dict[str, Any], intent: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç CSV –æ—Ç—á–µ—Ç"""
        try:
            if intent == 'asset_single':
                return self._create_single_asset_csv(data)
            elif intent == 'asset_compare':
                return self._create_comparison_csv(data)
            elif intent == 'portfolio_analysis':
                return self._create_portfolio_csv(data)
            else:
                return self._create_generic_csv(data)
        except Exception as e:
            logger.error(f"Error creating CSV report: {e}")
            return ""
    
    def _create_single_asset_csv(self, data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç CSV –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞"""
        prices = data.get('prices')
        if not isinstance(prices, pd.Series) or prices.empty:
            return ""
        
        csv_data = prices.reset_index()
        csv_data.columns = ['Date', 'Price']
        return csv_data.to_csv(index=False)
    
    def _create_comparison_csv(self, data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç CSV –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤"""
        prices = data.get('prices')
        if not isinstance(prices, pd.DataFrame) or prices.empty:
            return ""
        
        csv_data = prices.reset_index()
        return csv_data.to_csv(index=False)
    
    def _create_portfolio_csv(self, data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç CSV –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        portfolio_prices = data.get('portfolio_prices')
        if not isinstance(portfolio_prices, pd.Series) or portfolio_prices.empty:
            return ""
        
        csv_data = portfolio_prices.reset_index()
        csv_data.columns = ['Date', 'Portfolio_Value']
        return csv_data.to_csv(index=False)
    
    def _create_generic_csv(self, data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—â–∏–π CSV"""
        return "No data available for CSV export"
