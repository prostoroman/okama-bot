"""
Enhanced Report Builder

–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å:
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
- –ö—Ä–∞—Å–∏–≤—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
- –ü–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
- –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤–∞–ª—é—Ç
"""

from __future__ import annotations
from typing import Dict, List, Tuple, Any, Optional
import io
import logging

import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

logger = logging.getLogger(__name__)

class EnhancedReportBuilder:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è
        plt.style.use('default')
        self.colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']
        
    def build_report(self, intent: str, data: Dict[str, Any], user_query: str) -> Tuple[str, List[bytes]]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
        try:
            if intent == 'asset_single':
                return self._build_single_asset_report(data, user_query)
            elif intent == 'asset_compare':
                return self._build_comparison_report(data, user_query)
            elif intent == 'portfolio_analysis':
                return self._build_portfolio_report(data, user_query)
            elif intent == 'inflation_data':
                return self._build_inflation_report(data, user_query)
            elif intent == 'macro_data':
                return self._build_macro_report(data, user_query)
            else:
                return self._build_generic_report(data, user_query)
                
        except Exception as e:
            logger.error(f"Error building report: {e}")
            return f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}", []
    
    # –ú–µ—Ç–æ–¥—ã-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å bot.py
    def build_single_asset_report(self, data: Dict[str, Any]) -> Tuple[str, List[bytes]]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å bot.py"""
        try:
            return self._build_single_asset_report(data, "")
        except Exception as e:
            logger.error(f"Error in build_single_asset_report: {e}")
            return f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}", []
    
    def build_multi_asset_report(self, data: Dict[str, Any]) -> Tuple[str, List[bytes]]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å bot.py"""
        try:
            return self._build_comparison_report(data, "")
        except Exception as e:
            logger.error(f"Error in build_multi_asset_report: {e}")
            return f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}", []
    
    def build_portfolio_report(self, data: Dict[str, Any]) -> Tuple[str, List[bytes]]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å bot.py"""
        try:
            return self._build_portfolio_report(data, "")
        except Exception as e:
            logger.error(f"Error in build_portfolio_report: {e}")
            return f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}", []
    
    def build_inflation_report(self, data: Dict[str, Any]) -> Tuple[str, List[bytes]]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å bot.py"""
        try:
            return self._build_inflation_report(data, "")
        except Exception as e:
            logger.error(f"Error in build_inflation_report: {e}")
            return f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}", []
    
    def _build_single_asset_report(self, data: Dict[str, Any], user_query: str) -> Tuple[str, List[bytes]]:
        """–°—Ç—Ä–æ–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É –∞–∫—Ç–∏–≤—É"""
        ticker = data.get('ticker', 'Unknown')
        name = data.get('name', ticker)
        currency = data.get('currency', 'Unknown')
        period = data.get('period', 'Unknown')
        metrics = data.get('metrics', {})
        prices = data.get('prices')
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report_text = f"üìä **–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞: {name} ({ticker})**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–µ (–∫–∞–∫ –≤ –∫–æ–º–∞–Ω–¥–µ /asset)
        if data.get('country'):
            report_text += f"**–°—Ç—Ä–∞–Ω–∞:** {data.get('country')}\n"
        if data.get('exchange'):
            report_text += f"**–ë–∏—Ä–∂–∞:** {data.get('exchange')}\n"
        report_text += f"**–í–∞–ª—é—Ç–∞:** {currency}\n"
        if data.get('type'):
            report_text += f"**–¢–∏–ø:** {data.get('type')}\n"
        if data.get('isin'):
            report_text += f"**ISIN:** {data.get('isin')}\n"
        if data.get('first_date'):
            report_text += f"**–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å:** {data.get('first_date')}\n"
        if data.get('last_date'):
            report_text += f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å:** {data.get('last_date')}\n"
        if data.get('period_length'):
            report_text += f"**–î–ª–∏–Ω–∞ –ø–µ—Ä–∏–æ–¥–∞:** {data.get('period_length')}\n"
        report_text += f"**–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:** {period}\n\n"
        
        # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        if data.get('current_price'):
            report_text += f"**–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:** {data.get('current_price')} {currency}\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∫–∞–∫ –≤ –∫–æ–º–∞–Ω–¥–µ /asset)
        if data.get('annual_return') and data.get('annual_return') != 'N/A':
            report_text += f"**–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {data.get('annual_return')}\n"
        if data.get('total_return') and data.get('total_return') != 'N/A':
            report_text += f"**–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {data.get('total_return')}\n"
        if data.get('volatility') and data.get('volatility') != 'N/A':
            report_text += f"**–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:** {data.get('volatility')}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ enhanced –∞–Ω–∞–ª–∏–∑–∞
        if metrics:
            report_text += "\n**üìà –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏:**\n"
            if metrics.get('cagr') is not None:
                report_text += f"‚Ä¢ CAGR: {metrics['cagr']*100:.2f}%\n"
            if metrics.get('volatility') is not None:
                report_text += f"‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {metrics['volatility']*100:.2f}%\n"
            if metrics.get('sharpe') is not None:
                report_text += f"‚Ä¢ Sharpe Ratio: {metrics['sharpe']:.2f}\n"
            if metrics.get('max_drawdown') is not None:
                report_text += f"‚Ä¢ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics['max_drawdown']*100:.2f}%\n"
            if metrics.get('total_return') is not None:
                report_text += f"‚Ä¢ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics['total_return']*100:.2f}%\n"
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if prices is not None:
            report_text += f"\n**üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:**\n"
            report_text += f"‚Ä¢ –¢–∏–ø prices: {type(prices).__name__}\n"
            if hasattr(prices, 'shape'):
                report_text += f"‚Ä¢ –†–∞–∑–º–µ—Ä: {prices.shape}\n"
            elif hasattr(prices, '__len__'):
                report_text += f"‚Ä¢ –î–ª–∏–Ω–∞: {len(prices)}\n"
            else:
                report_text += f"‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ: {prices}\n"
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        charts = []
        
        # 1. –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if prices is not None and hasattr(prices, 'empty') and isinstance(prices, pd.Series) and not prices.empty:
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8))
            
            # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
            ax1.plot(prices.index, prices.values, color=self.colors[0], linewidth=2)
            ax1.set_title(f'–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω—ã: {name} ({ticker})', fontsize=14, fontweight='bold')
            ax1.set_ylabel(f'–¶–µ–Ω–∞ ({currency})', fontsize=12)
            ax1.grid(True, alpha=0.3)
            ax1.tick_params(axis='x', rotation=45)
            
            # –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            returns = prices.pct_change().dropna()
            cumulative_returns = (1 + returns).cumprod()
            ax2.plot(cumulative_returns.index, cumulative_returns.values, color=self.colors[1], linewidth=2)
            ax2.set_title('–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', fontsize=14, fontweight='bold')
            ax2.set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (—Ä–∞–∑—ã)', fontsize=12)
            ax2.grid(True, alpha=0.3)
            ax2.tick_params(axis='x', rotation=45)
            
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
        
        # 2. –ì—Ä–∞—Ñ–∏–∫ –∏–∑ asset_service (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if data.get('chart'):
            charts.append(data['chart'])
        
        # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if prices is not None and hasattr(prices, 'empty') and isinstance(prices, pd.Series) and not prices.empty and len(prices) > 20:
            # –ì—Ä–∞—Ñ–∏–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (—Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ)
            fig, ax = plt.subplots(figsize=(10, 4))
            window_size = min(30, len(prices) // 4)
            rolling_vol = prices.pct_change().rolling(window=window_size).std() * np.sqrt(252)
            ax.plot(rolling_vol.index, rolling_vol.values, color=self.colors[2], linewidth=1.5)
            ax.set_title(f'–°–∫–æ–ª—å–∑—è—â–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ({window_size} –¥–Ω–µ–π)', fontsize=12)
            ax.set_ylabel('–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–≥–æ–¥–æ–≤–∞—è)', fontsize=10)
            ax.grid(True, alpha=0.3)
            ax.tick_params(axis='x', rotation=45)
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Å–∞–¥–æ–∫
            fig, ax = plt.subplots(figsize=(10, 4))
            cummax = prices.cummax()
            drawdowns = (prices - cummax) / cummax * 100
            ax.fill_between(drawdowns.index, drawdowns.values, 0, color='red', alpha=0.3)
            ax.plot(drawdowns.index, drawdowns.values, color='red', linewidth=1)
            ax.set_title('–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–∞–¥–æ–∫', fontsize=12)
            ax.set_ylabel('–ü—Ä–æ—Å–∞–¥–∫–∞ (%)', fontsize=10)
            ax.grid(True, alpha=0.3)
            ax.tick_params(axis='x', rotation=45)
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
        
        return report_text, charts
    
    def _build_comparison_report(self, data: Dict[str, Any], user_query: str) -> Tuple[str, List[bytes]]:
        """–°—Ç—Ä–æ–∏—Ç –æ—Ç—á–µ—Ç –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é –∞–∫—Ç–∏–≤–æ–≤"""
        tickers = data.get('tickers', [])
        metrics = data.get('metrics', {})
        correlation = data.get('correlation')
        prices = data.get('prices')
        period = data.get('period', 'Unknown')
        currency = data.get('currency', 'Unknown')
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report_text = f"‚öñÔ∏è **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤**\n\n"
        report_text += f"**–ê–∫—Ç–∏–≤—ã:** {', '.join(tickers)}\n"
        report_text += f"**–ü–µ—Ä–∏–æ–¥:** {period}\n"
        report_text += f"**–í–∞–ª—é—Ç–∞:** {currency}\n\n"
        
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –∏–º–µ–Ω–∞
        names = data.get('names') or {}
        if isinstance(names, dict) and names:
            try:
                pretty_names = [f"{t} ‚Äî {names.get(t, t)}" for t in tickers]
                report_text += "**–ù–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤:**\n" + "\n".join([f"‚Ä¢ {s}" for s in pretty_names]) + "\n\n"
            except Exception:
                pass
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫
        if metrics:
            report_text += "**–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫:**\n"
            metrics_table = self._create_metrics_table(metrics)
            report_text += metrics_table + "\n"
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        if correlation is not None and hasattr(correlation, 'empty') and isinstance(correlation, pd.DataFrame) and not correlation.empty:
            report_text += "**–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏:**\n"
            try:
                correlation_text = correlation.round(3).to_string()
                report_text += correlation_text + "\n"
            except Exception as e:
                report_text += f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: {str(e)}\n"
        
        # –î–æ–±–∞–≤–∏–º –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ describe, –µ—Å–ª–∏ –µ—Å—Ç—å
        describe_df = data.get('describe')
        if describe_df is not None and hasattr(describe_df, 'empty') and isinstance(describe_df, pd.DataFrame) and not describe_df.empty:
            try:
                # –ü–æ–∫–∞–∂–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ (CAGR –∏ Max drawdowns) –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
                subset = describe_df.copy()
                key_rows = subset[subset['property'].isin(['CAGR', 'Max drawdowns'])]
                if hasattr(key_rows, 'empty') and key_rows.empty:
                    key_rows = subset.head(5)
                report_text += "\n**–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (describe):**\n"
                report_text += key_rows.to_string(index=False) + "\n"
            except Exception:
                pass
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        charts = []
        
        # 1) –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (fallback –ø–æ prices)
        if prices is not None and hasattr(prices, 'empty') and isinstance(prices, pd.DataFrame) and not prices.empty:
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
            for i, ticker in enumerate(tickers):
                if ticker in prices:
                    normalized_prices = prices[ticker] / prices[ticker].iloc[0] * 100
                    ax1.plot(normalized_prices.index, normalized_prices.values, 
                            label=ticker, color=self.colors[i % len(self.colors)], linewidth=2)
            ax1.set_title('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã (–±–∞–∑–∞ = 100)', fontsize=14, fontweight='bold')
            ax1.set_ylabel('–¶–µ–Ω–∞ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)', fontsize=12)
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            ax1.tick_params(axis='x', rotation=45)
            returns = prices.pct_change().dropna()
            cumulative_returns = (1 + returns).cumprod()
            for i, ticker in enumerate(tickers):
                if ticker in cumulative_returns:
                    ax2.plot(cumulative_returns.index, cumulative_returns[ticker].values,
                            label=ticker, color=self.colors[i % len(self.colors)], linewidth=2)
            ax2.set_title('–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', fontsize=14, fontweight='bold')
            ax2.set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (—Ä–∞–∑—ã)', fontsize=12)
            ax2.legend()
            ax2.grid(True, alpha=0.3)
            ax2.tick_params(axis='x', rotation=45)
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
        
        # 2) Wealth indexes –∏–∑ AssetList
        wealth_indexes = data.get('wealth_indexes')
        if wealth_indexes is not None and hasattr(wealth_indexes, 'empty') and isinstance(wealth_indexes, pd.DataFrame) and not wealth_indexes.empty:
            fig, ax = plt.subplots(figsize=(12, 6))
            for i, ticker in enumerate(tickers):
                if ticker in wealth_indexes:
                    ax.plot(wealth_indexes.index, wealth_indexes[ticker].values, 
                            label=ticker, color=self.colors[i % len(self.colors)], linewidth=2)
            ax.set_title('Wealth Indexes (–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, base=1)', fontsize=14, fontweight='bold')
            ax.set_ylabel('–ò–Ω–¥–µ–∫—Å –±–æ–≥–∞—Ç—Å—Ç–≤–∞ (—Ä–∞–∑)')
            ax.grid(True, alpha=0.3)
            ax.legend()
            ax.tick_params(axis='x', rotation=45)
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
        
        # 3) –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–∞–¥–æ–∫
        drawdowns = data.get('drawdowns')
        if drawdowns is not None and hasattr(drawdowns, 'empty') and isinstance(drawdowns, pd.DataFrame) and not drawdowns.empty:
            fig, ax = plt.subplots(figsize=(12, 6))
            for i, ticker in enumerate(tickers):
                if ticker in drawdowns:
                    ax.plot(drawdowns.index, drawdowns[ticker].values, 
                            label=ticker, color=self.colors[i % len(self.colors)], linewidth=1.5)
            ax.set_title('–ü—Ä–æ—Å–∞–¥–∫–∏ (Drawdowns)', fontsize=14, fontweight='bold')
            ax.set_ylabel('–ü—Ä–æ—Å–∞–¥–∫–∞')
            ax.grid(True, alpha=0.3)
            ax.legend()
            ax.tick_params(axis='x', rotation=45)
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
        
        # 4) –î–∏–≤–∏–¥–µ–Ω–¥–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        dividend_yield = data.get('dividend_yield')
        if dividend_yield is not None and hasattr(dividend_yield, 'empty') and isinstance(dividend_yield, pd.DataFrame) and not dividend_yield.empty:
            fig, ax = plt.subplots(figsize=(12, 6))
            for i, ticker in enumerate(tickers):
                if ticker in dividend_yield:
                    ax.plot(dividend_yield.index, dividend_yield[ticker].values, 
                            label=ticker, color=self.colors[i % len(self.colors)], linewidth=1.5)
            ax.set_title('–î–∏–≤–∏–¥–µ–Ω–¥–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–∏—Å—Ç–æ—Ä–∏—è)', fontsize=14, fontweight='bold')
            ax.set_ylabel('–î–∏–≤. –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å')
            ax.grid(True, alpha=0.3)
            ax.legend()
            ax.tick_params(axis='x', rotation=45)
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
        
        # 5) –°–∫–æ–ª—å–∑—è—â–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –±–µ–Ω—á–º–∞—Ä–∫–æ–º
        index_corr = data.get('index_corr')
        if index_corr is not None and hasattr(index_corr, 'empty') and isinstance(index_corr, pd.DataFrame) and not index_corr.empty:
            fig, ax = plt.subplots(figsize=(12, 6))
            for i, col in enumerate(index_corr.columns):
                ax.plot(index_corr.index, index_corr[col].values, 
                        label=col, color=self.colors[i % len(self.colors)], linewidth=1.5)
            ax.set_title('–°–∫–æ–ª—å–∑—è—â–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –±–µ–Ω—á–º–∞—Ä–∫–æ–º (–ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤)', fontsize=14, fontweight='bold')
            ax.set_ylabel('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è')
            ax.grid(True, alpha=0.3)
            ax.legend()
            ax.tick_params(axis='x', rotation=45)
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
        
        return report_text, charts
    
    def _build_portfolio_report(self, data: Dict[str, Any], user_query: str) -> Tuple[str, List[bytes]]:
        """–°—Ç—Ä–æ–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        tickers = data.get('tickers', [])
        weights = data.get('weights', [])
        metrics = data.get('metrics', {})
        portfolio_prices = data.get('portfolio_prices')
        frontier = data.get('frontier')
        period = data.get('period', 'Unknown')
        currency = data.get('currency', 'Unknown')
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report_text = f"üíº **–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è**\n\n"
        report_text += f"**–ê–∫—Ç–∏–≤—ã:** {', '.join(tickers)}\n"
        report_text += f"**–í–µ—Å–∞:** {', '.join([f'{w*100:.1f}%' for w in weights])}\n"
        report_text += f"**–ü–µ—Ä–∏–æ–¥:** {period}\n"
        report_text += f"**–í–∞–ª—é—Ç–∞:** {currency}\n\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        if metrics:
            report_text += "**–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è:**\n"
            if metrics.get('cagr') is not None:
                report_text += f"‚Ä¢ CAGR: {metrics['cagr']*100:.2f}%\n"
            if metrics.get('volatility') is not None:
                report_text += f"‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {metrics['volatility']*100:.2f}%\n"
            if metrics.get('sharpe') is not None:
                report_text += f"‚Ä¢ Sharpe Ratio: {metrics['sharpe']:.2f}\n"
            if metrics.get('max_drawdown') is not None:
                report_text += f"‚Ä¢ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics['max_drawdown']*100:.2f}%\n"
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        charts = []
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        if portfolio_prices is not None and hasattr(portfolio_prices, 'empty') and isinstance(portfolio_prices, pd.Series) and not portfolio_prices.empty:
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
            
            # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
            ax1.plot(portfolio_prices.index, portfolio_prices.values, 
                    color=self.colors[0], linewidth=2)
            ax1.set_title('–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è', fontsize=14, fontweight='bold')
            ax1.set_ylabel(f'–°—Ç–æ–∏–º–æ—Å—Ç—å ({currency})', fontsize=12)
            ax1.grid(True, alpha=0.3)
            ax1.tick_params(axis='x', rotation=45)
            
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≤–µ—Å–æ–≤
            if weights:
                ax2.pie(weights, labels=tickers, autopct='%1.1f%%', 
                       colors=self.colors[:len(weights)], startangle=90)
                ax2.set_title('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è', fontsize=14, fontweight='bold')
            
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
        
        # Efficient Frontier
        if frontier is not None and hasattr(frontier, 'empty') and isinstance(frontier, pd.DataFrame) and not frontier.empty and 'vol' in frontier.columns and 'ret' in frontier.columns:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.scatter(frontier['vol'], frontier['ret'], s=20, alpha=0.6, color=self.colors[0])
            ax.set_xlabel('–†–∏—Å–∫ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)', fontsize=12)
            ax.set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', fontsize=12)
            ax.set_title('Efficient Frontier', fontsize=14, fontweight='bold')
            ax.grid(True, alpha=0.3)
            
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
        
        return report_text, charts
    
    def _build_inflation_report(self, data: Dict[str, Any], user_query: str) -> Tuple[str, List[bytes]]:
        """–°—Ç—Ä–æ–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –∏–Ω—Ñ–ª—è—Ü–∏–∏"""
        ticker = data.get('ticker', 'Unknown')
        country = data.get('country', 'Unknown')
        name = data.get('name', 'CPI')
        currency = data.get('currency', 'Unknown')
        period = data.get('period', 'Unknown')
        cpi_data = data.get('cpi_data')  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'cpi' –Ω–∞ 'cpi_data'
        metrics = data.get('metrics', {})
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report_text = f"üìà **–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–ª—è—Ü–∏–∏**\n\n"
        report_text += f"**–°—Ç—Ä–∞–Ω–∞:** {country}\n"
        report_text += f"**–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä:** {name}\n"
        report_text += f"**–¢–∏–∫–µ—Ä:** {ticker}\n"
        report_text += f"**–í–∞–ª—é—Ç–∞:** {currency}\n"
        report_text += f"**–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:** {period}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö
        if data.get('first_date') and data.get('first_date') != 'N/A':
            report_text += f"**–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å:** {data.get('first_date')}\n"
        if data.get('last_date') and data.get('last_date') != 'N/A':
            report_text += f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å:** {data.get('last_date')}\n"
        if data.get('period_length') and data.get('period_length') != 'N/A':
            report_text += f"**–î–ª–∏–Ω–∞ –ø–µ—Ä–∏–æ–¥–∞:** {data.get('period_length')}\n"
        
        report_text += "\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        if metrics:
            report_text += "**üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
            if metrics.get('cagr') is not None:
                report_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–æ–π —Ä–æ—Å—Ç: {metrics['cagr']*100:.2f}%\n"
            if metrics.get('volatility') is not None:
                report_text += f"‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {metrics['volatility']*100:.2f}%\n"
            if metrics.get('sharpe') is not None:
                report_text += f"‚Ä¢ Sharpe Ratio: {metrics['sharpe']:.2f}\n"
            if metrics.get('max_drawdown') is not None:
                report_text += f"‚Ä¢ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics['max_drawdown']*100:.2f}%\n"
            if metrics.get('total_return') is not None:
                report_text += f"‚Ä¢ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics['total_return']*100:.2f}%\n"
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        charts = []
        
        # 1. –ì—Ä–∞—Ñ–∏–∫ –∏–∑ okama_handler (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if data.get('chart'):
            charts.append(data['chart'])
        
        # 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ CPI (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if cpi_data is not None and hasattr(cpi_data, 'empty') and isinstance(cpi_data, pd.Series) and not cpi_data.empty:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(cpi_data.index, cpi_data.values, color=self.colors[0], linewidth=2)
            ax.set_title(f'{name} - –î–∏–Ω–∞–º–∏–∫–∞ CPI ({country})', fontsize=14, fontweight='bold')
            ax.set_ylabel(f'CPI ({currency})', fontsize=12)
            ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
            ax.grid(True, alpha=0.3)
            ax.tick_params(axis='x', rotation=45)
            
            plt.tight_layout()
            charts.append(self._fig_to_png(fig))
            
            # 3. –ì—Ä–∞—Ñ–∏–∫ –≥–æ–¥–æ–≤–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è CPI
            if len(cpi_data) > 12:  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ–¥–æ–≤–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                fig, ax = plt.subplots(figsize=(10, 4))
                yearly_change = cpi_data.pct_change(12).dropna() * 100  # –ì–æ–¥–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ %
                ax.plot(yearly_change.index, yearly_change.values, color=self.colors[1], linewidth=2)
                ax.set_title(f'{name} - –ì–æ–¥–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ CPI ({country})', fontsize=12)
                ax.set_ylabel('–ò–∑–º–µ–Ω–µ–Ω–∏–µ CPI (%)', fontsize=10)
                ax.set_xlabel('–î–∞—Ç–∞', fontsize=10)
                ax.grid(True, alpha=0.3)
                ax.axhline(y=0, color='black', linestyle='-', alpha=0.3)
                ax.tick_params(axis='x', rotation=45)
                
                plt.tight_layout()
                charts.append(self._fig_to_png(fig))
        
        return report_text, charts
    
    def _build_macro_report(self, data: Dict[str, Any], user_query: str) -> Tuple[str, List[bytes]]:
        """–°—Ç—Ä–æ–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º"""
        # –î–ª—è –º–∞–∫—Ä–æ-–¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤
        return self._build_comparison_report(data, user_query)
    
    def _build_generic_report(self, data: Dict[str, Any], user_query: str) -> Tuple[str, List[bytes]]:
        """–°—Ç—Ä–æ–∏—Ç –æ–±—â–∏–π –æ—Ç—á–µ—Ç"""
        report_text = f"üìä **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑**\n\n"
        report_text += f"**–ó–∞–ø—Ä–æ—Å:** {user_query}\n\n"
        
        if 'error' in data:
            report_text += f"‚ùå **–û—à–∏–±–∫–∞:** {data['error']}\n"
        else:
            report_text += "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ\n"
        
        return report_text, []
    
    def _create_metrics_table(self, metrics: Dict[str, Dict[str, Any]]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫"""
        if not metrics:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        rows = []
        for ticker, metric_data in metrics.items():
            row = {
                '–¢–∏–∫–µ—Ä': ticker,
                'CAGR (%)': f"{(metric_data.get('cagr') or 0)*100:.2f}",
                '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)': f"{(metric_data.get('volatility') or 0)*100:.2f}",
                'Sharpe': f"{(metric_data.get('sharpe') or 0):.2f}",
                '–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞ (%)': f"{(metric_data.get('max_drawdown') or 0)*100:.2f}"
            }
            rows.append(row)
        
        df = pd.DataFrame(rows)
        return df.to_string(index=False)
    
    def _fig_to_png(self, fig) -> bytes:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç matplotlib figure –≤ PNG bytes"""
        buf = io.BytesIO()
        fig.savefig(buf, format='png', dpi=150, bbox_inches='tight')
        plt.close(fig)
        buf.seek(0)
        return buf.read()
    
    def create_csv_report(self, data: Dict[str, Any], intent: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç CSV –æ—Ç—á–µ—Ç"""
        try:
            if intent == 'asset_single':
                return self._create_single_asset_csv(data)
            elif intent == 'asset_compare':
                return self._create_comparison_csv(data)
            elif intent == 'portfolio_analysis':
                return self._create_portfolio_csv(data)
            else:
                return self._create_generic_csv(data)
        except Exception as e:
            logger.error(f"Error creating CSV report: {e}")
            return ""
    
    def _create_single_asset_csv(self, data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç CSV –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞"""
        prices = data.get('prices')
        if prices is None or not hasattr(prices, 'empty') or not isinstance(prices, pd.Series) or prices.empty:
            return ""
        
        csv_data = prices.reset_index()
        csv_data.columns = ['Date', 'Price']
        return csv_data.to_csv(index=False)
    
    def _create_comparison_csv(self, data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç CSV –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤"""
        prices = data.get('prices')
        if prices is None or not hasattr(prices, 'empty') or not isinstance(prices, pd.DataFrame) or prices.empty:
            return ""
        
        csv_data = prices.reset_index()
        return csv_data.to_csv(index=False)
    
    def _create_portfolio_csv(self, data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç CSV –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        portfolio_prices = data.get('portfolio_prices')
        if portfolio_prices is None or not hasattr(portfolio_prices, 'empty') or not isinstance(portfolio_prices, pd.Series) or portfolio_prices.empty:
            return ""
        
        csv_data = portfolio_prices.reset_index()
        csv_data.columns = ['Date', 'Portfolio_Value']
        return csv_data.to_csv(index=False)
    
    def _create_generic_csv(self, data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—â–∏–π CSV"""
        return "No data available for CSV export"
