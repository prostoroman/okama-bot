import sys
import logging
import os
import json
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import io
from typing import Dict, List, Optional

# Check Python version compatibility
if sys.version_info < (3, 7):
    print("ERROR: Python 3.7+ required. Current version:", sys.version)
    raise RuntimeError("Python 3.7+ required")

from config import Config
from services.asset_service import AssetService
from yandexgpt_service import YandexGPTService
from services.intent_parser_enhanced import EnhancedIntentParser
from services.asset_resolver_enhanced import EnhancedAssetResolver
from services.okama_handler_enhanced import EnhancedOkamaHandler
from services.report_builder_enhanced import EnhancedReportBuilder
from services.analysis_engine_enhanced import EnhancedAnalysisEngine
from services.financial_brain_enhanced import EnhancedOkamaFinancialBrain

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Health check for deployment
def health_check():
    """Simple health check for deployment"""
    logger.info("‚úÖ Health check: Okama Finance Bot is running")
    logger.info(f"‚úÖ Environment: {'PRODUCTION' if os.getenv('PRODUCTION') else 'LOCAL'}")
    logger.info(f"‚úÖ Python version: {sys.version}")
    logger.info(f"‚úÖ Bot token configured: {'Yes' if Config.TELEGRAM_BOT_TOKEN else 'No'}")
    return True

class OkamaFinanceBot:
    """Simple Telegram bot class for financial analysis with Okama library"""
    
    def __init__(self):
        """Initialize the bot with required services"""
        Config.validate()
        
        # Initialize logger
        self.logger = logging.getLogger(__name__)
        
        self.asset_service = AssetService()
        self.yandexgpt_service = YandexGPTService()
        self.intent_parser = EnhancedIntentParser()
        self.asset_resolver = EnhancedAssetResolver()
        self.okama_handler = EnhancedOkamaHandler()
        self.report_builder = EnhancedReportBuilder()
        self.analysis_engine = EnhancedAnalysisEngine()
        self.financial_brain = EnhancedOkamaFinancialBrain()
        
        # User session storage
        self.user_sessions = {}
        
    async def _send_message_safe(self, update: Update, text: str, parse_mode: str = 'Markdown'):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏"""
        if len(text) <= 4000:
            await update.message.reply_text(text, parse_mode=parse_mode)
        else:
            await self._send_long_text(update, text, parse_mode)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        # Escape user input to prevent Markdown parsing issues
        user_name = user.first_name or "User"
        # Remove any special characters that could break Markdown
        user_name = user_name.replace("*", "").replace("_", "").replace("`", "").replace("[", "").replace("]", "")
        
        welcome_message = f"""üß† Okama Financial Brain

–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –ø–æ–º–æ–≥—É —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–æ–≤ –∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π.

**–ß—Ç–æ —É–º–µ—é:**
- –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —Ü–µ–Ω
- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫—Ç–∏–≤–æ–≤
- –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–≤–µ—Å–∞, —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, efficient frontier)
- –ú–∞–∫—Ä–æ/—Ç–æ–≤–∞—Ä—ã/–≤–∞–ª—é—Ç—ã
- –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–ª—è—Ü–∏–∏
- AI‚Äë–æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

**–ö–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è (–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º):**
- "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π Apple"
- "–°—Ä–∞–≤–Ω–∏ –∑–æ–ª–æ—Ç–æ –∏ –Ω–µ—Ñ—Ç—å"
- "–ü–æ—Ä—Ç—Ñ–µ–ª—å VOO.US 60% –∏ AGG.US 40%"
- "–ò–Ω—Ñ–ª—è—Ü–∏—è –≤ –°–®–ê –∑–∞ 5 –ª–µ—Ç"
- "–°—Ä–∞–≤–Ω–∏ S&P 500 –∏ NASDAQ –≤ —Ä—É–±–ª—è—Ö"

**–ö–æ–º–∞–Ω–¥—ã:**
/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/asset [—Ç–∏–∫–µ—Ä] [–ø–µ—Ä–∏–æ–¥] ‚Äî –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∏ AI —Å–ø—Ä–∞–≤–∫–æ–π
/analyze [—Ç–∏–∫–µ—Ä] [–ø–µ—Ä–∏–æ–¥] ‚Äî –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ AI –∞–Ω–∞–ª–∏–∑–æ–º
/chart [—Ç–∏–∫–µ—Ä] [–ø–µ—Ä–∏–æ–¥] ‚Äî –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∞–∫—Ç–∏–≤–∞
/price [—Ç–∏–∫–µ—Ä] ‚Äî —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
/dividends [—Ç–∏–∫–µ—Ä] ‚Äî –¥–∏–≤–∏–¥–µ–Ω–¥—ã
/chat [–≤–æ–ø—Ä–æ—Å] ‚Äî –≤–æ–ø—Ä–æ—Å AI‚Äë—Å–æ–≤–µ—Ç–Ω–∏–∫—É
/test [—Ç–∏–∫–µ—Ä] ‚Äî —Ç–µ—Å—Ç Okama
/testai ‚Äî —Ç–µ—Å—Ç YandexGPT
/test_split ‚Äî —Ç–µ—Å—Ç —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π SBER.MOEX –∑–∞ 2 –≥–æ–¥–∞"
‚Ä¢ "–°—Ä–∞–≤–Ω–∏ VOO.US –∏ QQQ.US"
‚Ä¢ "–ü–æ—Ä—Ç—Ñ–µ–ª—å: 70% VOO.US, 20% AGG.US, 10% GC.COMM"
‚Ä¢ "–ò–Ω—Ñ–ª—è—Ü–∏—è –≤ –†–æ—Å—Å–∏–∏ –∑–∞ 10 –ª–µ—Ç"
‚Ä¢ "–î–∏–Ω–∞–º–∏–∫–∞ –Ω–µ—Ñ—Ç–∏ –∏ –∑–æ–ª–æ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö"

–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π!"""

        await self._send_message_safe(update, welcome_message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = """üß† **Okama Financial Brain - –°–ø—Ä–∞–≤–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞
/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/asset [—Ç–∏–∫–µ—Ä] [–ø–µ—Ä–∏–æ–¥] ‚Äî –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∏ AI —Å–ø—Ä–∞–≤–∫–æ–π
/analyze [—Ç–∏–∫–µ—Ä] [–ø–µ—Ä–∏–æ–¥] ‚Äî –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ AI –∞–Ω–∞–ª–∏–∑–æ–º
/chart [—Ç–∏–∫–µ—Ä] [–ø–µ—Ä–∏–æ–¥] ‚Äî –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∞–∫—Ç–∏–≤–∞
/price [—Ç–∏–∫–µ—Ä] ‚Äî —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
/dividends [—Ç–∏–∫–µ—Ä] ‚Äî –¥–∏–≤–∏–¥–µ–Ω–¥—ã
/chat [–≤–æ–ø—Ä–æ—Å] ‚Äî –≤–æ–ø—Ä–æ—Å AI‚Äë—Å–æ–≤–µ—Ç–Ω–∏–∫—É
/test [—Ç–∏–∫–µ—Ä] ‚Äî —Ç–µ—Å—Ç Okama
/testai ‚Äî —Ç–µ—Å—Ç YandexGPT
/test_split ‚Äî —Ç–µ—Å—Ç —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–∏–∫–µ—Ä–æ–≤:**
‚Ä¢ **US –∞–∫—Ü–∏–∏:** AAPL.US, VOO.US, SPY.US, QQQ.US
‚Ä¢ **MOEX:** SBER.MOEX, GAZP.MOEX, LKOH.MOEX
‚Ä¢ **–ò–Ω–¥–µ–∫—Å—ã:** SPX.INDX, IXIC.INDX, RGBITR.INDX
‚Ä¢ **–¢–æ–≤–∞—Ä—ã:** GC.COMM (–∑–æ–ª–æ—Ç–æ), CL.COMM (–Ω–µ—Ñ—Ç—å), SI.COMM (—Å–µ—Ä–µ–±—Ä–æ)
‚Ä¢ **–í–∞–ª—é—Ç—ã:** EURUSD.FX, GBPUSD.FX, USDJPY.FX
‚Ä¢ **LSE:** VOD.LSE, HSBA.LSE, BP.LSE

**–ü–µ—Ä–∏–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞:**
‚Ä¢ 1Y, 2Y, 5Y, 10Y, MAX
‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10Y –¥–ª—è –∞–∫—Ü–∏–π, 5Y –¥–ª—è –º–∞–∫—Ä–æ

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π Apple –∑–∞ 5 –ª–µ—Ç"
‚Ä¢ "–°—Ä–∞–≤–Ω–∏ –∑–æ–ª–æ—Ç–æ –∏ –Ω–µ—Ñ—Ç—å"
‚Ä¢ "–ü–æ—Ä—Ç—Ñ–µ–ª—å: 60% VOO.US, 30% AGG.US, 10% GC.COMM"
‚Ä¢ "–ò–Ω—Ñ–ª—è—Ü–∏—è –≤ –°–®–ê –∑–∞ 10 –ª–µ—Ç"
‚Ä¢ "–î–∏–Ω–∞–º–∏–∫–∞ SBER.MOEX –≤ —Ä—É–±–ª—è—Ö"

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∞–∫—Ç–∏–≤–æ–≤
‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
‚úÖ AI-–≤—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:
1. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (MOEX –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"""

        await self._send_message_safe(update, help_text)
    
    async def asset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /asset command"""
        if not context.args:
            await self._send_message_safe(update, 
                "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞. –ü—Ä–∏–º–µ—Ä: /asset AAPL.US –∏–ª–∏ /asset SBER.MOEX")
            return
        
        symbol = context.args[0].upper()
        period = context.args[1] if len(context.args) > 1 else '10Y'
        
        await self._send_message_safe(update, f"üìä –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–µ {symbol}...")
        
        try:
            asset_info = self.asset_service.get_asset_info(symbol)
            
            if 'error' in asset_info:
                await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞: {asset_info['error']}")
                return
            
            # Format asset info
            response = f"üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–µ: {symbol}**\n\n"
            response += f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {asset_info.get('name', 'N/A')}\n"
            response += f"**–°—Ç—Ä–∞–Ω–∞:** {asset_info.get('country', 'N/A')}\n"
            response += f"**–ë–∏—Ä–∂–∞:** {asset_info.get('exchange', 'N/A')}\n"
            response += f"**–í–∞–ª—é—Ç–∞:** {asset_info.get('currency', 'N/A')}\n"
            response += f"**–¢–∏–ø:** {asset_info.get('type', 'N/A')}\n"
            response += f"**ISIN:** {asset_info.get('isin', 'N/A')}\n"
            response += f"**–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö:** {asset_info.get('period_length', 'N/A')}\n"
            
            if asset_info.get('current_price') is not None:
                response += f"**–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:** {asset_info['current_price']:.2f}\n"
            
            if asset_info.get('annual_return') != 'N/A':
                response += f"**–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {asset_info['annual_return']}\n"
            
            if asset_info.get('total_return') != 'N/A':
                response += f"**–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {asset_info['total_return']}\n"
            
            if asset_info.get('volatility') != 'N/A':
                response += f"**–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:** {asset_info['volatility']}\n"
            
            await self._send_message_safe(update, response, parse_mode='Markdown')
            
            # Send chart if available
            if 'chart' in asset_info and asset_info['chart']:
                try:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=io.BytesIO(asset_info['chart']),
                        caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω {symbol}"
                    )
                except Exception as chart_error:
                    self.logger.error(f"Error sending chart for {symbol}: {chart_error}")
                    await self._send_message_safe(update, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {str(chart_error)}")
            
            # Get AI analysis
            await self._send_message_safe(update, "üß† –ü–æ–ª—É—á–∞—é AI –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞...")
            
            try:
                # Create prompt for AI analysis
                ai_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞–∫—Ç–∏–≤ {symbol} ({asset_info.get('name', 'N/A')}) –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
- –°—Ç—Ä–∞–Ω–∞: {asset_info.get('country', 'N/A')}
- –ë–∏—Ä–∂–∞: {asset_info.get('exchange', 'N/A')}
- –í–∞–ª—é—Ç–∞: {asset_info.get('currency', 'N/A')}
- –¢–∏–ø: {asset_info.get('type', 'N/A')}
- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {asset_info.get('current_price', 'N/A')}
- –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {asset_info.get('annual_return', 'N/A')}
- –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {asset_info.get('total_return', 'N/A')}
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {asset_info.get('volatility', 'N/A')}

**–ó–∞–¥–∞—á–∞:** –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞, –≤–∫–ª—é—á–∞—è:
1. –û–±—â—É—é –æ—Ü–µ–Ω–∫—É –∞–∫—Ç–∏–≤–∞
2. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å
3. –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
4. –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏
5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤

–ê–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤."""

                ai_response = self.yandexgpt_service.ask_question(ai_prompt)
                
                if ai_response:
                    # Split AI response if it's too long
                    if len(ai_response) > 4000:
                        await self._send_message_safe(update, "üß† **AI –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞:**")
                        await self._send_long_text(update, ai_response, 'Markdown')
                    else:
                        await self._send_message_safe(update, f"üß† **AI –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞:**\n\n{ai_response}", parse_mode='Markdown')
                else:
                    await self._send_message_safe(update, "‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    
            except Exception as ai_error:
                self.logger.error(f"Error getting AI analysis for {symbol}: {ai_error}")
                await self._send_message_safe(update, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ AI –∞–Ω–∞–ª–∏–∑–∞: {str(ai_error)}")
                
        except Exception as e:
            await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–µ: {str(e)}")
    
    async def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /analyze command - full analysis with AI insights"""
        if not context.args:
            await self._send_message_safe(update, 
                "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞. –ü—Ä–∏–º–µ—Ä: /analyze AAPL.US –∏–ª–∏ /analyze SBER.MOEX")
            return
        
        symbol = context.args[0].upper()
        period = context.args[1] if len(context.args) > 1 else '10Y'
        
        await self._send_message_safe(update, f"üß† –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞ {symbol}...")
        
        try:
            # Get basic asset info
            asset_info = self.asset_service.get_asset_info(symbol)
            
            if 'error' in asset_info:
                await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞: {asset_info['error']}")
                return
            
            # Get price history for charts
            price_history = self.asset_service.get_asset_price_history(symbol, period)
            
            # Send basic info
            response = f"üìä **–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞: {symbol}**\n\n"
            response += f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {asset_info.get('name', 'N/A')}\n"
            response += f"**–°—Ç—Ä–∞–Ω–∞:** {asset_info.get('country', 'N/A')}\n"
            response += f"**–ë–∏—Ä–∂–∞:** {asset_info.get('exchange', 'N/A')}\n"
            response += f"**–í–∞–ª—é—Ç–∞:** {asset_info.get('currency', 'N/A')}\n"
            response += f"**–¢–∏–ø:** {asset_info.get('type', 'N/A')}\n"
            
            if asset_info.get('current_price') is not None:
                response += f"**–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:** {asset_info['current_price']:.2f}\n"
            
            if asset_info.get('annual_return') != 'N/A':
                response += f"**–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {asset_info['annual_return']}\n"
            
            if asset_info.get('total_return') != 'N/A':
                response += f"**–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {asset_info['total_return']}\n"
            
            if asset_info.get('volatility') != 'N/A':
                response += f"**–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:** {asset_info['volatility']}\n"
            
            await self._send_message_safe(update, response, parse_mode='Markdown')
            
            # Send charts from price history
            if 'charts' in price_history and price_history['charts']:
                await self._send_message_safe(update, "üìà –û—Ç–ø—Ä–∞–≤–ª—è—é –≥—Ä–∞—Ñ–∏–∫–∏...")
                for i, img_bytes in enumerate(price_history['charts']):
                    try:
                        caption = f"üìä –ì—Ä–∞—Ñ–∏–∫ {i+1}: {symbol}"
                        if i == 0:
                            caption += " - –î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω"
                        elif i == 1:
                            caption += " - –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"
                        elif i == 2:
                            caption += " - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"
                        
                        await context.bot.send_photo(
                            chat_id=update.effective_chat.id,
                            photo=io.BytesIO(img_bytes),
                            caption=caption
                        )
                    except Exception as chart_error:
                        self.logger.error(f"Error sending chart {i+1} for {symbol}: {chart_error}")
                        await self._send_message_safe(update, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ {i+1}: {str(chart_error)}")
            
            # Send chart from asset info if available
            elif 'chart' in asset_info and asset_info['chart']:
                try:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=io.BytesIO(asset_info['chart']),
                        caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω {symbol}"
                    )
                except Exception as chart_error:
                    self.logger.error(f"Error sending chart for {symbol}: {chart_error}")
                    await self._send_message_safe(update, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {str(chart_error)}")
            
            # Get comprehensive AI analysis
            await self._send_message_safe(update, "üß† –ü–æ–ª—É—á–∞—é –¥–µ—Ç–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑...")
            
            try:
                # Create comprehensive prompt for AI analysis
                ai_prompt = f"""–ü—Ä–æ–≤–µ–¥–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞ {symbol} ({asset_info.get('name', 'N/A')}) –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
- –°—Ç—Ä–∞–Ω–∞: {asset_info.get('country', 'N/A')}
- –ë–∏—Ä–∂–∞: {asset_info.get('exchange', 'N/A')}
- –í–∞–ª—é—Ç–∞: {asset_info.get('currency', 'N/A')}
- –¢–∏–ø: {asset_info.get('type', 'N/A')}
- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {asset_info.get('current_price', 'N/A')}
- –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {asset_info.get('annual_return', 'N/A')}
- –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {asset_info.get('total_return', 'N/A')}
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {asset_info.get('volatility', 'N/A')}

**–ó–∞–¥–∞—á–∞:** –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞, –≤–∫–ª—é—á–∞—è:

1. **–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∞–∫—Ç–∏–≤–∞** (2-3 –∞–±–∑–∞—Ü–∞)
   - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏/–∞–∫—Ç–∏–≤–∞
   - –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞
   - –ü–æ–∑–∏—Ü–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ

2. **–ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π** (2-3 –∞–±–∑–∞—Ü–∞)
   - –ö–ª—é—á–µ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
   - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
   - –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–æ–≤

3. **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑** (2-3 –∞–±–∑–∞—Ü–∞)
   - –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
   - –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
   - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã

4. **–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã** (2-3 –∞–±–∑–∞—Ü–∞)
   - –í–ª–∏—è–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤
   - –í–ª–∏—è–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
   - –ì–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏

5. **–†–∏—Å–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏** (2-3 –∞–±–∑–∞—Ü–∞)
   - –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
   - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞
   - –°—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è

6. **–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** (2-3 –∞–±–∑–∞—Ü–∞)
   - –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
   - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã
   - –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ê–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤. –í–∫–ª—é—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è."""

                ai_response = self.yandexgpt_service.ask_question(ai_prompt)
                
                if ai_response:
                    # Split AI response if it's too long
                    if len(ai_response) > 4000:
                        await self._send_message_safe(update, "üß† **–î–µ—Ç–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞:**")
                        await self._send_long_text(update, ai_response, 'Markdown')
                    else:
                        await self._send_message_safe(update, f"üß† **–î–µ—Ç–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞:**\n\n{ai_response}", parse_mode='Markdown')
                else:
                    await self._send_message_safe(update, "‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    
            except Exception as ai_error:
                self.logger.error(f"Error getting AI analysis for {symbol}: {ai_error}")
                await self._send_message_safe(update, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ AI –∞–Ω–∞–ª–∏–∑–∞: {str(ai_error)}")
                
        except Exception as e:
            await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–∫—Ç–∏–≤–∞: {str(e)}")
    
    async def price_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /price command"""
        if not context.args:
            await self._send_message_safe(update, 
                "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞. –ü—Ä–∏–º–µ—Ä: /price AAPL.US –∏–ª–∏ /price SBER.MOEX")
            return
        
        symbol = context.args[0].upper()
        
        await self._send_message_safe(update, f"üí∞ –ü–æ–ª—É—á–∞—é —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É {symbol}...")
        
        try:
            price_info = self.asset_service.get_asset_price(symbol)
            
            if 'error' in price_info:
                await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞: {price_info['error']}")
                return
            
            response = f"üí∞ **–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}**\n\n"
            response += f"**–¶–µ–Ω–∞:** {price_info.get('price', 'N/A')}\n"
            response += f"**–í–∞–ª—é—Ç–∞:** {price_info.get('currency', 'N/A')}\n"
            response += f"**–î–∞—Ç–∞:** {price_info.get('date', 'N/A')}\n"
            
            await self._send_message_safe(update, response, parse_mode='Markdown')
            
        except Exception as e:
            await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {str(e)}")
    
    async def dividends_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /dividends command"""
        if not context.args:
            await self._send_message_safe(update, 
                "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞. –ü—Ä–∏–º–µ—Ä: /dividends AAPL.US –∏–ª–∏ /dividends SBER.MOEX")
            return
        
        symbol = context.args[0].upper()
        
        await self._send_message_safe(update, f"üíµ –ü–æ–ª—É—á–∞—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤ {symbol}...")
        
        try:
            dividend_info = self.asset_service.get_asset_dividends(symbol)
            
            if 'error' in dividend_info:
                await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞: {dividend_info['error']}")
                return
            
            response = f"üíµ **–î–∏–≤–∏–¥–µ–Ω–¥—ã {symbol}**\n\n"
            response += f"**–í–∞–ª—é—Ç–∞:** {dividend_info.get('currency', 'N/A')}\n"
            response += f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤:** {dividend_info.get('total_periods', 'N/A')}\n\n"
            
            if dividend_info.get('dividends'):
                response += "**–ò—Å—Ç–æ—Ä–∏—è –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤:**\n"
                dividends = dividend_info['dividends']
                # Show last 10 dividends
                sorted_dates = sorted(dividends.keys(), reverse=True)[:10]
                for date in sorted_dates:
                    amount = dividends[date]
                    response += f"‚Ä¢ {date}: {amount:.2f}\n"
            
            await self._send_message_safe(update, response, parse_mode='Markdown')
            
            # Send chart if available
            if 'chart' in dividend_info:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=io.BytesIO(dividend_info['chart']),
                    caption=f"üíµ –ì—Ä–∞—Ñ–∏–∫ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤ {symbol}"
                )
                
        except Exception as e:
            await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤: {str(e)}")
    
    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /test command"""
        if not context.args:
            await self._send_message_safe(update, 
                "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /test AAPL.US")
            return
        
        symbol = context.args[0].upper()
        
        await self._send_message_safe(update, f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Okama –¥–ª—è {symbol}...")
        
        try:
            asset_info = self.asset_service.get_asset_info(symbol)
            
            if 'error' in asset_info:
                await self._send_message_safe(update, f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {asset_info['error']}")
                return
            
            await self._send_message_safe(update, 
                f"‚úÖ –¢–µ—Å—Ç Okama –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n\n"
                f"**–ê–∫—Ç–∏–≤:** {symbol}\n"
                f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {asset_info.get('name', 'N/A')}\n"
                f"**–°—Ç—Ä–∞–Ω–∞:** {asset_info.get('country', 'N/A')}\n"
                f"**–í–∞–ª—é—Ç–∞:** {asset_info.get('currency', 'N/A')}\n"
                f"**–¢–∏–ø:** {asset_info.get('type', 'N/A')}")
                
        except Exception as e:
            await self._send_message_safe(update, f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {str(e)}")
    
    async def testai_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /testai command"""
        await self._send_message_safe(update, "üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YandexGPT...")
        
        try:
            response = self.yandexgpt_service.get_response("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ.")
            
            if response and response.strip():
                await self._send_message_safe(update, 
                    f"‚úÖ –¢–µ—Å—Ç YandexGPT –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"**–û—Ç–≤–µ—Ç AI:**\n{response}")
            else:
                await self._send_message_safe(update, 
                    f"‚ùå –¢–µ—Å—Ç YandexGPT –Ω–µ –ø—Ä–æ—à–µ–ª: {response}")
                
        except Exception as e:
            await self._send_message_safe(update, f"‚ùå –¢–µ—Å—Ç YandexGPT –Ω–µ –ø—Ä–æ—à–µ–ª: {str(e)}")
    
    async def test_split_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /test_split command - test message splitting functionality"""
        await self._send_message_safe(update, "üìù –¢–µ—Å—Ç–∏—Ä—É—é —Ä–∞–∑–±–∏–≤–∫—É –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        try:
            # Create a very long message to test splitting
            long_message = "üß™ **–¢–µ—Å—Ç —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n"
            long_message += "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Å—Ç–∏.\n\n"
            
            # Add many paragraphs to make it long
            for i in range(1, 101):
                long_message += f"**–ü–∞—Ä–∞–≥—Ä–∞—Ñ {i}:**\n"
                long_message += f"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–æ–º–µ—Ä {i} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π. "
                long_message += f"–ö–∞–∂–¥—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –≤ —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç Telegram –≤ 4000 —Å–∏–º–≤–æ–ª–æ–≤. "
                long_message += f"–ú–µ—Ö–∞–Ω–∏–∑–º –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.\n\n"
            
            long_message += "**–ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
            long_message += "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–±–∏—Ç—ã–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π, –∑–Ω–∞—á–∏—Ç –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! üéâ"
            
            await self._send_message_safe(update, long_message)
            
        except Exception as e:
            await self._send_message_safe(update, f"‚ùå –¢–µ—Å—Ç —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–µ –ø—Ä–æ—à–µ–ª: {str(e)}")
    
    async def chat_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /chat command"""
        if not context.args:
            await self._send_message_safe(update, 
                "üí¨ **AI-—Å–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º**\n\n"
                "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º:\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**\n"
                "‚Ä¢ –ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è?\n"
                "‚Ä¢ –ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞?\n"
                "‚Ä¢ –û–±—ä—è—Å–Ω–∏ efficient frontier\n"
                "‚Ä¢ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏\n"
                "‚Ä¢ –ö–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∏—Å–∫–∞–º–∏?\n\n"
                "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                "/chat [–≤–∞—à –≤–æ–ø—Ä–æ—Å]\n\n"
                "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!")
            return
        
        # Get the question from command arguments
        question = " ".join(context.args)
        await self._handle_chat(update, question)
    
    async def _handle_chat(self, update: Update, user_message: str):
        """Handle AI chat requests"""
        try:
            await self._send_message_safe(update, "ü§î Thinking...")
            
            response = self.yandexgpt_service.get_response(user_message)
            
            if response and response.strip():
                await self._send_message_safe(update, response, parse_mode='Markdown')
            else:
                await self._send_message_safe(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
                
        except Exception as e:
            await self._send_message_safe(update, f"‚ùå Error getting AI response: {str(e)}")
    
    async def _get_asset_info_with_chart(self, update: Update, symbol: str, period: str = '10Y'):
        """Get asset info with price history chart"""
        await self._send_message_safe(update, f"üìä –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–µ {symbol} –∏ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω...")
        
        try:
            # Get asset info
            asset_info = self.asset_service.get_asset_info(symbol)
            
            if 'error' in asset_info:
                await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞: {asset_info['error']}")
                return
            
            # Get price history
            price_history = self.asset_service.get_asset_price_history(symbol, period)
            
            if 'error' in price_history:
                await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: {price_history['error']}")
                return
            
            # Format response
            response = f"üìä **–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞: {symbol}**\n\n"
            response += f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {asset_info.get('name', 'N/A')}\n"
            response += f"**–°—Ç—Ä–∞–Ω–∞:** {asset_info.get('country', 'N/A')}\n"
            response += f"**–ë–∏—Ä–∂–∞:** {asset_info.get('exchange', 'N/A')}\n"
            response += f"**–í–∞–ª—é—Ç–∞:** {asset_info.get('currency', 'N/A')}\n"
            response += f"**–¢–∏–ø:** {asset_info.get('type', 'N/A')}\n"
            response += f"**–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:** {period}\n"
            
            if asset_info.get('current_price') is not None:
                response += f"**–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:** {asset_info['current_price']:.2f}\n"
            
            if asset_info.get('annual_return') != 'N/A':
                response += f"**–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {asset_info['annual_return']}\n"
            
            if asset_info.get('total_return') != 'N/A':
                response += f"**–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:** {asset_info['total_return']}\n"
            
            if asset_info.get('volatility') != 'N/A':
                response += f"**–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:** {asset_info['volatility']}\n"
            
            response += "\n**üìà –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω:**\n"
            if price_history.get('data') is not None:
                data = price_history['data']
                if hasattr(data, 'tail'):
                    recent_data = data.tail(5)
                    response += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π:\n"
                    for date, price in recent_data.items():
                        response += f"‚Ä¢ {date}: {price:.2f}\n"
                else:
                    response += "–î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            else:
                response += "–î–∞–Ω–Ω—ã–µ –ø–æ —Ü–µ–Ω–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
            
            await self._send_message_safe(update, response, parse_mode='Markdown')
            
            # Send charts and get AI analysis
            charts = price_history.get('charts', {})
            price_data_info = price_history.get('price_data_info', {})
            
            if charts:
                await self._send_charts_with_ai_analysis(update, symbol, period, charts, price_data_info)
            else:
                await self._send_message_safe(update, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω")
                
        except Exception as e:
            error_msg = str(e)
            logger.error(f"Error in _get_asset_info_with_chart: {error_msg}")
            await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {error_msg}")
    
    async def _send_charts_with_ai_analysis(self, update: Update, symbol: str, period: str, charts: Dict, price_data_info: Dict):
        """Send charts and get AI analysis from YandexGPT"""
        try:
            # Send charts first
            charts_sent = []
            
            if 'adj_close' in charts:
                caption = f"üìà –î–Ω–µ–≤–Ω—ã–µ —Ü–µ–Ω—ã (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ): {symbol} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}"
                await update.message.reply_photo(
                    photo=charts['adj_close'],
                    caption=caption
                )
                charts_sent.append('adj_close')
            
            if 'close_monthly' in charts:
                caption = f"üìä –ú–µ—Å—è—á–Ω—ã–µ —Ü–µ–Ω—ã: {symbol} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}"
                await update.message.reply_photo(
                    photo=charts['close_monthly'],
                    caption=caption
                )
                charts_sent.append('close_monthly')
            
            if 'fallback' in charts:
                caption = f"üìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω: {symbol} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}"
                await update.message.reply_photo(
                    photo=charts['fallback'],
                    caption=caption
                )
                charts_sent.append('fallback')
            
            # Get AI analysis if we have charts
            if charts_sent:
                await self._get_ai_analysis_for_charts(update, symbol, period, charts_sent, price_data_info)
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω")
                
        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"Error in _send_charts_with_ai_analysis: {error_msg}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {error_msg}")
    
    async def _get_ai_analysis_for_charts(self, update: Update, symbol: str, period: str, charts_sent: List[str], price_data_info: Dict):
        """Get AI analysis for the charts from YandexGPT"""
        try:
            await update.message.reply_text("üß† –ü–æ–ª—É—á–∞—é AI –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
            
            # Prepare data for AI analysis
            analysis_data = {
                'symbol': symbol,
                'period': period,
                'charts_available': charts_sent,
                'price_data': price_data_info
            }
            
            # Create analysis prompt
            prompt = self._create_chart_analysis_prompt(analysis_data)
            self.logger.info(f"Created AI analysis prompt, length: {len(prompt)}")
            
            # Get AI response
            ai_response = self._get_yandexgpt_analysis(prompt)
            
            if ai_response:
                self.logger.info(f"AI response received, length: {len(ai_response)}")
                # Send AI analysis
                await update.message.reply_text(
                    f"üß† **AI –∞–Ω–∞–ª–∏–∑ {symbol}**\n\n{ai_response}",
                    parse_mode='Markdown'
                )
            else:
                self.logger.warning("AI response is empty, using fallback analysis")
                # Fallback: provide basic analysis based on available data
                fallback_analysis = self._create_fallback_analysis(analysis_data)
                self.logger.info(f"Fallback analysis created, length: {len(fallback_analysis)}")
                await update.message.reply_text(
                    f"üß† **–ê–Ω–∞–ª–∏–∑ {symbol}** (–±–∞–∑–æ–≤—ã–π)\n\n{fallback_analysis}",
                    parse_mode='Markdown'
                )
                await update.message.reply_text(
                    "‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∫–∞–∑–∞–Ω –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö."
                )
                
        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"Error in _get_ai_analysis_for_charts: {error_msg}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ AI –∞–Ω–∞–ª–∏–∑–∞: {error_msg}")
    
    def _create_chart_analysis_prompt(self, analysis_data: Dict) -> str:
        """Create a prompt for chart analysis"""
        symbol = analysis_data['symbol']
        period = analysis_data['period']
        charts_available = analysis_data['charts_available']
        price_data = analysis_data['price_data']
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞ {symbol} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏: {', '.join(charts_available)}

–î–∞–Ω–Ω—ã–µ –ø–æ —Ü–µ–Ω–∞–º:"""

        for chart_type, info in price_data.items():
            if chart_type == 'adj_close':
                prompt += f"\n\nüìà –î–Ω–µ–≤–Ω—ã–µ —Ü–µ–Ω—ã (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ):"
            elif chart_type == 'close_monthly':
                prompt += f"\n\nüìä –ú–µ—Å—è—á–Ω—ã–µ —Ü–µ–Ω—ã:"
            else:
                prompt += f"\n\nüìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω:"
            
            prompt += f"\n- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {info.get('current_price', 'N/A')}"
            prompt += f"\n- –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {info.get('start_price', 'N/A')}"
            prompt += f"\n- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {info.get('min_price', 'N/A')}"
            prompt += f"\n- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {info.get('max_price', 'N/A')}"
            prompt += f"\n- –ü–µ—Ä–∏–æ–¥: {info.get('start_date', 'N/A')} - {info.get('end_date', 'N/A')}"
            prompt += f"\n- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {info.get('data_points', 'N/A')}"
        
        prompt += f"""

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –î–ï–¢–ê–õ–¨–ù–´–ô –∏ –ü–û–î–†–û–ë–ù–´–ô –∞–Ω–∞–ª–∏–∑:

1. **–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ —Ü–µ–Ω** (–º–∏–Ω–∏–º—É–º 5-6 –∞–±–∑–∞—Ü–µ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ä–∞–∑–±–æ—Ä–æ–º –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞)
2. **–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã** (–ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏, –¥–∞—Ç–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏)
3. **–ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è** (—Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º)
4. **–û—Ü–µ–Ω–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏** (—Ç–µ–∫—É—â–∞—è, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è, –æ–∂–∏–¥–∞–µ–º–∞—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏)
5. **–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã** (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ):
   - –¢–µ–∫—É—â–∏–µ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è (–∏–Ω—Ñ–ª—è—Ü–∏—è, –í–í–ü, –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏)
   - –ú–æ–Ω–µ—Ç–∞—Ä–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –±–∞–Ω–∫–æ–≤ (–∫–ª—é—á–µ–≤—ã–µ —Å—Ç–∞–≤–∫–∏, QE/QT, –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–∫–∏)
   - –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¶–ë –†–§, –§–†–° –°–®–ê, –ï–¶–ë (—Å –¥–∞—Ç–∞–º–∏ –∏ –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏)
   - –ö–æ–Ω—Å–µ–Ω—Å—É—Å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ –ø–æ —Å–µ–∫—Ç–æ—Ä—É –∏ —ç–∫–æ–Ω–æ–º–∏–∫–µ (—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏)
   - –ì–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è (–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤)
   - –í–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫—Ç–∏–≤ (—Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏)
6. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤** (—Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤, —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤)

**–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:** 
- –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4-5 –∞–±–∑–∞—Ü–µ–≤ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
- –í–∫–ª—é—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, –¥–∞—Ç—ã, –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
- –î–æ–±–∞–≤—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
- –°–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π

–ê–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤. –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π —Ç–µ–∫—É—â—É—é –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø–æ–ª–∏—Ç–∏–∫—É —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –±–∞–Ω–∫–æ–≤."""

        return prompt
    
    def _get_yandexgpt_analysis(self, prompt: str) -> Optional[str]:
        """Get AI analysis from YandexGPT"""
        try:
            self.logger.info(f"Requesting YandexGPT analysis for prompt length: {len(prompt)}")
            
            # Use the existing YandexGPT service
            response = self.yandexgpt_service.ask_question(prompt)
            
            if response:
                self.logger.info(f"YandexGPT response received, length: {len(response)}")
                return response
            else:
                self.logger.warning("YandexGPT returned empty response")
                return None
                
        except Exception as e:
            self.logger.error(f"Error getting YandexGPT analysis: {e}")
            self.logger.exception("Full traceback:")
            return None

    def _create_fallback_analysis(self, analysis_data: Dict) -> str:
        """Create a basic fallback analysis if YandexGPT is not available"""
        symbol = analysis_data['symbol']
        period = analysis_data['period']
        charts_available = analysis_data['charts_available']
        price_data = analysis_data['price_data']

        fallback_text = f"üß† **–ê–Ω–∞–ª–∏–∑ {symbol}** (–±–∞–∑–æ–≤—ã–π)\n\n"
        fallback_text += f"**–ü–µ—Ä–∏–æ–¥:** {period}\n"
        fallback_text += f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏:** {', '.join(charts_available)}\n\n"

        if 'adj_close' in price_data:
            adj_info = price_data['adj_close']
            fallback_text += f"üìà **–î–Ω–µ–≤–Ω—ã–µ —Ü–µ–Ω—ã (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ):**\n"
            fallback_text += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {adj_info.get('current_price', 'N/A')}\n"
            fallback_text += f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {adj_info.get('start_price', 'N/A')}\n"
            fallback_text += f"–ú–∏–Ω/–ú–∞–∫—Å: {adj_info.get('min_price', 'N/A')} / {adj_info.get('max_price', 'N/A')}\n"
            fallback_text += f"–ü–µ—Ä–∏–æ–¥: {adj_info.get('start_date', 'N/A')} - {adj_info.get('end_date', 'N/A')}\n"
            fallback_text += f"–¢–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {adj_info.get('data_points', 'N/A')}\n"

        if 'close_monthly' in price_data:
            monthly_info = price_data['close_monthly']
            fallback_text += f"\nüìä **–ú–µ—Å—è—á–Ω—ã–µ —Ü–µ–Ω—ã:**\n"
            fallback_text += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {monthly_info.get('current_price', 'N/A')}\n"
            fallback_text += f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {monthly_info.get('start_price', 'N/A')}\n"
            fallback_text += f"–ú–∏–Ω/–ú–∞–∫—Å: {monthly_info.get('min_price', 'N/A')} / {monthly_info.get('max_price', 'N/A')}\n"
            fallback_text += f"–ü–µ—Ä–∏–æ–¥: {monthly_info.get('start_date', 'N/A')} - {monthly_info.get('end_date', 'N/A')}\n"
            fallback_text += f"–¢–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {monthly_info.get('data_points', 'N/A')}\n"

        if 'fallback' in price_data:
            fallback_info = price_data['fallback']
            fallback_text += f"\nüìä **–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω:**\n"
            fallback_text += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {fallback_info.get('current_price', 'N/A')}\n"
            fallback_text += f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {fallback_info.get('start_price', 'N/A')}\n"
            fallback_text += f"–ú–∏–Ω/–ú–∞–∫—Å: {fallback_info.get('min_price', 'N/A')} / {fallback_info.get('max_price', 'N/A')}\n"
            fallback_text += f"–ü–µ—Ä–∏–æ–¥: {fallback_info.get('start_date', 'N/A')} - {fallback_info.get('end_date', 'N/A')}\n"
            fallback_text += f"–¢–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {fallback_info.get('data_points', 'N/A')}\n"

        fallback_text += "\n‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∫–∞–∑–∞–Ω –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö."
        return fallback_text
    
    async def chart_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /chart command"""
        if not context.args:
            await self._send_message_safe(update, 
                "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏ –ø–µ—Ä–∏–æ–¥. –ü—Ä–∏–º–µ—Ä: /chart AAPL.US 5Y –∏–ª–∏ /chart SBER.MOEX 2Y")
            return
        
        symbol = context.args[0].upper()
        period = context.args[1] if len(context.args) > 1 else '10Y'
        
        await self._send_message_safe(update, f"üìà –ü–æ–ª—É—á–∞—é –≥—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω –¥–ª—è {symbol} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}...")
        
        try:
            price_history = self.asset_service.get_asset_price_history(symbol, period)
            
            if 'error' in price_history:
                await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞: {price_history['error']}")
                return
            
            # Send charts
            charts = price_history.get('charts', [])
            if charts:
                for i, img_bytes in enumerate(charts):
                    try:
                        await context.bot.send_photo(
                            chat_id=update.effective_chat.id, 
                            photo=io.BytesIO(img_bytes),
                            caption=f"üìà –ì—Ä–∞—Ñ–∏–∫ {i+1}: {symbol} ({period})"
                        )
                    except Exception as e:
                        error_msg = str(e)
                        logger.error(f"Error sending chart {i+1}: {error_msg}")
                        await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞ {i+1}: {error_msg}")
            else:
                await self._send_message_safe(update, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω")
                
        except Exception as e:
            error_msg = str(e)
            logger.error(f"Error getting charts: {error_msg}")
            await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {error_msg}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle incoming text messages using Okama Financial Brain"""
        user_message = update.message.text.strip()
        
        if not user_message:
            return
        
        # Show typing indicator
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Enhanced Okama Financial Brain –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞
            result = self.financial_brain.process_query(user_message)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            final_response = self.financial_brain.format_final_response(result)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            await self._send_long_text(update, final_response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            for img_bytes in result.charts:
                try:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id, 
                        photo=io.BytesIO(img_bytes),
                        caption="üìä –ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞"
                    )
                except Exception as e:
                    logger.error(f"Error sending chart: {e}")
                    
        except Exception as e:
            logger.exception(f"Error in Enhanced Financial Brain processing: {e}")
            
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            try:
                await self._handle_message_fallback(update, context, user_message)
            except Exception as fallback_error:
                logger.error(f"Fallback also failed: {fallback_error}")
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. "
                    "–ï—Å–ª–∏ –≤—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ MOEX (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER.MOEX), –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
                )

    async def _handle_message_fallback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_message: str):
        """Fallback –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)"""
        try:
            # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            parsed = self.intent_parser.parse(user_message)

            # Chat fallback
            if parsed.intent == 'chat':
                await self._handle_chat(update, user_message)
                return

            # Resolve assets as needed
            resolved = self.asset_resolver.resolve(parsed.raw_assets) if parsed.raw_assets else []
            valid_tickers = [r.ticker for r in resolved if r.valid]

            # Dispatch by intent
            report_text = None
            images = []
            ai_summary = None

            if parsed.intent == 'asset_single':
                if not valid_tickers:
                    await self._send_message_safe(update, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞–∫—Ç–∏–≤. –£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä AAPL.US, SBER.MOEX, GC.COMM")
                    return
                # Use new enhanced asset info with chart for single assets
                await self._get_asset_info_with_chart(update, valid_tickers[0], '10Y')
                return

            elif parsed.intent == 'asset_compare' or (parsed.intent == 'macro'):
                if len(valid_tickers) < 2:
                    # If only one valid, treat as single asset with chart
                    if len(valid_tickers) == 1:
                        await self._get_asset_info_with_chart(update, valid_tickers[0], '10Y')
                        return
                    else:
                        await self._send_message_safe(update, "–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –∞–∫—Ç–∏–≤–∞.")
                        return
                else:
                    result = self.okama_handler.get_multiple_assets(valid_tickers)
                    report_text, images = self.report_builder.build_multi_asset_report(result)
                    ai_summary = self.analysis_engine.summarize('asset_compare', {"metrics": result.get("metrics", {}), "correlation": result.get("correlation", {})}, user_message)

            elif parsed.intent == 'portfolio':
                if len(valid_tickers) < 2:
                    await self._send_message_safe(update, "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –∞–∫—Ç–∏–≤–∞.")
                    return
                result = self.okama_handler.get_portfolio(valid_tickers)
                report_text, images = self.report_builder.build_portfolio_report(result)
                ai_summary = self.analysis_engine.summarize('portfolio', {"metrics": result.get("metrics", {})}, user_message)

            elif parsed.intent == 'inflation_data':
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω—Ñ–ª—è—Ü–∏–∏
                country = getattr(parsed, 'country', 'US')
                period = getattr(parsed, 'period', '5Y')
                result = self.okama_handler.get_inflation(country=country, period=period)
                report_text, images = self.report_builder.build_inflation_report(result)
                ai_summary = self.analysis_engine.summarize('inflation', {}, user_message)

            else:
                # Fallback to AI chat if intent not recognized
                await self._handle_chat(update, user_message)
                return

            # Send text and AI summary
            final_text = report_text or ""
            if ai_summary:
                final_text = f"{final_text}\n\n–í—ã–≤–æ–¥—ã AI:\n{ai_summary}"
            await self._send_long_text(update, final_text)

            # Send images
            for img_bytes in images:
                try:
                    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=io.BytesIO(img_bytes))
                except Exception:
                    pass
                    
        except Exception as e:
            logger.exception(f"Error in fallback message handling: {e}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. "
                "–ï—Å–ª–∏ –≤—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ MOEX (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER.MOEX), –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
            )

    async def _send_long_text(self, update: Update, text: str, parse_mode: str = 'Markdown'):
        """Send long text by splitting it into multiple messages if needed"""
        # Base Telegram hard limit is 4096 chars for text messages.
        # We use configured limit if available and keep a safety margin
        # to account for continuation prefixes and potential formatting.
        try:
            max_length = getattr(Config, 'MAX_MESSAGE_LENGTH', 4096)
        except Exception:
            max_length = 4096
        safety_margin = 64
        per_part_limit = max_length - safety_margin
        if per_part_limit < 100:
            per_part_limit = max(100, max_length - 10)
        
        self.logger.info(f"_send_long_text called with text length: {len(text)}")
        
        if len(text) <= max_length:
            # Single message is fine
            self.logger.info(f"Text fits in single message, sending directly")
            try:
                await update.message.reply_text(text, parse_mode=parse_mode)
            except Exception as e:
                # Fallback if Markdown parsing fails
                self.logger.warning(f"Failed to send single message with parse_mode={parse_mode}: {e}. Retrying without parse mode.")
                await update.message.reply_text(text)
        else:
            # Split into multiple messages
            self.logger.info(f"Text too long, splitting into parts")
            parts = self._split_text_into_parts(text, per_part_limit)
            self.logger.info(f"Split into {len(parts)} parts with lengths: {[len(part) for part in parts]}")
            
            for i, part in enumerate(parts, 1):
                if i == 1:
                    # First part
                    self.logger.info(f"Sending part {i}/{len(parts)} (length: {len(part)})")
                    try:
                        await update.message.reply_text(part, parse_mode=parse_mode)
                    except Exception as e:
                        self.logger.warning(f"Failed to send part {i} with parse_mode={parse_mode}: {e}. Retrying without parse mode.")
                        await update.message.reply_text(part)
                else:
                    # Subsequent parts
                    continuation_prefix = f"üìÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ({i}/{len(parts)}):\n\n"
                    continuation_text = f"{continuation_prefix}{part}"
                    self.logger.info(f"Sending continuation part {i}/{len(parts)} (total length: {len(continuation_text)})")
                    # Ensure we never exceed the hard max length
                    if len(continuation_text) > max_length:
                        # Further split this part conservatively
                        sub_parts = self._split_text_into_parts(part, per_part_limit - len(continuation_prefix))
                        self.logger.info(f"Continuation part {i} too long after prefix, further split into {len(sub_parts)} sub-parts")
                        for j, sub in enumerate(sub_parts, 1):
                            sub_prefix = f"üìÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ({i}.{j}/{len(parts)}):\n\n"
                            sub_text = f"{sub_prefix}{sub}"
                            try:
                                await update.message.reply_text(sub_text, parse_mode=parse_mode)
                            except Exception as e:
                                self.logger.warning(f"Failed to send sub-part {i}.{j} with parse_mode={parse_mode}: {e}. Retrying without parse mode.")
                                await update.message.reply_text(sub_text)
                    else:
                        try:
                            await update.message.reply_text(continuation_text, parse_mode=parse_mode)
                        except Exception as e:
                            self.logger.warning(f"Failed to send continuation part {i} with parse_mode={parse_mode}: {e}. Retrying without parse mode.")
                            await update.message.reply_text(continuation_text)
    
    def _split_text_into_parts(self, text: str, max_length: int) -> List[str]:
        """Split text into parts that fit within max_length"""
        parts = []
        current_part = ""
        
        # Split by paragraphs first
        paragraphs = text.split('\n\n')
        
        for paragraph in paragraphs:
            # If adding this paragraph would exceed max_length
            if len(current_part) + len(paragraph) + 2 > max_length:
                if current_part:
                    parts.append(current_part.strip())
                    current_part = paragraph
                else:
                    # Single paragraph is too long, split by sentences
                    sentences = paragraph.split('. ')
                    for sentence in sentences:
                        if len(current_part) + len(sentence) + 2 > max_length:
                            if current_part:
                                parts.append(current_part.strip())
                                current_part = sentence
                            else:
                                # Single sentence is too long, split by words
                                words = sentence.split(' ')
                                for word in words:
                                    if len(current_part) + len(word) + 1 > max_length:
                                        if current_part:
                                            parts.append(current_part.strip())
                                            current_part = word
                                        else:
                                            # Single word is too long, truncate
                                            parts.append(word[:max_length-3] + "...")
                                    else:
                                        current_part += " " + word if current_part else word
                        else:
                            current_part += ". " + sentence if current_part else sentence
            else:
                current_part += "\n\n" + paragraph if current_part else paragraph
        
        # Add the last part
        if current_part.strip():
            parts.append(current_part.strip())
        
        return parts

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle button callbacks"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "analysis_help":
            await query.edit_message_text(
                "üß† **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑**\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:\n\n"
                "**–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞:**\n"
                "‚Ä¢ \"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π Apple\"\n"
                "‚Ä¢ \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Tesla\"\n"
                "‚Ä¢ \"–ü–æ–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ SBER.MOEX\"\n\n"
                "**–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**\n"
                "‚Ä¢ \"–ê–Ω–∞–ª–∏–∑ –∑–æ–ª–æ—Ç–∞\"\n"
                "‚Ä¢ \"–î–∏–Ω–∞–º–∏–∫–∞ –Ω–µ—Ñ—Ç–∏\"\n"
                "‚Ä¢ \"–¢—Ä–µ–Ω–¥—ã –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä\"\n\n"
                "**–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–ª—è—Ü–∏–∏:**\n"
                "‚Ä¢ \"–ò–Ω—Ñ–ª—è—Ü–∏—è –≤ –°–®–ê\"\n"
                "‚Ä¢ \"CPI –¥–∞–Ω–Ω—ã–µ –ø–æ –†–æ—Å—Å–∏–∏\"\n\n"
                "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
                "‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞—é –≤–∞—à–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è\n"
                "‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑—É—é –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤\n"
                "‚úÖ –°—Ç—Ä–æ—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã\n"
                "‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫–∏\n"
                "‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é AI-–≤—ã–≤–æ–¥—ã"
            )
        elif query.data == "portfolio_help":
            await query.edit_message_text(
                "üìä **–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è**\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:\n\n"
                "**–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:**\n"
                "‚Ä¢ \"–ü–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ VOO.US –∏ AGG.US\"\n"
                "‚Ä¢ \"–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è\"\n\n"
                "**–° –≤–µ—Å–∞–º–∏:**\n"
                "‚Ä¢ \"–ü–æ—Ä—Ç—Ñ–µ–ª—å 60% –∞–∫—Ü–∏–∏, 40% –æ–±–ª–∏–≥–∞—Ü–∏–∏\"\n"
                "‚Ä¢ \"–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –≤–µ—Å–∞–º–∏ 70% –∏ 30%\"\n\n"
                "**–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã:**\n"
                "‚Ä¢ \"–ê–Ω–∞–ª–∏–∑ –≤ —Ä—É–±–ª—è—Ö\"\n"
                "‚Ä¢ \"–ó–∞ –ø–µ—Ä–∏–æ–¥ 2020-2024\"\n\n"
                "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
                "‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –≤–µ—Å–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã)\n"
                "‚úÖ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞\n"
                "‚úÖ –°—Ç—Ä–æ—é efficient frontier\n"
                "‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            )
        elif query.data == "compare_help":
            await query.edit_message_text(
                """‚öñÔ∏è **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤**

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:

**–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ü–∏–π:**
‚Ä¢ "–°—Ä–∞–≤–Ω–∏ Apple –∏ Microsoft"
‚Ä¢ "–ß—Ç–æ –ª—É—á—à–µ: VOO.US –∏–ª–∏ SPY.US?"

**–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∞–∫—Ç–∏–≤–æ–≤:**
‚Ä¢ "–°–æ–ø–æ—Å—Ç–∞–≤—å –∑–æ–ª–æ—Ç–æ –∏ —Å–µ—Ä–µ–±—Ä–æ"
‚Ä¢ "–°—Ä–∞–≤–Ω–∏ S&P 500 –∏ NASDAQ"

**–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç:**
‚Ä¢ "EUR/USD vs GBP/USD"
‚Ä¢ "–ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"

–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
‚úÖ –°—Ä–∞–≤–Ω–∏–≤–∞—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
‚úÖ –°—Ç—Ä–æ—é —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é AI-–≤—ã–≤–æ–¥—ã"""
            )
        elif query.data == "chat_help":
            await query.edit_message_text(
                """üí¨ **AI-—Å–æ–≤–µ—Ç–Ω–∏–∫**

–°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ —á–µ–º —É–≥–æ–¥–Ω–æ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º:

**–¢–µ–æ—Ä–∏—è:**
‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è?"
‚Ä¢ "–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞?"
‚Ä¢ "–û–±—ä—è—Å–Ω–∏ efficient frontier"

**–ü—Ä–∞–∫—Ç–∏–∫–∞:**
‚Ä¢ "–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"
‚Ä¢ "–ö–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∏—Å–∫–∞–º–∏?"
‚Ä¢ "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

**–ê–Ω–∞–ª–∏–∑:**
‚Ä¢ "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π —ç—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏"
‚Ä¢ "–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?"

–Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞ –±–∞–∑–µ YandexGPT!"""
            )
    

    

    

    def run(self):
        """Run the bot"""
        # Create application
        application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
        
        # Add handlers
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("asset", self.asset_command))
        application.add_handler(CommandHandler("price", self.price_command))
        application.add_handler(CommandHandler("dividends", self.dividends_command))
        application.add_handler(CommandHandler("chart", self.chart_command))
        application.add_handler(CommandHandler("chat", self.chat_command))
        application.add_handler(CommandHandler("test", self.test_command))
        application.add_handler(CommandHandler("testai", self.testai_command))
        application.add_handler(CommandHandler("test_split", self.test_split_command))
        application.add_handler(CommandHandler("analyze", self.analyze_command))
        
        # Add message and callback handlers
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # Start the bot
        logger.info("Starting Okama Finance Bot...")
        application.run_polling()

if __name__ == "__main__":
    try:
        logger.info(f"Starting Okama Finance Bot with Python {sys.version}")
        logger.info(f"Python version info: {sys.version_info}")
        
        # Perform health check
        health_check()
        
        # Optional HTTP health server for platforms expecting an open PORT
        port_env = os.getenv('PORT')
        if port_env:
            try:
                bind_port = int(port_env)
                class HealthHandler(BaseHTTPRequestHandler):
                    def do_GET(self):
                        payload = {
                            "status": "ok",
                            "service": "okama-finance-bot",
                            "environment": "RENDER" if os.getenv('RENDER') else "LOCAL"
                        }
                        self.send_response(200)
                        self.send_header('Content-Type', 'application/json')
                        self.end_headers()
                        self.wfile.write(json.dumps(payload).encode('utf-8'))
                    def log_message(self, format, *args):
                        return
                def serve_health():
                    server = HTTPServer(('0.0.0.0', bind_port), HealthHandler)
                    logger.info(f"Health server listening on 0.0.0.0:{bind_port}")
                    server.serve_forever()
                threading.Thread(target=serve_health, daemon=True).start()
            except Exception as e:
                logger.warning(f"Failed to start health server on PORT={port_env}: {e}")
        
        if sys.version_info >= (3, 13):
            logger.info("‚úÖ Running on Python 3.13+ with latest python-telegram-bot")
        elif sys.version_info >= (3, 12):
            logger.info("‚úÖ Running on Python 3.12+ with latest python-telegram-bot")
        
        logger.info("üöÄ Initializing bot services...")
        bot = OkamaFinanceBot()
        logger.info("‚úÖ Bot services initialized successfully")
        logger.info("ü§ñ Starting Telegram bot...")
        bot.run()
    except Exception as e:
        logger.error(f"‚ùå Fatal error starting bot: {e}")
        logger.error(f"Python version: {sys.version}")
        logger.error(f"Python executable: {sys.executable}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
