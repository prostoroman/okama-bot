import sys
import logging
import os
import json
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import io
from typing import Dict, List, Optional, Any
from datetime import datetime

# Check Python version compatibility
if sys.version_info < (3, 7):
    print("ERROR: Python 3.7+ required. Current version:", sys.version)
    raise RuntimeError("Python 3.7+ required")

from config import Config
from services.asset_service import AssetService
from yandexgpt_service import YandexGPTService
from services.intent_parser_enhanced import EnhancedIntentParser
from services.asset_resolver_enhanced import EnhancedAssetResolver
from services.okama_handler_enhanced import EnhancedOkamaHandler
from services.report_builder_enhanced import EnhancedReportBuilder
from services.analysis_engine_enhanced import EnhancedAnalysisEngine
from services.financial_brain_enhanced import EnhancedOkamaFinancialBrain

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Health check for deployment
def health_check():
    """Simple health check for deployment"""
    logger.info("‚úÖ Health check: Okama Finance Bot is running")
    logger.info(f"‚úÖ Environment: {'PRODUCTION' if os.getenv('PRODUCTION') else 'LOCAL'}")
    logger.info(f"‚úÖ Python version: {sys.version}")
    logger.info(f"‚úÖ Bot token configured: {'Yes' if Config.TELEGRAM_BOT_TOKEN else 'No'}")
    return True

class OkamaFinanceBot:
    """Simple Telegram bot class for financial analysis with Okama library"""
    
    def __init__(self):
        """Initialize the bot with required services"""
        Config.validate()
        
        # Initialize logger
        self.logger = logging.getLogger(__name__)
        
        self.asset_service = AssetService()
        self.yandexgpt_service = YandexGPTService()
        self.intent_parser = EnhancedIntentParser()
        self.asset_resolver = EnhancedAssetResolver()
        self.okama_handler = EnhancedOkamaHandler()
        self.report_builder = EnhancedReportBuilder()
        self.analysis_engine = EnhancedAnalysisEngine()
        self.financial_brain = EnhancedOkamaFinancialBrain()
        
        # User session storage
        self.user_sessions = {}
        
        # User history management
        self.user_history: Dict[int, List[dict]] = {}       # chat_id -> list[{"role": "...", "parts": [str]}]
        self.context_enabled: Dict[int, bool] = {}          # chat_id -> bool
        self.MAX_HISTORY_MESSAGES = 20
        self.MAX_TELEGRAM_CHUNK = 4000
        
    def _get_user_context(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {
                'last_assets': [],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã
                'last_analysis_type': None,  # –¢–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                'last_period': None,  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
                'conversation_history': [],  # –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
                'preferences': {}  # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }
        return self.user_sessions[user_id]
    
    def _update_user_context(self, user_id: int, **kwargs):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        context = self._get_user_context(user_id)
        context.update(kwargs)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        if 'conversation_history' in context and len(context['conversation_history']) > 10:
            context['conversation_history'] = context['conversation_history'][-10:]
    
    def _add_to_conversation_history(self, user_id: int, message: str, response: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        context = self._get_user_context(user_id)
        context['conversation_history'].append({
            'timestamp': datetime.now().isoformat(),
            'message': message,
            'response': response[:200]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
        })
    
    def _get_context_summary(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        context = self._get_user_context(user_id)
        summary = []
        
        if context['last_assets']:
            summary.append(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤—ã: {', '.join(context['last_assets'][-3:])}")
        
        if context['last_period']:
            summary.append(f"–ü–µ—Ä–∏–æ–¥: {context['last_period']}")
        
        return "; ".join(summary) if summary else "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # =======================
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    # =======================
    def _init_chat(self, chat_id: int):
        if chat_id not in self.user_history:
            self.user_history[chat_id] = []
        if chat_id not in self.context_enabled:
            self.context_enabled[chat_id] = True

    def _history_trim(self, chat_id: int):
        if len(self.user_history[chat_id]) > self.MAX_HISTORY_MESSAGES:
            self.user_history[chat_id] = self.user_history[chat_id][-self.MAX_HISTORY_MESSAGES:]

    def history_append(self, chat_id: int, role: str, text: str):
        if not self.context_enabled.get(chat_id, True):
            return
        self.user_history[chat_id].append({"role": role, "parts": [text]})
        self._history_trim(chat_id)

    def _split_text(self, text: str):
        for i in range(0, len(text), self.MAX_TELEGRAM_CHUNK):
            yield text[i:i + self.MAX_TELEGRAM_CHUNK]

    async def send_long_message(self, update: Update, text: str):
        if not text:
            text = "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
        for chunk in self._split_text(text):
            await update.message.reply_text(chunk)
    
    async def _send_message_safe(self, update: Update, text: str, parse_mode: str = None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ text –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
            if not isinstance(text, str):
                self.logger.warning(f"_send_message_safe received non-string data: {type(text)}")
                text = str(text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
            if len(text) <= 4000:
                await update.message.reply_text(text, parse_mode=parse_mode)
            else:
                await self.send_long_message(update, text)
        except Exception as e:
            self.logger.error(f"Error in _send_message_safe: {e}")
            # Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            try:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(text)[:1000]}...")
            except:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command with full help"""
        user = update.effective_user
        # Escape user input to prevent Markdown parsing issues
        user_name = user.first_name or "User"
        # Remove any special characters that could break Markdown
        user_name = user_name.replace("*", "").replace("_", "").replace("`", "").replace("[", "").replace("]", "")
        
        welcome_message = f"""üß† Okama Financial Brain - –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –ø–æ–º–æ–≥—É —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–æ–≤ –∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π.

–ß—Ç–æ —É–º–µ—é:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —Ü–µ–Ω
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫—Ç–∏–≤–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–≤–µ—Å–∞, —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, efficient frontier)
‚Ä¢ –ú–∞–∫—Ä–æ/—Ç–æ–≤–∞—Ä—ã/–≤–∞–ª—é—Ç—ã
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–ª—è—Ü–∏–∏
‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ **üÜï AI-–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫–æ–≤** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/asset [—Ç–∏–∫–µ—Ä] [–ø–µ—Ä–∏–æ–¥] ‚Äî –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–∏–∫–µ—Ä–æ–≤:
‚Ä¢ US –∞–∫—Ü–∏–∏: AAPL.US, VOO.US, SPY.US, QQQ.US
‚Ä¢ MOEX: SBER.MOEX, GAZP.MOEX, LKOH.MOEX
‚Ä¢ –ò–Ω–¥–µ–∫—Å—ã: SPX.INDX, IXIC.INDX, RGBITR.INDX
‚Ä¢ –¢–æ–≤–∞—Ä—ã: GC.COMM (–∑–æ–ª–æ—Ç–æ), CL.COMM (–Ω–µ—Ñ—Ç—å), SI.COMM (—Å–µ—Ä–µ–±—Ä–æ)
‚Ä¢ –í–∞–ª—é—Ç—ã: EURUSD.FX, GBPUSD.FX, USDJPY.FX
‚Ä¢ LSE: VOD.LSE, HSBA.LSE, BP.LSE

–ü–µ—Ä–∏–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞:
‚Ä¢ 1Y, 2Y, 5Y, 10Y, MAX
‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10Y –¥–ª—è –∞–∫—Ü–∏–π, 5Y –¥–ª—è –º–∞–∫—Ä–æ

–ö–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è (–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º):
‚Ä¢ "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π Apple"
‚Ä¢ "–°—Ä–∞–≤–Ω–∏ –∑–æ–ª–æ—Ç–æ –∏ –Ω–µ—Ñ—Ç—å"
‚Ä¢ "–ü–æ—Ä—Ç—Ñ–µ–ª—å VOO.US 60% –∏ AGG.US 40%"
‚Ä¢ "–ò–Ω—Ñ–ª—è—Ü–∏—è –≤ –°–®–ê –∑–∞ 5 –ª–µ—Ç"
‚Ä¢ "–°—Ä–∞–≤–Ω–∏ S&P 500 –∏ NASDAQ –≤ —Ä—É–±–ª—è—Ö"

–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
‚Ä¢ "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π SBER.MOEX –∑–∞ 2 –≥–æ–¥–∞"
‚Ä¢ "–°—Ä–∞–≤–Ω–∏ VOO.US –∏ QQQ.US"
‚Ä¢ "–ü–æ—Ä—Ç—Ñ–µ–ª—å: 70% VOO.US, 20% AGG.US, 10% GC.COMM"
‚Ä¢ "–ò–Ω—Ñ–ª—è—Ü–∏—è –≤ –†–æ—Å—Å–∏–∏ –∑–∞ 10 –ª–µ—Ç"
‚Ä¢ "–î–∏–Ω–∞–º–∏–∫–∞ –Ω–µ—Ñ—Ç–∏ –∏ –∑–æ–ª–æ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö"

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∞–∫—Ç–∏–≤–æ–≤
‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
‚úÖ –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
‚úÖ **üÜï AI-–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫–æ–≤** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!

–ü–æ–¥–¥–µ—Ä–∂–∫–∞:
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:
1. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (MOEX –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)

–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ!"""

        await self._send_message_safe(update, welcome_message)
    

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command with detailed help"""
        await self._send_message_safe(update, 
            """üìö **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**

**üìä –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–æ–≤:**
‚Ä¢ `/asset <—Ç–∏–∫–µ—Ä>` - –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–µ + AI-–∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤

**ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫:**
‚Ä¢ **üÜï –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞** - AI-–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!

**üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤

**üìà –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–∏:**
‚Ä¢ MOEX (–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞)
‚Ä¢ US (NYSE, NASDAQ)
‚Ä¢ LSE (–õ–æ–Ω–¥–æ–Ω—Å–∫–∞—è –±–∏—Ä–∂–∞)
‚Ä¢ FX (–í–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫)
‚Ä¢ COMM (–¢–æ–≤–∞—Ä–Ω—ã–µ —Ä—ã–Ω–∫–∏)

**üí° –ü—Ä–∏–º–µ—Ä—ã —Ç–∏–∫–µ—Ä–æ–≤:**
‚Ä¢ `SBER.MOEX` - –°–±–µ—Ä–±–∞–Ω–∫
‚Ä¢ `AAPL.US` - Apple
‚Ä¢ `TSLA.US` - Tesla
‚Ä¢ `XAU.COMM` - –ó–æ–ª–æ—Ç–æ
‚Ä¢ `EURUSD.FX` - EUR/USD

**üÜï –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ **Vision AI** - –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é YandexGPT
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–∏—Å–∫–æ–≤

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ª—é–±–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ AI-–∞–Ω–∞–ª–∏–∑–∞!"""
        )


    async def asset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /asset command"""
        if not context.args:
            await self._send_message_safe(update, 
                "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞. –ü—Ä–∏–º–µ—Ä: /asset AAPL.US –∏–ª–∏ /asset SBER.MOEX")
            return
        
        symbol = context.args[0].upper()
        period = context.args[1] if len(context.args) > 1 else '10Y'
        
        # Update user context
        user_id = update.effective_user.id
        self._update_user_context(user_id, 
                                last_assets=[symbol] + self._get_user_context(user_id).get('last_assets', []),
                                last_period=period)
        
        await self._send_message_safe(update, f"üìä –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–µ {symbol}...")
        
        try:
            asset_info = self.asset_service.get_asset_info(symbol)
            
            if 'error' in asset_info:
                await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞: {asset_info['error']}")
                return
            
            # Format asset info
            response = f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–µ: {symbol}\n\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {asset_info.get('name', 'N/A')}\n"
            response += f"–°—Ç—Ä–∞–Ω–∞: {asset_info.get('country', 'N/A')}\n"
            response += f"–ë–∏—Ä–∂–∞: {asset_info.get('exchange', 'N/A')}\n"
            response += f"–í–∞–ª—é—Ç–∞: {asset_info.get('currency', 'N/A')}\n"
            response += f"–¢–∏–ø: {asset_info.get('type', 'N/A')}\n"
            response += f"ISIN: {asset_info.get('isin', 'N/A')}\n"
            response += f"–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {asset_info.get('period_length', 'N/A')}\n"
            
            if asset_info.get('current_price') is not None:
                response += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {asset_info['current_price']:.2f} {asset_info.get('currency', 'N/A')}\n"
            
            if asset_info.get('annual_return') != 'N/A':
                response += f"–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {asset_info['annual_return']}\n"
            
            if asset_info.get('total_return') != 'N/A':
                response += f"–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {asset_info['total_return']}\n"
            
            if asset_info.get('volatility') != 'N/A':
                response += f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {asset_info['volatility']}\n"
            
            await self._send_message_safe(update, response)
            
            # Check if asset type suggests dividends and add dividend information
            asset_type = asset_info.get('type', '').lower()
            if any(keyword in asset_type for keyword in ['stock', '–∞–∫—Ü–∏—è', 'share', 'equity']):
                await self._send_message_safe(update, "üíµ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö...")
                
                try:
                    dividend_info = self.asset_service.get_asset_dividends(symbol)
                    
                    if 'error' not in dividend_info and dividend_info.get('dividends'):
                        dividends = dividend_info['dividends']
                        currency = dividend_info.get('currency', '')
                        
                        if dividends:
                            # Get current price for yield calculation
                            current_price = asset_info.get('current_price')
                            
                            dividend_response = f"üíµ –î–∏–≤–∏–¥–µ–Ω–¥—ã {symbol}\n\n"
                            dividend_response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–ª–∞—Ç: {len(dividends)}\n\n"
                            
                            # Show last 5 dividends with yield calculation
                            sorted_dividends = sorted(dividends.items(), key=lambda x: x[0], reverse=True)[:10]
                            
                            for date, amount in sorted_dividends:
                                dividend_response += f"{date}: {amount:.2f} {currency}\n"
                                
                            
                            await self._send_message_safe(update, dividend_response)
                        else:
                            await self._send_message_safe(update, "üíµ –î–∏–≤–∏–¥–µ–Ω–¥—ã –Ω–µ –≤—ã–ø–ª–∞—á–∏–≤–∞–ª–∏—Å—å –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                    else:
                        await self._send_message_safe(update, "üíµ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        
                except Exception as div_error:
                    self.logger.error(f"Error getting dividends for {symbol}: {div_error}")
                    await self._send_message_safe(update, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤: {str(div_error)}")
            
            # Get and send charts
            await self._send_message_safe(update, "üìà –ü–æ–ª—É—á–∞—é –≥—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω...")
            
            try:
                self.logger.info(f"Getting price history for {symbol} with period {period}")
                price_history = self.asset_service.get_asset_price_history(symbol, period)
                
                if 'error' in price_history:
                    self.logger.error(f"Error in price_history: {price_history['error']}")
                    await self._send_message_safe(update, f"‚ö†Ô∏è {price_history['error']}")
                else:
                    self.logger.info(f"Price history received successfully, charts count: {len(price_history.get('charts', []))}")
                    # Send charts
                    charts = price_history.get('charts', [])
                    if charts:
                        self.logger.info(f"Found {len(charts)} charts, sending them...")
                        for i, img_bytes in enumerate(charts):
                            try:
                                # Determine chart type based on index
                                if i == 0:
                                    chart_caption = f"üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ 1Y: {symbol}"
                                elif i == 1:
                                    chart_caption = f"üìä –ú–µ—Å—è—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ 10Y: {symbol}"
                                else:
                                    chart_caption = f"üìà –ì—Ä–∞—Ñ–∏–∫ {i+1}: {symbol}"
                                
                                await context.bot.send_photo(
                                    chat_id=update.effective_chat.id, 
                                    photo=io.BytesIO(img_bytes),
                                    caption=chart_caption
                                )
                            except Exception as chart_error:
                                self.logger.error(f"Error sending chart {i+1}: {chart_error}")
                                await self._send_message_safe(update, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ {i+1}: {str(chart_error)}")
                    else:
                        await self._send_message_safe(update, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω")
                        
            except Exception as chart_error:
                self.logger.error(f"Error getting charts for {symbol}: {chart_error}")
                await self._send_message_safe(update, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {str(chart_error)}")
            
            # Get AI analysis of charts
            if 'charts' in locals() and charts and len(charts) > 0:
                await self._send_message_safe(update, "üß† –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ü–µ–Ω...")
                
                try:
                    # Create prompt for chart analysis
                    chart_analysis_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –¥–ª—è {symbol} ({asset_info.get('name', 'N/A')}).

–ó–∞–¥–∞—á–∞: –û–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–æ, —á—Ç–æ –≤–∏–¥–∏—à—å –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ:
1. –¢—Ä–µ–Ω–¥ (–≤–æ—Å—Ö–æ–¥—è—â–∏–π/–Ω–∏—Å—Ö–æ–¥—è—â–∏–π/–±–æ–∫–æ–≤–æ–π)
2. –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
3. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è)

–ê–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""

                    # Analyze each chart individually with vision
                    all_analyses = []
                    for i, img_bytes in enumerate(charts):
                        try:
                            # Determine chart type for description
                            if i == 0:
                                chart_desc = f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∑–∞ 1 –≥–æ–¥ –¥–ª—è {symbol}"
                            elif i == 1:
                                chart_desc = f"–ú–µ—Å—è—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∑–∞ 10 –ª–µ—Ç –¥–ª—è {symbol}"
                            else:
                                chart_desc = f"–ì—Ä–∞—Ñ–∏–∫ {i+1} –¥–ª—è {symbol}"
                            
                            # Analyze chart with vision
                            chart_ai_response = self.yandexgpt_service.ask_question_with_vision(
                                chart_analysis_prompt, 
                                img_bytes, 
                                chart_desc
                            )
                            
                            if chart_ai_response and not chart_ai_response.startswith("–û—à–∏–±–∫–∞") and not chart_ai_response.startswith("–ù–µ —É–¥–∞–ª–æ—Å—å"):
                                all_analyses.append(f"üìä {chart_desc}:\n{chart_ai_response}")
                            else:
                                # Fallback: try regular analysis with chart description
                                self.logger.info(f"Vision API failed for chart {i+1}, trying fallback analysis")
                                try:
                                    fallback_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π {chart_desc} –¥–ª—è {symbol} ({asset_info.get('name', 'N/A')}).

–ó–∞–¥–∞—á–∞: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:
1. –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏
2. –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥ –Ω–∞ —Ä—ã–Ω–∫–µ
3. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ü–µ–Ω—ã

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""

                                    fallback_response = self.yandexgpt_service.ask_question(fallback_prompt)
                                    if fallback_response:
                                        all_analyses.append(f"üìä {chart_desc}:\n{fallback_response}")
                                    else:
                                        all_analyses.append(f"üìä {chart_desc}:\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")
                                except Exception as fallback_error:
                                    self.logger.error(f"Fallback analysis also failed for chart {i+1}: {fallback_error}")
                                    all_analyses.append(f"üìä {chart_desc}:\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")
                                
                        except Exception as chart_error:
                            self.logger.error(f"Error analyzing chart {i+1}: {chart_error}")
                            all_analyses.append(f"üìä –ì—Ä–∞—Ñ–∏–∫ {i+1}:\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(chart_error)}")
                    
                    # Combine all analyses
                    if all_analyses:
                        combined_analysis = "\n\n".join(all_analyses)
                        self.logger.info(f"Combined chart analysis length: {len(combined_analysis)}")
                        
                        # Split response if it's too long
                        if len(combined_analysis) > 4000:
                            self.logger.info(f"Combined analysis is long ({len(combined_analysis)} chars), using send_long_message")
                            await self._send_message_safe(update, "üß† AI-–∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤:")
                            await self.send_long_message(update, combined_analysis)
                        else:
                            self.logger.info(f"Combined analysis is short ({len(combined_analysis)} chars), sending directly")
                            await self._send_message_safe(update, f"üß† AI-–∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤:\n\n{combined_analysis}")
                    else:
                        self.logger.warning("No chart analyses received")
                        await self._send_message_safe(update, "‚ö†Ô∏è AI-–∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        
                except Exception as chart_ai_error:
                    self.logger.error(f"Error getting chart analysis for {symbol}: {chart_ai_error}")
                    await self._send_message_safe(update, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ AI-–∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {str(chart_ai_error)}")
                
        except Exception as e:
            self.logger.error(f"Error in asset_command for {symbol}: {e}")
            await self._send_message_safe(update, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–∫—Ç–∏–≤–∞ {symbol}: {str(e)}")
                

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle incoming text messages using Okama Financial Brain"""
        user_message = update.message.text.strip()
        
        if not user_message:
            return
        
        # Show typing indicator
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Enhanced Okama Financial Brain –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞
            result = self.financial_brain.process_query(user_message)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            final_response = self.financial_brain.format_final_response(result)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            await self.send_long_message(update, final_response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            for img_bytes in result.charts:
                try:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id, 
                        photo=io.BytesIO(img_bytes),
                        caption="üìä –ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞"
                    )
                except Exception as e:
                    logger.error(f"Error sending chart: {e}")
                    
        except Exception as e:
            logger.exception(f"Error in Enhanced Financial Brain processing: {e}")
            
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            try:
                await self._handle_message_fallback(update, context, user_message)
            except Exception as fallback_error:
                logger.error(f"Fallback also failed: {fallback_error}")
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. "
                    "–ï—Å–ª–∏ –≤—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ MOEX (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER.MOEX), –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
                )

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle incoming photo messages for chart analysis"""
        try:
            # Get the largest photo size
            photo = update.message.photo[-1]
            
            # Show typing indicator
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            # Download the photo
            file = await context.bot.get_file(photo.file_id)
            photo_bytes = await file.download_as_bytearray()
            
            # Create analysis prompt
            analysis_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫.

–ó–∞–¥–∞—á–∞: –û–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ:
1. –¢—Ä–µ–Ω–¥ (–≤–æ—Å—Ö–æ–¥—è—â–∏–π/–Ω–∏—Å—Ö–æ–¥—è—â–∏–π/–±–æ–∫–æ–≤–æ–π)
2. –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
3. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
            
            # Analyze the photo with vision
            await self._send_message_safe(update, "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")
            
            ai_response = self.yandexgpt_service.ask_question_with_vision(
                analysis_prompt,
                bytes(photo_bytes),
                "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            )
            
            if ai_response and not ai_response.startswith("–û—à–∏–±–∫–∞") and not ai_response.startswith("–ù–µ —É–¥–∞–ª–æ—Å—å"):
                await self._send_message_safe(update, "üß† –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤:")
                await self.send_long_message(update, ai_response)
            else:
                # Fallback: try regular analysis with photo description
                self.logger.info("Vision API failed, trying fallback analysis")
                try:
                    fallback_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫.

–ó–∞–¥–∞—á–∞: –û–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ:
1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
2. –¢–∏–ø–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
3. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ü–µ–Ω—ã

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
                    
                    fallback_response = self.yandexgpt_service.ask_question(fallback_prompt)
                    if fallback_response:
                        await self._send_message_safe(update, "üß† –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏:")
                        await self.send_long_message(update, fallback_response)
                    else:
                        await self._send_message_safe(update, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                except Exception as fallback_error:
                    self.logger.error(f"Fallback analysis also failed: {fallback_error}")
                    await self._send_message_safe(update, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                
        except Exception as e:
            self.logger.error(f"Error handling photo: {e}")
            await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

    async def _handle_message_fallback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_message: str):
        """Fallback –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)"""
        try:
            # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            parsed = self.intent_parser.parse(user_message)

            # Chat fallback
            if parsed.intent == 'chat':
                # Simple AI response using YandexGPT
                try:
                    ai_response = self.yandexgpt_service.ask_question(user_message)
                    if ai_response:
                        await self.send_long_message(update, f"ü§ñ AI-–æ—Ç–≤–µ—Ç:\n\n{ai_response}")
                    else:
                        await self._send_message_safe(update, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-–æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
                except Exception as e:
                    self.logger.error(f"Error in AI chat: {e}")
                    await self._send_message_safe(update, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI-–∑–∞–ø—Ä–æ—Å–∞.")
                return

            # Resolve assets as needed
            resolved = self.asset_resolver.resolve(parsed.raw_assets) if parsed.raw_assets else []
            valid_tickers = [r.ticker for r in resolved if r.valid]

            # Dispatch by intent
            report_text = None
            images = []
            ai_summary = None

            if parsed.intent == 'asset_single':
                if not valid_tickers:
                    await self._send_message_safe(update, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞–∫—Ç–∏–≤. –£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä AAPL.US, SBER.MOEX, GC.COMM")
                    return
                # Use existing asset command logic for single assets
                await self.asset_command(update, context)
                return

            elif parsed.intent == 'asset_compare' or (parsed.intent == 'macro'):
                if len(valid_tickers) < 2:
                    # If only one valid, treat as single asset with chart
                    if len(valid_tickers) == 1:
                        await self.asset_command(update, context)
                        return
                    else:
                        await self._send_message_safe(update, "–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –∞–∫—Ç–∏–≤–∞.")
                        return
                else:
                    result = self.okama_handler.get_multiple_assets(valid_tickers)
                    report_text, images = self.report_builder.build_multi_asset_report(result)
                    ai_summary = self.analysis_engine.summarize('asset_compare', {"metrics": result.get("metrics", {}), "correlation": result.get("correlation", {})}, user_message)

            elif parsed.intent == 'portfolio':
                if len(valid_tickers) < 2:
                    await self._send_message_safe(update, "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –∞–∫—Ç–∏–≤–∞.")
                    return
                result = self.okama_handler.get_portfolio(valid_tickers)
                report_text, images = self.report_builder.build_portfolio_report(result)
                ai_summary = self.analysis_engine.summarize('portfolio', {"metrics": result.get("metrics", {})}, user_message)

            elif parsed.intent == 'inflation_data':
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω—Ñ–ª—è—Ü–∏–∏
                country = getattr(parsed, 'country', 'US')
                period = getattr(parsed, 'period', '5Y')
                result = self.okama_handler.get_inflation(country=country, period=period)
                report_text, images = self.report_builder.build_inflation_report(result)
                ai_summary = self.analysis_engine.summarize('inflation', {}, user_message)

            else:
                # Fallback to AI chat if intent not recognized
                try:
                    ai_response = self.yandexgpt_service.ask_question(user_message)
                    if ai_response:
                        await self.send_long_message(update, f"ü§ñ AI-–æ—Ç–≤–µ—Ç:\n\n{ai_response}")
                    else:
                        await self._send_message_safe(update, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-–æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
                except Exception as e:
                    self.logger.error(f"Error in AI chat: {e}")
                    await self._send_message_safe(update, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI-–∑–∞–ø—Ä–æ—Å–∞.")
                return

            # Send text and AI summary
            final_text = report_text or ""
            if ai_summary:
                final_text = f"{final_text}\n\n–í—ã–≤–æ–¥—ã:\n{ai_summary}"
            await self.send_long_message(update, final_text)

            # Send images
            for img_bytes in images:
                try:
                    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=io.BytesIO(img_bytes))
                except Exception:
                    pass
                    
        except Exception as e:
            logger.exception(f"Error in fallback message handling: {e}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. "
                "–ï—Å–ª–∏ –≤—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ MOEX (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER.MOEX), –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
            )



    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle button callbacks"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "analysis_help":
            await query.edit_message_text(
                "üß† **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑**\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:\n\n"
                "**–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞:**\n"
                "‚Ä¢ \"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π Apple\"\n"
                "‚Ä¢ \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Tesla\"\n"
                "‚Ä¢ \"–ü–æ–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ SBER.MOEX\"\n\n"
                "**–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**\n"
                "‚Ä¢ \"–ê–Ω–∞–ª–∏–∑ –∑–æ–ª–æ—Ç–∞\"\n"
                "‚Ä¢ \"–î–∏–Ω–∞–º–∏–∫–∞ –Ω–µ—Ñ—Ç–∏\"\n"
                "‚Ä¢ \"–¢—Ä–µ–Ω–¥—ã –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä\"\n\n"
                "**–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–ª—è—Ü–∏–∏:**\n"
                "‚Ä¢ \"–ò–Ω—Ñ–ª—è—Ü–∏—è –≤ –°–®–ê\"\n"
                "‚Ä¢ \"CPI –¥–∞–Ω–Ω—ã–µ –ø–æ –†–æ—Å—Å–∏–∏\"\n\n"
                "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
                "‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞—é –≤–∞—à–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è\n"
                "‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑—É—é –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤\n"
                "‚úÖ –°—Ç—Ä–æ—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã\n"
                "‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫–∏\n"
                "‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é AI-–≤—ã–≤–æ–¥—ã"
            )
        elif query.data == "portfolio_help":
            await query.edit_message_text(
                "üìä **–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è**\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:\n\n"
                "**–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:**\n"
                "‚Ä¢ \"–ü–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ VOO.US –∏ AGG.US\"\n"
                "‚Ä¢ \"–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è\"\n\n"
                "**–° –≤–µ—Å–∞–º–∏:**\n"
                "‚Ä¢ \"–ü–æ—Ä—Ç—Ñ–µ–ª—å 60% –∞–∫—Ü–∏–∏, 40% –æ–±–ª–∏–≥–∞—Ü–∏–∏\"\n"
                "‚Ä¢ \"–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –≤–µ—Å–∞–º–∏ 70% –∏ 30%\"\n\n"
                "**–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã:**\n"
                "‚Ä¢ \"–ê–Ω–∞–ª–∏–∑ –≤ —Ä—É–±–ª—è—Ö\"\n"
                "‚Ä¢ \"–ó–∞ –ø–µ—Ä–∏–æ–¥ 2020-2024\"\n\n"
                "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
                "‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –≤–µ—Å–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã)\n"
                "‚úÖ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞\n"
                "‚úÖ –°—Ç—Ä–æ—é efficient frontier\n"
                "‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            )
        elif query.data == "compare_help":
            await query.edit_message_text(
                """‚öñÔ∏è **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤**

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:

**–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ü–∏–π:**
‚Ä¢ "–°—Ä–∞–≤–Ω–∏ Apple –∏ Microsoft"
‚Ä¢ "–ß—Ç–æ –ª—É—á—à–µ: VOO.US –∏–ª–∏ SPY.US?"

**–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∞–∫—Ç–∏–≤–æ–≤:**
‚Ä¢ "–°–æ–ø–æ—Å—Ç–∞–≤—å –∑–æ–ª–æ—Ç–æ –∏ —Å–µ—Ä–µ–±—Ä–æ"
‚Ä¢ "–°—Ä–∞–≤–Ω–∏ S&P 500 –∏ NASDAQ"

**–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç:**
‚Ä¢ "EUR/USD vs GBP/USD"
‚Ä¢ "–ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"

–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
‚úÖ –°—Ä–∞–≤–Ω–∏–≤–∞—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
‚úÖ –°—Ç—Ä–æ—é —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é AI-–≤—ã–≤–æ–¥—ã"""
            )
        elif query.data == "chat_help":
            await query.edit_message_text(
                """üí¨ **AI-—Å–æ–≤–µ—Ç–Ω–∏–∫**

–°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ —á–µ–º —É–≥–æ–¥–Ω–æ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º:

**–¢–µ–æ—Ä–∏—è:**
‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è?"
‚Ä¢ "–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞?"
‚Ä¢ "–û–±—ä—è—Å–Ω–∏ efficient frontier"

**–ü—Ä–∞–∫—Ç–∏–∫–∞:**
‚Ä¢ "–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"
‚Ä¢ "–ö–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∏—Å–∫–∞–º–∏?"
‚Ä¢ "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

**–ê–Ω–∞–ª–∏–∑:**
‚Ä¢ "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π —ç—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏"
‚Ä¢ "–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?"

–Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞ –±–∞–∑–µ YandexGPT!"""
            )
    

    

    

    def run(self):
        """Run the bot"""
        # Create application
        application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
        
        # Add handlers
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("asset", self.asset_command))
        
        # Add message and callback handlers
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # Start the bot
        logger.info("Starting Okama Finance Bot...")
        application.run_polling()

if __name__ == "__main__":
    try:
        logger.info(f"Starting Okama Finance Bot with Python {sys.version}")
        logger.info(f"Python version info: {sys.version_info}")
        
        # Perform health check
        health_check()
        
        # Optional HTTP health server for platforms expecting an open PORT
        port_env = os.getenv('PORT')
        if port_env:
            try:
                bind_port = int(port_env)
                class HealthHandler(BaseHTTPRequestHandler):
                    def do_GET(self):
                        payload = {
                            "status": "ok",
                            "service": "okama-finance-bot",
                            "environment": "RENDER" if os.getenv('RENDER') else "LOCAL"
                        }
                        self.send_response(200)
                        self.send_header('Content-Type', 'application/json')
                        self.end_headers()
                        self.wfile.write(json.dumps(payload).encode('utf-8'))
                    def log_message(self, format, *args):
                        return
                def serve_health():
                    server = HTTPServer(('0.0.0.0', bind_port), HealthHandler)
                    logger.info(f"Health server listening on 0.0.0.0:{bind_port}")
                    server.serve_forever()
                threading.Thread(target=serve_health, daemon=True).start()
            except Exception as e:
                logger.warning(f"Failed to start health server on PORT={port_env}: {e}")
        
        if sys.version_info >= (3, 13):
            logger.info("‚úÖ Running on Python 3.13+ with latest python-telegram-bot")
        elif sys.version_info >= (3, 12):
            logger.info("‚úÖ Running on Python 3.12+ with latest python-telegram-bot")
        
        logger.info("üöÄ Initializing bot services...")
        bot = OkamaFinanceBot()
        logger.info("‚úÖ Bot services initialized successfully")
        logger.info("ü§ñ Starting Telegram bot...")
        bot.run()
    except Exception as e:
        logger.error(f"‚ùå Fatal error starting bot: {e}")
        logger.error(f"Python version: {sys.version}")
        logger.error(f"Python executable: {sys.executable}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
