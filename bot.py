import sys
import logging
import os
import json
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import io
import pandas as pd
import matplotlib.pyplot as plt
try:
    import tabulate
    TABULATE_AVAILABLE = True
except ImportError:
    TABULATE_AVAILABLE = False
    print("Warning: tabulate library not available. Using simple text formatting.")
from typing import Dict, List, Optional, Any
from datetime import datetime

# Check Python version compatibility
if sys.version_info < (3, 7):
    print("ERROR: Python 3.7+ required. Current version:", sys.version)
    raise RuntimeError("Python 3.7+ required")

from config import Config
from services.asset_service import AssetService
from yandexgpt_service import YandexGPTService
from services.intent_parser_enhanced import EnhancedIntentParser
from services.asset_resolver_enhanced import EnhancedAssetResolver
from services.okama_handler_enhanced import EnhancedOkamaHandler
from services.report_builder_enhanced import EnhancedReportBuilder
from services.analysis_engine_enhanced import EnhancedAnalysisEngine
from services.financial_brain_enhanced import EnhancedOkamaFinancialBrain

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Health check for deployment
def health_check():
    """Simple health check for deployment"""
    logger.info(f"‚úÖ Environment: {'PRODUCTION' if os.getenv('PRODUCTION') else 'LOCAL'}")
    logger.info(f"‚úÖ Python version: {sys.version}")
    logger.info(f"‚úÖ Bot token configured: {'Yes' if Config.TELEGRAM_BOT_TOKEN else 'No'}")
    return True

class OkamaFinanceBot:
    """Simple Telegram bot class for financial analysis with Okama library"""
    
    def __init__(self):
        """Initialize the bot with required services"""
        Config.validate()
        
        # Initialize logger
        self.logger = logging.getLogger(__name__)
        
        self.asset_service = AssetService()
        self.yandexgpt_service = YandexGPTService()
        self.intent_parser = EnhancedIntentParser()
        self.asset_resolver = EnhancedAssetResolver()
        self.okama_handler = EnhancedOkamaHandler()
        self.report_builder = EnhancedReportBuilder()
        self.analysis_engine = EnhancedAnalysisEngine()
        self.financial_brain = EnhancedOkamaFinancialBrain()
        
        # User session storage
        self.user_sessions = {}
        
        # User history management
        self.user_history: Dict[int, List[dict]] = {}       # chat_id -> list[{"role": "...", "parts": [str]}]
        self.context_enabled: Dict[int, bool] = {}          # chat_id -> bool
        self.MAX_HISTORY_MESSAGES = 20
        self.MAX_TELEGRAM_CHUNK = 4000
        
    def _get_user_context(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {
                'last_assets': [],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã
                'last_analysis_type': None,  # –¢–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                'last_period': None,  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
                'conversation_history': [],  # –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
                'preferences': {}  # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }
        return self.user_sessions[user_id]
    
    def _update_user_context(self, user_id: int, **kwargs):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        context = self._get_user_context(user_id)
        context.update(kwargs)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        if 'conversation_history' in context and len(context['conversation_history']) > 10:
            context['conversation_history'] = context['conversation_history'][-10:]
    
    def _add_to_conversation_history(self, user_id: int, message: str, response: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        context = self._get_user_context(user_id)
        context['conversation_history'].append({
            'timestamp': datetime.now().isoformat(),
            'message': message,
            'response': response[:200]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
        })
    
    def _get_context_summary(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        context = self._get_user_context(user_id)
        summary = []
        
        if context['last_assets']:
            summary.append(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤—ã: {', '.join(context['last_assets'][-3:])}")
        
        if context['last_period']:
            summary.append(f"–ü–µ—Ä–∏–æ–¥: {context['last_period']}")
        
        return "; ".join(summary) if summary else "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # =======================
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    # =======================
    def _init_chat(self, chat_id: int):
        if chat_id not in self.user_history:
            self.user_history[chat_id] = []
        if chat_id not in self.context_enabled:
            self.context_enabled[chat_id] = True

    def _history_trim(self, chat_id: int):
        if len(self.user_history[chat_id]) > self.MAX_HISTORY_MESSAGES:
            self.user_history[chat_id] = self.user_history[chat_id][-self.MAX_HISTORY_MESSAGES:]

    def history_append(self, chat_id: int, role: str, text: str):
        if not self.context_enabled.get(chat_id, True):
            return
        self.user_history[chat_id].append({"role": role, "parts": [text]})
        self._history_trim(chat_id)

    def _split_text(self, text: str):
        for i in range(0, len(text), self.MAX_TELEGRAM_CHUNK):
            yield text[i:i + self.MAX_TELEGRAM_CHUNK]

    async def send_long_message(self, update: Update, text: str):
        if not text:
            text = "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
        for chunk in self._split_text(text):
            await update.message.reply_text(chunk)
    
    async def _send_message_safe(self, update: Update, text: str, parse_mode: str = None, reply_markup = None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ text –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
            if not isinstance(text, str):
                self.logger.warning(f"_send_message_safe received non-string data: {type(text)}")
                text = str(text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
            if len(text) <= 4000:
                await update.message.reply_text(text, parse_mode=parse_mode, reply_markup=reply_markup)
            else:
                # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                if reply_markup:
                    first_part = text[:4000]
                    await update.message.reply_text(first_part, parse_mode=parse_mode, reply_markup=reply_markup)
                    # –û—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                    remaining_text = text[4000:]
                    if remaining_text:
                        await self.send_long_message(update, remaining_text)
                else:
                    await self.send_long_message(update, text)
        except Exception as e:
            self.logger.error(f"Error in _send_message_safe: {e}")
            # Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            try:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(text)[:1000]}...")
            except:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command with full help"""
        user = update.effective_user
        # Escape user input to prevent Markdown parsing issues
        user_name = user.first_name or "User"
        # Remove any special characters that could break Markdown
        user_name = user_name.replace("*", "").replace("_", "").replace("`", "").replace("[", "").replace("]", "")
        
        welcome_message = f"""üß† Okama Financial Bot - –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –ø–æ–º–æ–≥—É —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–æ–≤ –∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π.

–ß—Ç–æ —É–º–µ—é:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —Ü–µ–Ω + AI-–∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫—Ç–∏–≤–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–≤–µ—Å–∞, —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, efficient frontier)
‚Ä¢ –ú–∞–∫—Ä–æ/—Ç–æ–≤–∞—Ä—ã/–≤–∞–ª—é—Ç—ã
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–ª—è—Ü–∏–∏
‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ üÜï AI-–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫–æ–≤ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/info [—Ç–∏–∫–µ—Ä] [–ø–µ—Ä–∏–æ–¥] ‚Äî –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º
/compare [—Å–∏–º–≤–æ–ª1] [—Å–∏–º–≤–æ–ª2] ... ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
/namespace [–Ω–∞–∑–≤–∞–Ω–∏–µ] ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º–µ–Ω –∏–ª–∏ —Å–∏–º–≤–æ–ª—ã –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–∏–∫–µ—Ä–æ–≤:
‚Ä¢ US –∞–∫—Ü–∏–∏: AAPL.US, VOO.US, SPY.US, QQQ.US
‚Ä¢ MOEX: SBER.MOEX, GAZP.MOEX, LKOH.MOEX
‚Ä¢ –ò–Ω–¥–µ–∫—Å—ã: SPX.INDX, IXIC.INDX, RGBITR.INDX
‚Ä¢ –¢–æ–≤–∞—Ä—ã: GC.COMM (–∑–æ–ª–æ—Ç–æ), CL.COMM (–Ω–µ—Ñ—Ç—å), SI.COMM (—Å–µ—Ä–µ–±—Ä–æ)
‚Ä¢ –í–∞–ª—é—Ç—ã: EURUSD.FX, GBPUSD.FX, USDJPY.FX
‚Ä¢ LSE: VOD.LSE, HSBA.LSE, BP.LSE

–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:
‚Ä¢ `/compare SPY.US QQQ.US` - —Å—Ä–∞–≤–Ω–∏—Ç—å S&P 500 –∏ NASDAQ
‚Ä¢ `/compare SBER.MOEX,GAZP.MOEX` - —Å—Ä–∞–≤–Ω–∏—Ç—å –°–±–µ—Ä–±–∞–Ω–∫ –∏ –ì–∞–∑–ø—Ä–æ–º
‚Ä¢ `/compare SPY.US, QQQ.US, VOO.US` - —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç—ã—Ö
‚Ä¢ `/compare GC.COMM CL.COMM` - —Å—Ä–∞–≤–Ω–∏—Ç—å –∑–æ–ª–æ—Ç–æ –∏ –Ω–µ—Ñ—Ç—å
‚Ä¢ `/compare VOO.US,BND.US,GC.COMM` - —Å—Ä–∞–≤–Ω–∏—Ç—å –∞–∫—Ü–∏–∏, –æ–±–ª–∏–≥–∞—Ü–∏–∏ –∏ –∑–æ–ª–æ—Ç–æ
–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –æ–ø—Ä–µ–ª–µ–ª—è–µ—Ç—Å—è –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–∏–º–≤–æ–ª—É –≤ —Å–ø–∏—Å–∫–µ.
"""

        await self._send_message_safe(update, welcome_message)
    
    async def show_info_help(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /info"""
        help_text = """üìä –ö–æ–º–∞–Ω–¥–∞ /info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–µ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/info [—Ç–∏–∫–µ—Ä] [–ø–µ—Ä–∏–æ–¥]` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–µ.

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ `/info AAPL.US` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± Apple
‚Ä¢ `/info SBER.MOEX` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –°–±–µ—Ä–±–∞–Ω–∫–µ
‚Ä¢ `/info GC.COMM 5Y` - –∑–æ–ª–æ—Ç–æ –∑–∞ 5 –ª–µ—Ç
‚Ä¢ `/info SPX.INDX 10Y` - S&P 500 –∑–∞ 10 –ª–µ—Ç

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–µ—Ä–∏–æ–¥—ã:
‚Ä¢ 1Y, 2Y, 5Y, 10Y, MAX
‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10Y –¥–ª—è –∞–∫—Ü–∏–π, 5Y –¥–ª—è –º–∞–∫—Ä–æ
"""
        
        await self._send_message_safe(update, help_text)
    
    async def show_namespace_help(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /namespace"""
        help_text = """üìö –ö–æ–º–∞–Ω–¥–∞ /namespace - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/namespace` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º–µ–Ω.

‚Ä¢ `/namespace US` - –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∞–∫—Ü–∏–∏
‚Ä¢ `/namespace MOEX` - —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏
‚Ä¢ `/namespace INDX` - –º–∏—Ä–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
‚Ä¢ `/namespace FX` - –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
‚Ä¢ `/namespace COMM` - —Ç–æ–≤–∞—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤—ã

"""
        
        await self._send_message_safe(update, help_text)

    async def show_namespace_symbols(self, update: Update, namespace: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏–º–µ–Ω"""
        try:
            import okama as ok
            symbols_df = ok.symbols_in_namespace(namespace)
            
            if symbols_df.empty:
                await self._send_message_safe(update, f"‚ùå –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω '{namespace}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–æ")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤
            response = f"üìä –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω: {namespace}\n\n"
            response += f"‚Ä¢ –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols_df)}\n\n"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            headers = ["–°–∏–º–≤–æ–ª", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—Ç—Ä–∞–Ω–∞", "–í–∞–ª—é—Ç–∞"]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
            first_10 = []
            for _, row in symbols_df.head(10).iterrows():
                symbol = row['symbol'] if pd.notna(row['symbol']) else 'N/A'
                name = row['name'] if pd.notna(row['name']) else 'N/A'
                country = row['country'] if pd.notna(row['country']) else 'N/A'
                currency = row['currency'] if pd.notna(row['currency']) else 'N/A'
                
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                if len(name) > 40:
                    name = name[:37] + "..."
                
                first_10.append([symbol, name, country, currency])
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É —Å–∏–º–≤–æ–ª–æ–≤
            if first_10:
                response += "–ü–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤:\n\n"
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É
                for row in first_10:
                    symbol = row[0]
                    name = row[1]
                    country = row[2]
                    currency = row[3]
                    
                    response += f"‚Ä¢ {symbol} - {name} | {country} | {currency}\n"
                
                await self._send_message_safe(update, response)
            else:
                response += f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/namespace {namespace}` –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤"
                await self._send_message_safe(update, response)
            
        except Exception as e:
            await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è '{namespace}': {str(e)}")
    




    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /info command"""
        if not context.args:
            await self._send_message_safe(update, 
                "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞. –ü—Ä–∏–º–µ—Ä: /info AAPL.US –∏–ª–∏ /info SBER.MOEX")
            return
        
        symbol = context.args[0].upper()
        period = context.args[1] if len(context.args) > 1 else '10Y'
        
        # Update user context
        user_id = update.effective_user.id
        self._update_user_context(user_id, 
                                last_assets=[symbol] + self._get_user_context(user_id).get('last_assets', []),
                                last_period=period)
        
        await self._send_message_safe(update, f"üìä –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–µ {symbol}...")
        
        try:
            asset_info = self.asset_service.get_asset_info(symbol)
            
            if 'error' in asset_info:
                await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞: {asset_info['error']}")
                return
            
            # Format asset info
            response = f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–µ: {symbol}\n\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {asset_info.get('name', 'N/A')}\n"
            response += f"–°—Ç—Ä–∞–Ω–∞: {asset_info.get('country', 'N/A')}\n"
            response += f"–ë–∏—Ä–∂–∞: {asset_info.get('exchange', 'N/A')}\n"
            response += f"–í–∞–ª—é—Ç–∞: {asset_info.get('currency', 'N/A')}\n"
            response += f"–¢–∏–ø: {asset_info.get('type', 'N/A')}\n"
            response += f"ISIN: {asset_info.get('isin', 'N/A')}\n"
            response += f"–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {asset_info.get('period_length', 'N/A')}\n"
            
            if asset_info.get('current_price') is not None:
                response += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {asset_info['current_price']:.2f} {asset_info.get('currency', 'N/A')}\n"
            
            if asset_info.get('annual_return') != 'N/A':
                response += f"–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {asset_info['annual_return']}\n"
            
            if asset_info.get('total_return') != 'N/A':
                response += f"–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {asset_info['total_return']}\n"
            
            if asset_info.get('volatility') != 'N/A':
                response += f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {asset_info['volatility']}\n"
            
            await self._send_message_safe(update, response)
            
            # Check if asset type suggests dividends and add dividend information
            asset_type = asset_info.get('type', '').lower()
            if any(keyword in asset_type for keyword in ['stock', '–∞–∫—Ü–∏—è', 'share', 'equity']):
                await self._send_message_safe(update, "üíµ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö...")
                
                try:
                    dividend_info = self.asset_service.get_asset_dividends(symbol)
                    
                    if 'error' not in dividend_info and dividend_info.get('dividends'):
                        dividends = dividend_info['dividends']
                        currency = dividend_info.get('currency', '')
                        
                        if dividends:
                            # Get current price for yield calculation
                            current_price = asset_info.get('current_price')
                            
                            dividend_response = f"üíµ –î–∏–≤–∏–¥–µ–Ω–¥—ã {symbol}\n\n"
                            dividend_response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–ª–∞—Ç: {len(dividends)}\n\n"
                            
                            # Show last 5 dividends with yield calculation
                            sorted_dividends = sorted(dividends.items(), key=lambda x: x[0], reverse=True)[:10]
                            
                            for date, amount in sorted_dividends:
                                dividend_response += f"{date}: {amount:.2f} {currency}\n"
                                
                            
                            await self._send_message_safe(update, dividend_response)
                        else:
                            await self._send_message_safe(update, "üíµ –î–∏–≤–∏–¥–µ–Ω–¥—ã –Ω–µ –≤—ã–ø–ª–∞—á–∏–≤–∞–ª–∏—Å—å –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                    else:
                        await self._send_message_safe(update, "üíµ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        
                except Exception as div_error:
                    self.logger.error(f"Error getting dividends for {symbol}: {div_error}")
                    await self._send_message_safe(update, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤: {str(div_error)}")
            
            # Get charts for analysis
            await self._send_message_safe(update, "üìà –ü–æ–ª—É—á–∞—é –≥—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω...")
            
            try:
                self.logger.info(f"Getting price history for {symbol} with period {period}")
                price_history = self.asset_service.get_asset_price_history(symbol, period)
                
                if 'error' in price_history:
                    self.logger.error(f"Error in price_history: {price_history['error']}")
                    await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: {price_history['error']}")
                    return
                
                # Display charts from price history
                if 'charts' in price_history and price_history['charts']:
                    charts = price_history['charts']
                    for i, chart_data in enumerate(charts):
                        if chart_data:  # Check if chart data exists
                            await update.message.reply_photo(
                                photo=chart_data,
                                caption=f"üìà –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω {symbol} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}"
                            )
                        else:
                            await self._send_message_safe(update, f"‚ö†Ô∏è –ì—Ä–∞—Ñ–∏–∫ {i+1} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å")
                else:
                    await self._send_message_safe(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω")
                
                # Get AI analysis
                await self._send_message_safe(update, "üß† –ü–æ–ª—É—á–∞—é AI-–∞–Ω–∞–ª–∏–∑...")
                
                try:
                    analysis = self.analysis_engine.analyze_asset(symbol, price_history, period)
                    
                    if 'error' in analysis:
                        await self._send_message_safe(update, f"‚ö†Ô∏è AI-–∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {analysis['error']}")
                    else:
                        await self._send_message_safe(update, f"üß† AI-–∞–Ω–∞–ª–∏–∑ {symbol}\n\n{analysis['analysis']}")
                        
                except Exception as analysis_error:
                    self.logger.error(f"Error in AI analysis for {symbol}: {analysis_error}")
                    await self._send_message_safe(update, "‚ö†Ô∏è AI-–∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
            except Exception as chart_error:
                self.logger.error(f"Error creating chart for {symbol}: {chart_error}")
                await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(chart_error)}")
                
        except Exception as e:
            self.logger.error(f"Error in info command for {symbol}: {e}")
            await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def namespace_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /namespace command"""
        try:
            import okama as ok
            
            if not context.args:
                # Show available namespaces
                namespaces = ok.namespaces
                
                response = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω (namespaces):\n\n"
                response += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                response += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º–µ–Ω: {len(namespaces)}\n\n"
                
                # Prepare data for tabulate
                headers = ["–ö–æ–¥", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
                namespace_data = []
                
                # Categorize namespaces for better organization
                categories = {
                    '–ë–∏—Ä–∂–∏': ['MOEX', 'US', 'LSE', 'XAMS', 'XETR', 'XFRA', 'XSTU', 'XTAE'],
                    '–ò–Ω–¥–µ–∫—Å—ã': ['INDX'],
                    '–í–∞–ª—é—Ç—ã': ['FX', 'CBR'],
                    '–¢–æ–≤–∞—Ä—ã': ['COMM'],
                    '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã': ['CC'],
                    '–ò–Ω—Ñ–ª—è—Ü–∏—è': ['INFL'],
                    '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å': ['RE'],
                    '–ü–æ—Ä—Ç—Ñ–µ–ª–∏': ['PF', 'PIF'],
                    '–î–µ–ø–æ–∑–∏—Ç—ã': ['RATE'],
                    '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã': ['RATIO']
                }
                
                # Create categorized data
                for namespace, description in namespaces.items():
                    category = "–î—Ä—É–≥–æ–µ"
                    for cat_name, cat_namespaces in categories.items():
                        if namespace in cat_namespaces:
                            category = cat_name
                            break
                    
                    namespace_data.append([namespace, description, category])
                
                # Sort by category and then by namespace
                namespace_data.sort(key=lambda x: (x[2], x[0]))
                
                # Create table using tabulate or fallback to simple format
                if TABULATE_AVAILABLE:
                    # Use plain format for best Telegram display
                    table = tabulate.tabulate(namespace_data, headers=headers, tablefmt="plain")
                    response += f"```\n{table}\n```\n\n"
                else:
                    # Fallback to simple text format
                    response += "–ö–æ–¥ | –û–ø–∏—Å–∞–Ω–∏–µ | –ö–∞—Ç–µ–≥–æ—Ä–∏—è\n"
                    response += "--- | --- | ---\n"
                    for row in namespace_data:
                        response += f"`{row[0]}` | {row[1]} | {row[2]}\n"
                    response += "\n"
                
                response += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/namespace <–∫–æ–¥>` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ"
                
                await self._send_message_safe(update, response)
                
            else:
                # Show symbols in specific namespace
                namespace = context.args[0].upper()
                
                try:
                    symbols_df = ok.symbols_in_namespace(namespace)
                    
                    # Check if DataFrame is empty
                    if symbols_df.empty:
                        await self._send_message_safe(update, f"‚ùå –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω '{namespace}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–æ")
                        return
                    
                    # Convert DataFrame to list of symbols
                    # The DataFrame has 'symbol' column with full names like 'AAPL.US'
                    # We want to extract just the ticker part
                    if 'symbol' in symbols_df.columns:
                        # Extract ticker part (before the dot)
                        symbols = []
                        for full_symbol in symbols_df['symbol'].tolist():
                            if pd.isna(full_symbol) or full_symbol is None:
                                continue
                            symbol_str = str(full_symbol).strip()
                            if '.' in symbol_str:
                                ticker = symbol_str.split('.')[0]
                                symbols.append(ticker)
                            else:
                                symbols.append(symbol_str)
                    elif 'ticker' in symbols_df.columns:
                        symbols = symbols_df['ticker'].tolist()
                    else:
                        # If no clear column, try to get the first column
                        symbols = symbols_df.iloc[:, 0].tolist()
                    
                    if not symbols:
                        await self._send_message_safe(update, f"‚ùå –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω '{namespace}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤")
                        return
                    
                    # Show statistics first
                    total_symbols = len(symbols_df)
                    response = f"üìä –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω: {namespace}\n\n"
                    response += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    response += f"‚Ä¢ –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {total_symbols}\n"
                    response += f"‚Ä¢ –ö–æ–ª–æ–Ω–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {', '.join(symbols_df.columns)}\n\n"
                    
                    # Prepare data for tabulate
                    headers = ["–°–∏–º–≤–æ–ª", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—Ç—Ä–∞–Ω–∞", "–í–∞–ª—é—Ç–∞"]
                    
                    # Get first 10 rows
                    first_10 = []
                    for _, row in symbols_df.head(10).iterrows():
                        symbol = row['symbol'] if pd.notna(row['symbol']) else 'N/A'
                        name = row['name'] if pd.notna(row['name']) else 'N/A'
                        country = row['country'] if pd.notna(row['country']) else 'N/A'
                        currency = row['currency'] if pd.notna(row['currency']) else 'N/A'
                        
                        # Truncate long names for readability
                        if len(name) > 40:
                            name = name[:37] + "..."
                        
                        first_10.append([symbol, name, country, currency])
                    
                    # Get last 10 rows
                    last_10 = []
                    for _, row in symbols_df.tail(10).iterrows():
                        symbol = row['symbol'] if pd.notna(row['symbol']) else 'N/A'
                        name = row['name'] if pd.notna(row['name']) else 'N/A'
                        country = row['country'] if pd.notna(row['country']) else 'N/A'
                        currency = row['currency'] if pd.notna(row['currency']) else 'N/A'
                        
                        # Truncate long names for readability
                        if len(name) > 40:
                            name = name[:37] + "..."
                        
                        last_10.append([symbol, name, country, currency])
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É —Å–∏–º–≤–æ–ª–æ–≤
                    if first_10:
                        response += "–ü–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤:\n\n"
                        
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É
                        for row in first_10:
                            symbol = row[0]
                            name = row[1]
                            country = row[2]
                            currency = row[3]
                            
                            response += f"‚Ä¢ {symbol} - {name} | {country} | {currency}\n"
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π
                        await self._send_message_safe(update, response)
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å–∏–º–≤–æ–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
                        if last_10 and total_symbols > 10:
                            last_response = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–º–≤–æ–ª–æ–≤:\n\n"
                            
                            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                            for row in last_10:
                                symbol = row[0]
                                name = row[1]
                                country = row[2]
                                currency = row[3]
                                
                                last_response += f"‚Ä¢ {symbol} - {name} | {country} | {currency}\n"
                            
                            await self._send_message_safe(update, last_response)
                    else:
                        response += f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/info <—Å–∏–º–≤–æ–ª>` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–µ"
                        await self._send_message_safe(update, response)
                    
                    # Send Excel file with full list of symbols
                    try:
                        await self._send_message_safe(update, "üìä –°–æ–∑–¥–∞—é Excel —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏...")
                        
                        # Create Excel file in memory
                        excel_buffer = io.BytesIO()
                        symbols_df.to_excel(excel_buffer, index=False, sheet_name=f'{namespace}_Symbols')
                        excel_buffer.seek(0)
                        
                        # Send Excel file
                        await update.message.reply_document(
                            document=excel_buffer,
                            filename=f"{namespace}_symbols.xlsx",
                            caption=f"üìä –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ {namespace} ({total_symbols} —Å–∏–º–≤–æ–ª–æ–≤)"
                        )
                        
                        excel_buffer.close()
                        
                    except Exception as excel_error:
                        self.logger.error(f"Error creating Excel file for {namespace}: {excel_error}")
                        await self._send_message_safe(update, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel —Ñ–∞–π–ª: {str(excel_error)}")
                    
                except Exception as e:
                    await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è '{namespace}': {str(e)}")
                    
        except ImportError:
            await self._send_message_safe(update, "‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ okama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"Error in namespace command: {e}")
            await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def compare_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /compare command for comparing multiple assets"""
        try:
            if not context.args:
                await self._send_message_safe(update, 
                    "üìä –ö–æ–º–∞–Ω–¥–∞ /compare - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "`/compare —Å–∏–º–≤–æ–ª1 —Å–∏–º–≤–æ–ª2 —Å–∏–º–≤–æ–ª3 ...`\n"
                    "–∏–ª–∏\n"
                    "`/compare —Å–∏–º–≤–æ–ª1,—Å–∏–º–≤–æ–ª2,—Å–∏–º–≤–æ–ª3`\n"
                    "–∏–ª–∏\n"
                    "`/compare —Å–∏–º–≤–æ–ª1, —Å–∏–º–≤–æ–ª2, —Å–∏–º–≤–æ–ª3`\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ `/compare SPY.US QQQ.US` - —Å—Ä–∞–≤–Ω–∏—Ç—å S&P 500 –∏ NASDAQ (–≤ USD)\n"
                    "‚Ä¢ `/compare SBER.MOEX,GAZP.MOEX` - —Å—Ä–∞–≤–Ω–∏—Ç—å –°–±–µ—Ä–±–∞–Ω–∫ –∏ –ì–∞–∑–ø—Ä–æ–º (–≤ RUB)\n"
                    "‚Ä¢ `/compare SPY.US, QQQ.US, VOO.US` - —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç—ã—Ö\n"
                    "‚Ä¢ `/compare GC.COMM CL.COMM` - —Å—Ä–∞–≤–Ω–∏—Ç—å –∑–æ–ª–æ—Ç–æ –∏ –Ω–µ—Ñ—Ç—å (–≤ USD)\n"
                    "‚Ä¢ `/compare VOO.US,BND.US,GC.COMM` - —Å—Ä–∞–≤–Ω–∏—Ç—å –∞–∫—Ü–∏–∏, –æ–±–ª–∏–≥–∞—Ü–∏–∏ –∏ –∑–æ–ª–æ—Ç–æ (–≤ USD)\n\n"
                    "–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
                    "‚úÖ –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤\n"
                    "‚úÖ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
                    "‚úÖ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
                    "üí° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã:\n"
                    "‚Ä¢ –ü–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤ –≤ —Å–ø–∏—Å–∫–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É\n"
                    "‚Ä¢ MOEX –∞–∫—Ç–∏–≤—ã ‚Üí RUB, US –∞–∫—Ç–∏–≤—ã ‚Üí USD, LSE ‚Üí GBP\n"
                    "‚Ä¢ –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Üí USD –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
                    "üìÖ –ü–µ—Ä–∏–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n"
                    "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n"
                    "‚Ä¢ –ü–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–∏–∫–ª—ã\n\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                    "‚Ä¢ US –∞–∫—Ü–∏–∏: AAPL.US, VOO.US, SPY.US\n"
                    "‚Ä¢ MOEX: SBER.MOEX, GAZP.MOEX\n"
                    "‚Ä¢ –ò–Ω–¥–µ–∫—Å—ã: SPX.INDX, IXIC.INDX\n"
                    "‚Ä¢ –¢–æ–≤–∞—Ä—ã: GC.COMM, CL.COMM, SI.COMM\n"
                    "‚Ä¢ –í–∞–ª—é—Ç—ã: EURUSD.FX, GBPUSD.FX"
                )
                return

            # Extract symbols from command arguments
            # Support multiple formats: space-separated, comma-separated, and comma+space
            raw_args = ' '.join(context.args)  # Join all arguments into one string
            
            # Enhanced parsing logic for multiple formats
            if ',' in raw_args:
                # Handle comma-separated symbols (with or without spaces)
                # Split by comma and clean each symbol
                symbols = []
                for symbol_part in raw_args.split(','):
                    # Handle cases like "SPY.US, QQQ.US" (comma + space)
                    symbol_part = symbol_part.strip()
                    if symbol_part:  # Only add non-empty symbols
                        symbols.append(symbol_part.upper())
                self.logger.info(f"Parsed comma-separated symbols: {symbols}")
            else:
                # Handle space-separated symbols (original behavior)
                symbols = [symbol.upper() for symbol in context.args]
                self.logger.info(f"Parsed space-separated symbols: {symbols}")
            
            # Clean up symbols (remove empty strings and whitespace)
            symbols = [symbol for symbol in symbols if symbol.strip()]
            
            if len(symbols) < 2:
                await self._send_message_safe(update, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
                return
            
            if len(symbols) > 10:
                await self._send_message_safe(update, "‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
                return

            await self._send_message_safe(update, f"üîÑ –°—Ä–∞–≤–Ω–∏–≤–∞—é –∞–∫—Ç–∏–≤—ã: {', '.join(symbols)}...")

            # Create comparison using okama
            import okama as ok
            
            # Determine base currency from the first asset
            first_symbol = symbols[0]
            currency_info = ""
            try:
                # Try to get currency info for the first asset
                if '.' in first_symbol:
                    namespace = first_symbol.split('.')[1]
                    if namespace == 'MOEX':
                        currency = "RUB"  # Russian assets in RUB
                        currency_info = f"–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –∞–∫—Ç–∏–≤—É ({first_symbol})"
                    elif namespace == 'US':
                        currency = "USD"  # US assets in USD
                        currency_info = f"–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –∞–∫—Ç–∏–≤—É ({first_symbol})"
                    elif namespace == 'LSE':
                        currency = "GBP"  # London assets in GBP
                        currency_info = f"–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –∞–∫—Ç–∏–≤—É ({first_symbol})"
                    elif namespace == 'FX':
                        currency = "USD"  # Forex pairs in USD
                        currency_info = f"–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –∞–∫—Ç–∏–≤—É ({first_symbol})"
                    elif namespace == 'COMM':
                        currency = "USD"  # Commodities in USD
                        currency_info = f"–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –∞–∫—Ç–∏–≤—É ({first_symbol})"
                    elif namespace == 'INDX':
                        currency = "USD"  # Indices in USD
                        currency_info = f"–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –∞–∫—Ç–∏–≤—É ({first_symbol})"
                    else:
                        currency = "USD"  # Default to USD
                        currency_info = "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (USD)"
                else:
                    currency = "USD"  # Default to USD
                    currency_info = "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (USD)"
                
                self.logger.info(f"Auto-detected currency for {first_symbol}: {currency}")
                
            except Exception as e:
                self.logger.warning(f"Could not auto-detect currency, using USD: {e}")
                currency = "USD"
                currency_info = "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (USD)"
            
            try:
                # Create AssetList for comparison with detected currency (full period)
                asset_list = ok.AssetList(symbols, ccy=currency)
                
                self.logger.info(f"Created AssetList with full available period")
                
                # Generate beautiful comparison chart
                try:
                    plt.style.use('seaborn-v0_8')  # Use modern seaborn style
                except:
                    try:
                        plt.style.use('seaborn')  # Try alternative seaborn style
                    except:
                        plt.style.use('default')  # Fallback to default style
                
                fig, ax = plt.subplots(figsize=(14, 9), facecolor='white')
                
                # Plot with enhanced styling
                asset_list.wealth_indexes.plot(ax=ax, linewidth=2.5, alpha=0.9)
                
                # Enhanced chart customization
                ax.set_title(f'üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏\n{", ".join(symbols)}', 
                           fontsize=16, fontweight='bold', pad=20, color='#2E3440')
                ax.set_xlabel('üìÖ –î–∞—Ç–∞', fontsize=13, fontweight='semibold', color='#4C566A')
                ax.set_ylabel(f'üí∞ –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ({currency})', fontsize=13, fontweight='semibold', color='#4C566A')
                
                # Enhanced grid and background
                ax.grid(True, alpha=0.2, linestyle='-', linewidth=0.8)
                ax.set_facecolor('#F8F9FA')
                
                # Enhanced legend
                ax.legend(fontsize=11, frameon=True, fancybox=True, shadow=True, 
                         loc='upper left', bbox_to_anchor=(0.02, 0.98))
                
                # Customize spines
                for spine in ax.spines.values():
                    spine.set_color('#D1D5DB')
                    spine.set_linewidth(0.8)
                
                # Enhance tick labels
                ax.tick_params(axis='both', which='major', labelsize=10, colors='#4C566A')
                
                # Add subtle background pattern
                ax.set_alpha(0.95)
                
                # Save chart to bytes
                img_buffer = io.BytesIO()
                fig.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
                img_buffer.seek(0)
                img_bytes = img_buffer.getvalue()
                
                # Get basic statistics
                stats_text = f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤: {', '.join(symbols)}\n\n"
                stats_text += f"üí∞ –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {currency} ({currency_info})\n"
                stats_text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {asset_list.first_date} - {asset_list.last_date}\n"
                stats_text += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {asset_list.period_length}\n\n"
                
                # Get asset names
                if hasattr(asset_list, 'names') and asset_list.names:
                    stats_text += "üìã –ù–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤:\n"
                    for symbol, name in asset_list.names.items():
                        stats_text += f"‚Ä¢ {symbol} - {name}\n"
                    stats_text += "\n"
                
                # Calculate and show final returns
                try:
                    final_values = asset_list.wealth_indexes.iloc[-1]
                    stats_text += f"üìà –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ({currency}):\n"
                    for symbol in symbols:
                        if symbol in final_values:
                            value = final_values[symbol]
                            stats_text += f"‚Ä¢ {symbol}: {value:.2f}\n"
                except Exception as e:
                    self.logger.warning(f"Could not get final values: {e}")
                
                # Send text report
                #await self.send_long_message(update, stats_text)
                
                # Send chart image
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id, 
                    photo=io.BytesIO(img_bytes),
                    caption=stats_text
                )
                
                # Update user context
                user_id = update.effective_user.id
                self._update_user_context(
                    user_id, 
                    last_assets=symbols,
                    last_analysis_type='comparison',
                    last_period='MAX'
                )
                
            except Exception as e:
                self.logger.error(f"Error creating comparison: {e}")
                await self._send_message_safe(update, 
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {str(e)}\n\n"
                    "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –û–¥–∏–Ω –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                    "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ MOEX\n"
                    "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                    "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤\n"
                    "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤"
                )
                
        except Exception as e:
            self.logger.error(f"Error in compare command: {e}")
            await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {str(e)}")

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle incoming photo messages for chart analysis"""
        try:
            # Get the largest photo size
            photo = update.message.photo[-1]
            
            # Show typing indicator
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            # Download the photo
            file = await context.bot.get_file(photo.file_id)
            photo_bytes = await file.download_as_bytearray()
            
            # Create analysis prompt
            analysis_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫.

–ó–∞–¥–∞—á–∞: –û–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ:
1. –¢—Ä–µ–Ω–¥ (–≤–æ—Å—Ö–æ–¥—è—â–∏–π/–Ω–∏—Å—Ö–æ–¥—è—â–∏–π/–±–æ–∫–æ–≤–æ–π)
2. –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
3. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
            
            # Analyze the photo with vision
            await self._send_message_safe(update, "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")
            
            ai_response = self.yandexgpt_service.ask_question_with_vision(
                analysis_prompt,
                bytes(photo_bytes),
                "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            )
            
            if ai_response and not ai_response.startswith("–û—à–∏–±–∫–∞") and not ai_response.startswith("–ù–µ —É–¥–∞–ª–æ—Å—å"):
                await self._send_message_safe(update, "üß† –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤:")
                await self.send_long_message(update, ai_response)
            else:
                # Fallback: try regular analysis with photo description
                self.logger.info("Vision API failed, trying fallback analysis")
                try:
                    fallback_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫.

–ó–∞–¥–∞—á–∞: –û–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ:
1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
2. –¢–∏–ø–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
3. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ü–µ–Ω—ã

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
                    
                    fallback_response = self.yandexgpt_service.ask_question(fallback_prompt)
                    if fallback_response:
                        await self._send_message_safe(update, "üß† –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏:")
                        await self.send_long_message(update, fallback_response)
                    else:
                        await self._send_message_safe(update, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                except Exception as fallback_error:
                    self.logger.error(f"Fallback analysis also failed: {fallback_error}")
                    await self._send_message_safe(update, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                
        except Exception as e:
            self.logger.error(f"Error handling photo: {e}")
            await self._send_message_safe(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle incoming text messages"""
        try:
            user_message = update.message.text
            user_id = update.effective_user.id
            
            # Update user context
            self._update_user_context(user_id, conversation_history=user_message)
            
            # Parse intent
            parsed = self.intent_parser.parse_intent(user_message)
            
            # Process based on intent
            if parsed.intent == 'asset_analysis':
                # Handle asset analysis
                symbol = parsed.symbol
                period = getattr(parsed, 'period', '10Y')
                
                # Get asset info
                result = self.okama_handler.get_asset_info(symbol, period)
                report_text, images = self.report_builder.build_asset_report(result)
                ai_summary = self.analysis_engine.summarize('asset', result, user_message)
                
                # Send report
                await self.send_long_message(update, report_text)
                
                # Send images with analysis
                for img_bytes in images:
                    try:
                        await context.bot.send_photo(
                            chat_id=update.effective_chat.id, 
                            photo=io.BytesIO(img_bytes)
                        )
                    except Exception:
                        pass
                        
            elif parsed.intent == 'portfolio_analysis':
                # Handle portfolio analysis
                portfolio_data = parsed.portfolio
                result = self.okama_handler.analyze_portfolio(portfolio_data)
                report_text, images = self.report_builder.build_portfolio_report(result)
                ai_summary = self.analysis_engine.summarize('portfolio', result, user_message)
                
                # Send report
                await self.send_long_message(update, report_text)
                
                # Send images
                for img_bytes in images:
                    try:
                        await context.bot.send_photo(
                            chat_id=update.effective_chat.id, 
                            photo=io.BytesIO(img_bytes)
                        )
                    except Exception:
                        pass
                        
            elif parsed.intent == 'inflation_data':
                # Handle inflation data
                country = getattr(parsed, 'country', 'US')
                period = getattr(parsed, 'period', '5Y')
                result = self.okama_handler.get_inflation(country=country, period=period)
                report_text, images = self.report_builder.build_inflation_report(result)
                ai_summary = self.analysis_engine.summarize('inflation', result, user_message)
                
                # Send report
                await self.send_long_message(update, report_text)
                
                # Send images
                for img_bytes in images:
                    try:
                        await context.bot.send_photo(
                            chat_id=update.effective_chat.id, 
                            photo=io.BytesIO(img_bytes)
                        )
                    except Exception:
                        pass
                        
            else:
                # Fallback to AI chat if intent not recognized
                try:
                    ai_response = self.yandexgpt_service.ask_question(user_message)
                    if ai_response:
                        await self.send_long_message(update, f"ü§ñ AI-–æ—Ç–≤–µ—Ç:\n\n{ai_response}")
                    else:
                        await self._send_message_safe(update, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-–æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
                except Exception as e:
                    self.logger.error(f"Error in AI chat: {e}")
                    await self._send_message_safe(update, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI-–∑–∞–ø—Ä–æ—Å–∞.")
                    
        except Exception as e:
            self.logger.error(f"Error in handle_message: {e}")
            await self._send_message_safe(update, 
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
                                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. "
                "–ï—Å–ª–∏ –≤—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ MOEX (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER.MOEX), –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
            )

    def run(self):
        """Run the bot"""
        # Create application
        application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
        
        # Add handlers
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("info", self.info_command))
        application.add_handler(CommandHandler("namespace", self.namespace_command))
        application.add_handler(CommandHandler("compare", self.compare_command))
        
        # Add message handlers
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        
        # Start the bot
        logger.info("Starting Okama Finance Bot...")
        application.run_polling()

if __name__ == "__main__":
    try:
        logger.info(f"Starting Okama Finance Bot with Python {sys.version}")
        logger.info(f"Python version info: {sys.version_info}")
        
        # Perform health check
        health_check()
        
        # Optional HTTP health server for platforms expecting an open PORT
        port_env = os.getenv('PORT')
        if port_env:
            try:
                bind_port = int(port_env)
                class HealthHandler(BaseHTTPRequestHandler):
                    def do_GET(self):
                        payload = {
                            "status": "ok",
                            "service": "okama-finance-bot",
                            "environment": "RENDER" if os.getenv('RENDER') else "LOCAL"
                        }
                        self.send_response(200)
                        self.send_header('Content-Type', 'application/json')
                        self.end_headers()
                        self.wfile.write(json.dumps(payload).encode('utf-8'))
                    def log_message(self, format, *args):
                        return
                def serve_health():
                    server = HTTPServer(('0.0.0.0', bind_port), HealthHandler)
                    logger.info(f"Health server listening on 0.0.0.0:{bind_port}")
                    server.serve_forever()
                threading.Thread(target=serve_health, daemon=True).start()
            except Exception as e:
                logger.warning(f"Failed to start health server on PORT={port_env}: {e}")
        
        if sys.version_info >= (3, 13):
            logger.info("‚úÖ Running on Python 3.13+ with latest python-telegram-bot")
        elif sys.version_info >= (3, 12):
            logger.info("‚úÖ Running on Python 3.12+ with latest python-telegram-bot")
        
        logger.info("üöÄ Initializing bot services...")
        bot = OkamaFinanceBot()
        logger.info("‚úÖ Bot services initialized successfully")
        logger.info("ü§ñ Starting Telegram bot...")
        bot.run()
    except Exception as e:
        logger.error(f"‚ùå Fatal error starting bot: {e}")
        logger.error(f"Python version: {sys.version}")
        logger.error(f"Python executable: {sys.executable}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
