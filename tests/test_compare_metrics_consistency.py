#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ—Ç—Ä–∏–∫ –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–æ–π "–ú–µ—Ç—Ä–∏–∫–∏" –∏ AI –∞–Ω–∞–ª–∏–∑–æ–º –≤ –∫–æ–º–∞–Ω–¥–µ /compare
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import okama as ok
import pandas as pd
from bot import ShansAi
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_metrics_consistency():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ—Ç—Ä–∏–∫ –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–æ–π –ú–µ—Ç—Ä–∏–∫–∏ –∏ AI –∞–Ω–∞–ª–∏–∑–æ–º"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    test_symbols = ['SPY.US', 'QQQ.US']
    test_currency = 'USD'
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ—Ç—Ä–∏–∫ –≤ –∫–æ–º–∞–Ω–¥–µ /compare")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = ShansAi()
        
        # –°–æ–∑–¥–∞–µ–º AssetList –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        asset_list = ok.AssetList(test_symbols, ccy=test_currency)
        
        # –ü–æ–ª—É—á–∞–µ–º describe –¥–∞–Ω–Ω—ã–µ (—Ç–µ –∂–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ –º–µ—Ç—Ä–∏–∫)
        describe_data = asset_list.describe()
        print(f"üìä –î–∞–Ω–Ω—ã–µ describe –¥–ª—è {test_symbols}:")
        print(describe_data)
        print()
        
        # –°–æ–∑–¥–∞–µ–º expanded_symbols (—Å–∏–º–≤–æ–ª—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏)
        expanded_symbols = test_symbols.copy()
        portfolio_contexts = []
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫ (–∫–Ω–æ–ø–∫–∞ "–ú–µ—Ç—Ä–∏–∫–∏")
        print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ _create_summary_metrics_table (–∫–Ω–æ–ø–∫–∞ –ú–µ—Ç—Ä–∏–∫–∏):")
        metrics_table = bot._create_summary_metrics_table(
            symbols=test_symbols,
            currency=test_currency,
            expanded_symbols=expanded_symbols,
            portfolio_contexts=portfolio_contexts,
            specified_period=None
        )
        print("–¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫:")
        print(metrics_table)
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
        print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ _prepare_data_for_analysis (AI –∞–Ω–∞–ª–∏–∑):")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_context = {
            'describe_table': '',
            'current_symbols': test_symbols,
            'current_currency': test_currency
        }
        
        # –ú–æ–∫–∞–µ–º _get_user_context
        original_get_user_context = bot._get_user_context
        bot._get_user_context = lambda user_id: user_context
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        import asyncio
        data_info = asyncio.run(bot._prepare_data_for_analysis(
            symbols=test_symbols,
            currency=test_currency,
            expanded_symbols=expanded_symbols,
            portfolio_contexts=portfolio_contexts,
            user_id=12345
        ))
        
        print("–î–∞–Ω–Ω—ã–µ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"Symbols: {data_info['symbols']}")
        print(f"Currency: {data_info['currency']}")
        print(f"Summary metrics table:")
        print(data_info['summary_metrics_table'])
        print()
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫
        print("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –º–µ—Ç—Ä–∏–∫:")
        print("=" * 40)
        
        metrics_table_clean = metrics_table.replace("## üìä –ú–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–æ–≤\n\n", "").strip()
        ai_table_clean = data_info['summary_metrics_table'].replace("## üìä –ú–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–æ–≤\n\n", "").strip()
        
        if metrics_table_clean == ai_table_clean:
            print("‚úÖ –¢–ê–ë–õ–ò–¶–´ –ú–ï–¢–†–ò–ö –ò–î–ï–ù–¢–ò–ß–ù–´!")
            print("–ö–Ω–æ–ø–∫–∞ '–ú–µ—Ç—Ä–∏–∫–∏' –∏ AI –∞–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        else:
            print("‚ùå –¢–ê–ë–õ–ò–¶–´ –ú–ï–¢–†–ò–ö –†–ê–ó–õ–ò–ß–ê–Æ–¢–°–Ø!")
            print("–ö–Ω–æ–ø–∫–∞ '–ú–µ—Ç—Ä–∏–∫–∏':")
            print(metrics_table_clean)
            print("\nAI –∞–Ω–∞–ª–∏–∑:")
            print(ai_table_clean)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ AI –∞–Ω–∞–ª–∏–∑–µ
        print("\nüìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ AI –∞–Ω–∞–ª–∏–∑–µ:")
        print(f"Performance metrics keys: {list(data_info['performance'].keys())}")
        print(f"Asset names: {data_info['asset_names']}")
        print(f"Analysis type: {data_info['analysis_type']}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        bot._get_user_context = original_get_user_context
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_individual_asset_metrics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤"""
    
    print("\n" + "=" * 60)
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤")
    print("=" * 60)
    
    test_symbols = ['SPY.US', 'QQQ.US']
    
    for symbol in test_symbols:
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–∞: {symbol}")
        try:
            asset = ok.Asset(symbol)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {getattr(asset, 'name', 'N/A')}")
            print(f"–°—Ç—Ä–∞–Ω–∞: {getattr(asset, 'country', 'N/A')}")
            print(f"–¢–∏–ø: {getattr(asset, 'asset_type', 'N/A')}")
            print(f"–ë–∏—Ä–∂–∞: {getattr(asset, 'exchange', 'N/A')}")
            print(f"–í–∞–ª—é—Ç–∞: {getattr(asset, 'currency', 'N/A')}")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if hasattr(asset, 'get_cagr'):
                cagr = asset.get_cagr()
                if hasattr(cagr, 'iloc'):
                    cagr_value = cagr.iloc[0]
                else:
                    cagr_value = cagr
                print(f"CAGR: {cagr_value:.2%}")
            
            if hasattr(asset, 'volatility_annual'):
                volatility = asset.volatility_annual
                if hasattr(volatility, 'iloc'):
                    vol_value = volatility.iloc[-1]
                else:
                    vol_value = volatility
                print(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {vol_value:.2%}")
            
            if hasattr(asset, 'get_sharpe_ratio'):
                sharpe = asset.get_sharpe_ratio()
                if hasattr(sharpe, 'iloc'):
                    sharpe_value = sharpe.iloc[0]
                else:
                    sharpe_value = sharpe
                print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {sharpe_value:.2f}")
            
            if hasattr(asset, 'max_drawdown'):
                max_dd = asset.max_drawdown
                if hasattr(max_dd, 'iloc'):
                    dd_value = max_dd.iloc[-1]
                else:
                    dd_value = max_dd
                print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {dd_value:.2%}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ—Ç—Ä–∏–∫ –≤ –∫–æ–º–∞–Ω–¥–µ /compare")
    print("=" * 60)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    success = test_metrics_consistency()
    
    # –¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
    test_individual_asset_metrics()
    
    if success:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
