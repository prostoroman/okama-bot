#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü –º–µ—Ç—Ä–∏–∫ —Å Gemini –∞–Ω–∞–ª–∏–∑–æ–º
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot import ShansAi
from services.gemini_service import GeminiService
import okama as ok

async def test_gemini_data_preparation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Gemini –∞–Ω–∞–ª–∏–∑–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –º–µ—Ç—Ä–∏–∫"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Gemini –∞–Ω–∞–ª–∏–∑–∞")
    print("=" * 60)
    
    bot = ShansAi()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    symbols = ['SBER.MOEX', 'LKOH.MOEX', 'OBLG.MOEX']
    currency = 'RUB'
    
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(symbols)}")
    print(f"üí∞ –í–∞–ª—é—Ç–∞: {currency}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        portfolio_contexts = []
        expanded_symbols = []
        
        for symbol in symbols:
            try:
                asset = ok.Asset(symbol)
                portfolio_contexts.append({
                    'portfolio_object': None,
                    'portfolio_symbols': [symbol]
                })
                expanded_symbols.append(symbol)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞ {symbol}: {e}")
                portfolio_contexts.append({
                    'portfolio_object': None,
                    'portfolio_symbols': [symbol]
                })
                expanded_symbols.append(symbol)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        print(f"\nüîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ _prepare_data_for_analysis
        data_info = await bot._prepare_data_for_analysis(
            symbols=symbols,
            currency=currency,
            expanded_symbols=expanded_symbols,
            portfolio_contexts=portfolio_contexts,
            user_id=12345
        )
        
        print(f"\nüìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"   –°–∏–º–≤–æ–ª—ã: {data_info.get('symbols', [])}")
        print(f"   –í–∞–ª—é—Ç–∞: {data_info.get('currency', 'N/A')}")
        print(f"   –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {data_info.get('analysis_type', 'N/A')}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤: {data_info.get('asset_count', 0)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –º–µ—Ç—Ä–∏–∫
        summary_table = data_info.get('summary_metrics_table', '')
        describe_table = data_info.get('describe_table', '')
        
        print(f"\nüìä –¢–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫:")
        print(f"   –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫: {'‚úÖ –ï—Å—Ç—å' if summary_table else '‚ùå –ù–µ—Ç'}")
        print(f"   –¢–∞–±–ª–∏—Ü–∞ describe: {'‚úÖ –ï—Å—Ç—å' if describe_table else '‚ùå –ù–µ—Ç'}")
        
        if summary_table:
            print(f"\nüìã –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(summary_table[:500] + "..." if len(summary_table) > 500 else summary_table)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance = data_info.get('performance', {})
        print(f"\nüìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        for symbol, metrics in performance.items():
            print(f"   {symbol}:")
            for metric, value in metrics.items():
                if value is not None:
                    if isinstance(value, float):
                        if 'return' in metric.lower() or 'drawdown' in metric.lower():
                            print(f"     {metric}: {value:.2%}")
                        else:
                            print(f"     {metric}: {value:.4f}")
                    else:
                        print(f"     {metric}: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        correlations = data_info.get('correlations', [])
        print(f"\nüîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {'‚úÖ –ï—Å—Ç—å' if correlations else '‚ùå –ù–µ—Ç'}")
        
        print(f"\n‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return data_info
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def test_gemini_service_data_description():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Gemini"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Gemini")
    print("=" * 60)
    
    gemini_service = GeminiService()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data_info = {
        'symbols': ['SBER.MOEX', 'LKOH.MOEX', 'OBLG.MOEX'],
        'currency': 'RUB',
        'period': '–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö',
        'analysis_type': 'asset_comparison',
        'asset_count': 3,
        'asset_names': {
            'SBER.MOEX': '–°–±–µ—Ä–±–∞–Ω–∫',
            'LKOH.MOEX': '–õ—É–∫–æ–π–ª',
            'OBLG.MOEX': '–û–§–ó'
        },
        'summary_metrics_table': """
| –ú–µ—Ç—Ä–∏–∫–∞                         | SBER.MOEX   | LKOH.MOEX   | OBLG.MOEX   |
|:--------------------------------|:------------|:------------|:------------|
| –ü–µ—Ä–∏–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π               | 19.1 –ª–µ—Ç    | 22.1 –ª–µ—Ç    | 6.6 –ª–µ—Ç     |
| –°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (CAGR) | 14.51%      | 17.50%      | 9.60%       |
| –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å                   | 43.46%      | 35.90%      | 6.59%       |
| –ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞              | 33.70%      | 33.70%      | 33.70%      |
| –ö–æ—ç—Ñ—Ñ. –®–∞—Ä–ø–∞                    | -0.44       | -0.45       | -3.66       |
| –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞                  | -87.29%     | -71.84%     | -15.87%     |
| –ö–æ—ç—Ñ. –°–æ—Ä—Ç–∏–Ω–æ                   | -8.97       | -9.53       | -46.75      |
| –ö–æ—ç—Ñ. –ö–∞–ª—å–º–∞—Ä–∞                  | 0.17        | 0.24        | 0.60        |
| VaR 95%                         | -3.54%      | -2.98%      | -0.29%      |
| CVaR 95%                        | -6.00%      | -4.92%      | -0.69%      |
        """,
        'describe_table': """
|   –ú–µ—Ç—Ä–∏–∫–∞ | SBER.MOEX   | LKOH.MOEX   | OBLG.MOEX   |
|----------:|:------------|:------------|:------------|
|         0 | 0.2442      | -0.1123     | 0.2259      |
|         1 | 0.3529      | 0.0362      | 0.2746      |
|         2 | 0.1789      | 0.1377      | 0.0901      |
        """,
        'performance': {
            'SBER.MOEX': {
                'total_return': 0.1451,
                'annual_return': 0.1451,
                'volatility': 0.4346,
                'sharpe_ratio': -0.44,
                'sortino_ratio': -8.97,
                'max_drawdown': -0.8729
            },
            'LKOH.MOEX': {
                'total_return': 0.1750,
                'annual_return': 0.1750,
                'volatility': 0.3590,
                'sharpe_ratio': -0.45,
                'sortino_ratio': -9.53,
                'max_drawdown': -0.7184
            },
            'OBLG.MOEX': {
                'total_return': 0.0960,
                'annual_return': 0.0960,
                'volatility': 0.0659,
                'sharpe_ratio': -3.66,
                'sortino_ratio': -46.75,
                'max_drawdown': -0.1587
            }
        },
        'correlations': [
            [1.0, 0.3, 0.1],
            [0.3, 1.0, 0.2],
            [0.1, 0.2, 1.0]
        ]
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        description = gemini_service._prepare_data_description(test_data_info)
        
        print(f"\nüìã –°–æ–∑–¥–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
        print("=" * 60)
        print(description)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        checks = [
            ("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã", "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã:" in description),
            ("–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", "üìä –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò –ê–ö–¢–ò–í–û–í:" in description),
            ("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê" in description),
            ("–ü–µ—Ä–∏–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", "–ü–µ—Ä–∏–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π" in description),
            ("CAGR", "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (CAGR)" in description),
            ("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å" in description),
            ("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞", "–ö–æ—ç—Ñ—Ñ. –®–∞—Ä–ø–∞" in description),
            ("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", "–ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:" in description)
        ]
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è:")
        for check_name, check_result in checks:
            status = "‚úÖ" if check_result else "‚ùå"
            print(f"   {status} {check_name}")
        
        all_checks_passed = all(check_result for _, check_result in checks)
        
        if all_checks_passed:
            print(f"\n‚úÖ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
        else:
            print(f"\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        return description
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        return None

def test_gemini_analysis_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ Gemini"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Gemini")
    print("=" * 60)
    
    gemini_service = GeminiService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
    if not gemini_service.is_available():
        print("‚ùå Gemini —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    print("‚úÖ Gemini —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data_info = {
        'symbols': ['SBER.MOEX', 'LKOH.MOEX'],
        'currency': 'RUB',
        'period': '–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö',
        'analysis_type': 'asset_comparison',
        'asset_count': 2,
        'asset_names': {
            'SBER.MOEX': '–°–±–µ—Ä–±–∞–Ω–∫',
            'LKOH.MOEX': '–õ—É–∫–æ–π–ª'
        },
        'summary_metrics_table': """
| –ú–µ—Ç—Ä–∏–∫–∞                         | SBER.MOEX   | LKOH.MOEX   |
|:--------------------------------|:------------|:------------|
| –ü–µ—Ä–∏–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π               | 19.1 –ª–µ—Ç    | 22.1 –ª–µ—Ç    |
| –°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (CAGR) | 14.51%      | 17.50%      |
| –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å                   | 43.46%      | 35.90%      |
| –ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞              | 33.70%      | 33.70%      |
| –ö–æ—ç—Ñ—Ñ. –®–∞—Ä–ø–∞                    | -0.44       | -0.45       |
| –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞                  | -87.29%     | -71.84%     |
        """,
        'performance': {
            'SBER.MOEX': {
                'annual_return': 0.1451,
                'volatility': 0.4346,
                'sharpe_ratio': -0.44,
                'max_drawdown': -0.8729
            },
            'LKOH.MOEX': {
                'annual_return': 0.1750,
                'volatility': 0.3590,
                'sharpe_ratio': -0.45,
                'max_drawdown': -0.7184
            }
        }
    }
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        print(f"\nü§ñ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...")
        analysis_result = gemini_service.analyze_data(test_data_info)
        
        if analysis_result and analysis_result.get('success'):
            analysis_text = analysis_result.get('analysis', '')
            print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
            print("=" * 60)
            print(analysis_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞
            quality_checks = [
                ("–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤", any(symbol in analysis_text for symbol in ['SBER', 'LKOH', '–°–±–µ—Ä–±–∞–Ω–∫', '–õ—É–∫–æ–π–ª'])),
                ("–ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫", any(metric in analysis_text for metric in ['–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', '–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å', '—Ä–∏—Å–∫', 'Sharpe'])),
                ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", any(word in analysis_text.lower() for word in ['—Ä–µ–∫–æ–º–µ–Ω–¥', '—Å–æ–≤–µ—Ç', '–ª—É—á—à–µ', '–ø—Ä–µ–¥–ø–æ—á—Ç'])),
                ("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ", any(word in analysis_text.lower() for word in ['—Å—Ä–∞–≤–Ω', '–ª—É—á—à–µ', '—Ö—É–∂–µ', '–≤—ã—à–µ', '–Ω–∏–∂–µ']))
            ]
            
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞:")
            for check_name, check_result in quality_checks:
                status = "‚úÖ" if check_result else "‚ùå"
                print(f"   {status} {check_name}")
            
            quality_score = sum(check_result for _, check_result in quality_checks) / len(quality_checks)
            
            if quality_score >= 0.75:
                print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–æ—Ü–µ–Ω–∫–∞: {quality_score:.1%})")
                return True
            else:
                print(f"\n‚ö†Ô∏è  –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–æ—Ü–µ–Ω–∫–∞: {quality_score:.1%})")
                return False
                
        else:
            print(f"‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {analysis_result}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò GEMINI –° –¢–ê–ë–õ–ò–¶–ê–ú–ò –ú–ï–¢–†–ò–ö")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
    data_info = await test_gemini_data_preparation()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    description = test_gemini_service_data_description()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞
    analysis_success = test_gemini_analysis_flow()
    
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 60)
    
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if data_info else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"   - –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if description else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"   - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if analysis_success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    if data_info and description and analysis_success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –º–µ—Ç—Ä–∏–∫ —Å Gemini –∞–Ω–∞–ª–∏–∑–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
