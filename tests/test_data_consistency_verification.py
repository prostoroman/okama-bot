#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É Gemini –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ –º–µ—Ç—Ä–∏–∫
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot import ShansAi
import okama as ok

def test_data_source_consistency():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    bot = ShansAi()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    symbols = ['SBER.MOEX', 'LKOH.MOEX', 'OBLG.MOEX']
    currency = 'RUB'
    
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(symbols)}")
    print(f"üí∞ –í–∞–ª—é—Ç–∞: {currency}")
    
    data_sources = {}
    
    for symbol in symbols:
        try:
            asset = ok.Asset(symbol)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            sources = []
            
            if hasattr(asset, 'adj_close') and asset.adj_close is not None:
                sources.append(('adj_close', len(asset.adj_close)))
            
            if hasattr(asset, 'close_monthly') and asset.close_monthly is not None:
                sources.append(('close_monthly', len(asset.close_monthly)))
            
            if hasattr(asset, 'close_daily') and asset.close_daily is not None:
                sources.append(('close_daily', len(asset.close_daily)))
            
            if hasattr(asset, 'wealth_index') and asset.wealth_index is not None:
                sources.append(('wealth_index', len(asset.wealth_index)))
            
            data_sources[symbol] = sources
            
            print(f"\nüìä {symbol}:")
            for source_name, length in sources:
                print(f"   {source_name}: {length} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
            if hasattr(asset, 'adj_close') and asset.adj_close is not None:
                selected_source = 'adj_close'
                selected_data = asset.adj_close
            elif hasattr(asset, 'close_monthly') and asset.close_monthly is not None:
                selected_source = 'close_monthly'
                selected_data = asset.close_monthly
            elif hasattr(asset, 'close_daily') and asset.close_daily is not None:
                selected_source = 'close_daily'
                selected_data = asset.close_daily
            else:
                selected_source = 'none'
                selected_data = None
            
            print(f"   ‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {selected_source}")
            
            if selected_data is not None:
                print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {selected_data.index[0]} - {selected_data.index[-1]}")
                print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {len(selected_data)}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
            data_sources[symbol] = []
    
    return data_sources

async def test_metrics_calculation_consistency():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫")
    print("=" * 60)
    
    bot = ShansAi()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    symbols = ['SBER.MOEX', 'LKOH.MOEX']
    currency = 'RUB'
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
    portfolio_contexts = []
    expanded_symbols = []
    
    for symbol in symbols:
        try:
            asset = ok.Asset(symbol)
            portfolio_contexts.append({
                'portfolio_object': None,
                'portfolio_symbols': [symbol]
            })
            expanded_symbols.append(symbol)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞ {symbol}: {e}")
            portfolio_contexts.append({
                'portfolio_object': None,
                'portfolio_symbols': [symbol]
            })
            expanded_symbols.append(symbol)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫
        summary_table = bot._create_summary_metrics_table(
            symbols=symbols,
            currency=currency,
            expanded_symbols=expanded_symbols,
            portfolio_contexts=portfolio_contexts,
            specified_period=None
        )
        
        print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   –†–∞–∑–º–µ—Ä: {len(summary_table)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        key_metrics = [
            '–ü–µ—Ä–∏–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π',
            '–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (CAGR)',
            '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å',
            '–ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞',
            '–ö–æ—ç—Ñ—Ñ. –®–∞—Ä–ø–∞',
            '–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞',
            '–ö–æ—ç—Ñ. –°–æ—Ä—Ç–∏–Ω–æ',
            '–ö–æ—ç—Ñ. –ö–∞–ª—å–º–∞—Ä–∞',
            'VaR 95%',
            'CVaR 95%'
        ]
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ—Ç—Ä–∏–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ:")
        for metric in key_metrics:
            present = metric in summary_table
            status = "‚úÖ" if present else "‚ùå"
            print(f"   {status} {metric}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Gemini –∞–Ω–∞–ª–∏–∑–∞
        data_info = await bot._prepare_data_for_analysis(
            symbols=symbols,
            currency=currency,
            expanded_symbols=expanded_symbols,
            portfolio_contexts=portfolio_contexts,
            user_id=12345
        )
        
        print(f"\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è Gemini –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        print(f"   –°–∏–º–≤–æ–ª—ã: {data_info.get('symbols', [])}")
        print(f"   –í–∞–ª—é—Ç–∞: {data_info.get('currency', 'N/A')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Gemini
        gemini_summary_table = data_info.get('summary_metrics_table', '')
        gemini_performance = data_info.get('performance', {})
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Gemini:")
        print(f"   ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫: {'–ï—Å—Ç—å' if gemini_summary_table else '–ù–µ—Ç'}")
        print(f"   ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {'–ï—Å—Ç—å' if gemini_performance else '–ù–µ—Ç'}")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables_match = summary_table == gemini_summary_table
        print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã: {'–î–∞' if tables_match else '–ù–µ—Ç'}")
        
        if not tables_match:
            print(f"   ‚ö†Ô∏è  –†–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {len(summary_table)}")
            print(f"   ‚ö†Ô∏è  –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è Gemini: {len(gemini_summary_table)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫:")
        
        duplicated_metrics = []
        for symbol in symbols:
            if symbol in gemini_performance:
                perf_metrics = gemini_performance[symbol]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –∏ –≤ —Ç–∞–±–ª–∏—Ü–µ, –∏ –≤ performance
                if 'annual_return' in perf_metrics and 'CAGR' in summary_table:
                    duplicated_metrics.append(f"{symbol}: annual_return/CAGR")
                
                if 'volatility' in perf_metrics and '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å' in summary_table:
                    duplicated_metrics.append(f"{symbol}: volatility/–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
                
                if 'sharpe_ratio' in perf_metrics and '–®–∞—Ä–ø–∞' in summary_table:
                    duplicated_metrics.append(f"{symbol}: sharpe_ratio/–ö–æ—ç—Ñ—Ñ. –®–∞—Ä–ø–∞")
                
                if 'max_drawdown' in perf_metrics and '–ø—Ä–æ—Å–∞–¥–∫–∞' in summary_table:
                    duplicated_metrics.append(f"{symbol}: max_drawdown/–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞")
        
        if duplicated_metrics:
            print(f"   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
            for dup in duplicated_metrics:
                print(f"     - {dup}")
        else:
            print(f"   ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return {
            'tables_match': tables_match,
            'duplicated_metrics': duplicated_metrics,
            'summary_table_size': len(summary_table),
            'gemini_table_size': len(gemini_summary_table)
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return None

def test_assetlist_data_consistency():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö AssetList —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö AssetList")
    print("=" * 60)
    
    symbols = ['SBER.MOEX', 'LKOH.MOEX']
    currency = 'RUB'
    
    try:
        # –°–æ–∑–¥–∞–µ–º AssetList –∫–∞–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        asset_list = ok.AssetList(symbols, ccy=currency)
        
        print(f"üìä AssetList —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")
        print(f"üí∞ –í–∞–ª—é—Ç–∞: {currency}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ AssetList
        if hasattr(asset_list, 'wealth_indexes'):
            wealth_indexes = asset_list.wealth_indexes
            print(f"\nüìà Wealth indexes:")
            print(f"   –†–∞–∑–º–µ—Ä: {wealth_indexes.shape}")
            print(f"   –°–∏–º–≤–æ–ª—ã: {list(wealth_indexes.columns)}")
            print(f"   –ü–µ—Ä–∏–æ–¥: {wealth_indexes.index[0]} - {wealth_indexes.index[-1]}")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
        print(f"\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏:")
        
        for symbol in symbols:
            try:
                asset = ok.Asset(symbol)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–º—É –∂–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, —á—Ç–æ –∏ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö
                if hasattr(asset, 'adj_close') and asset.adj_close is not None:
                    asset_data = asset.adj_close
                    source = 'adj_close'
                elif hasattr(asset, 'close_monthly') and asset.close_monthly is not None:
                    asset_data = asset.close_monthly
                    source = 'close_monthly'
                elif hasattr(asset, 'close_daily') and asset.close_daily is not None:
                    asset_data = asset.close_daily
                    source = 'close_daily'
                else:
                    asset_data = None
                    source = 'none'
                
                print(f"\nüìä {symbol}:")
                print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {source}")
                
                if asset_data is not None:
                    print(f"   –ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∞: {asset_data.index[0]} - {asset_data.index[-1]}")
                    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –∞–∫—Ç–∏–≤–∞: {len(asset_data)}")
                    
                    if hasattr(asset_list, 'wealth_indexes') and symbol in asset_list.wealth_indexes.columns:
                        assetlist_data = asset_list.wealth_indexes[symbol]
                        print(f"   –ü–µ—Ä–∏–æ–¥ AssetList: {assetlist_data.index[0]} - {assetlist_data.index[-1]}")
                        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ AssetList: {len(assetlist_data)}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
                        periods_match = (asset_data.index[0] == assetlist_data.index[0] and 
                                       asset_data.index[-1] == assetlist_data.index[-1])
                        print(f"   ‚úÖ –ü–µ—Ä–∏–æ–¥—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç: {'–î–∞' if periods_match else '–ù–µ—Ç'}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫
                        counts_match = len(asset_data) == len(assetlist_data)
                        print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {'–î–∞' if counts_match else '–ù–µ—Ç'}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ AssetList: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    data_sources = test_data_source_consistency()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –º–µ—Ç—Ä–∏–∫
    metrics_result = await test_metrics_calculation_consistency()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å AssetList
    assetlist_result = test_assetlist_data_consistency()
    
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 60)
    
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   - –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã' if data_sources else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"   - –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –º–µ—Ç—Ä–∏–∫: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if metrics_result else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"   - –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å AssetList: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if assetlist_result else '‚ùå –û—à–∏–±–∫–∞'}")
    
    if metrics_result:
        print(f"\nüìä –î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫:")
        print(f"   - –¢–∞–±–ª–∏—Ü—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã: {'‚úÖ –î–∞' if metrics_result['tables_match'] else '‚ùå –ù–µ—Ç'}")
        print(f"   - –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {'‚ùå –ï—Å—Ç—å' if metrics_result['duplicated_metrics'] else '‚úÖ –ù–µ—Ç'}")
        
        if metrics_result['duplicated_metrics']:
            print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(metrics_result['duplicated_metrics'])}")
    
    if data_sources and metrics_result and assetlist_result and metrics_result['tables_match'] and not metrics_result['duplicated_metrics']:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
