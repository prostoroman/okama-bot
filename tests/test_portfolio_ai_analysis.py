#!/usr/bin/env python3
"""
Test script for portfolio AI analysis functionality
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot import ShansAi
import okama as ok

async def test_portfolio_ai_analysis():
    """Test the new portfolio AI analysis functionality"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI-–∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    print("=" * 50)
    
    # Initialize bot
    bot = ShansAi()
    
    # Test portfolio
    symbols = ['SPY.US', 'QQQ.US', 'BND.US']
    weights = [0.5, 0.3, 0.2]
    currency = 'USD'
    user_id = 12345
    
    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:")
    print(f"   –°–∏–º–≤–æ–ª—ã: {symbols}")
    print(f"   –í–µ—Å–∞: {weights}")
    print(f"   –í–∞–ª—é—Ç–∞: {currency}")
    
    try:
        # Create portfolio object
        portfolio = ok.Portfolio(symbols, weights=weights, ccy=currency)
        print(f"‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # Test portfolio data preparation
        print(f"\nüîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        portfolio_data = await bot._prepare_portfolio_data_for_analysis(
            portfolio=portfolio,
            symbols=symbols,
            weights=weights,
            currency=currency,
            user_id=user_id
        )
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        print(f"   –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {portfolio_data.get('analysis_type', 'N/A')}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤: {len(portfolio_data.get('symbols', []))}")
        print(f"   –ï—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {'–î–∞' if portfolio_data.get('portfolio_metrics_table') else '–ù–µ—Ç'}")
        print(f"   –ï—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–æ–≤: {'–î–∞' if portfolio_data.get('individual_assets_metrics') else '–ù–µ—Ç'}")
        print(f"   –ï—Å—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {'–î–∞' if portfolio_data.get('correlations') else '–ù–µ—Ç'}")
        print(f"   –ï—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞: {'–î–∞' if portfolio_data.get('efficient_frontier') else '–ù–µ—Ç'}")
        
        # Test Gemini service availability
        if bot.gemini_service and bot.gemini_service.is_available():
            print(f"\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini –∞–Ω–∞–ª–∏–∑–∞...")
            
            # Test portfolio analysis
            portfolio_analysis = bot.gemini_service.analyze_portfolio(portfolio_data)
            
            if portfolio_analysis and portfolio_analysis.get('success'):
                analysis_text = portfolio_analysis.get('analysis', '')
                print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"   –î–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(analysis_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {portfolio_analysis.get('analysis_type', 'N/A')}")
                
                # Show first 200 characters of analysis
                if analysis_text:
                    print(f"\nüìù –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞:")
                    print(f"   {analysis_text[:200]}...")
            else:
                error_msg = portfolio_analysis.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if portfolio_analysis else '–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω'
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {error_msg}")
        else:
            print(f"‚ö†Ô∏è Gemini —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞")
        
        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_portfolio_ai_analysis())
