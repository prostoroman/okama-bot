#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è okama-bot
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
"""

import sys
import os
import argparse
import subprocess
import time
from datetime import datetime
from typing import List, Dict, Any

# Add the parent directory to the path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from tests.test_utilities import TestReporter, TestRunner


class TestSuiteRunner:
    """–ó–∞–ø—É—Å–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.reporter = TestReporter()
        self.test_modules = {
            'comprehensive': 'test_comprehensive_regression',
            'simple': 'test_simple_regression',
            'portfolio_risk': 'test_portfolio_risk_metrics_fix',
            'additional_metrics': 'test_additional_metrics_calculation',
            'hk_comparison': 'test_hk_comparison_debug',
            'test_command': 'test_test_command'
        }
    
    def run_single_test(self, test_module: str, verbose: bool = False) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å"""
        if test_module not in self.test_modules:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å: {test_module}")
            return False
        
        module_name = self.test_modules[test_module]
        test_file = f"tests/{module_name}.py"
        
        if not os.path.exists(test_file):
            print(f"‚ùå –§–∞–π–ª —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
            return False
        
        print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_module}")
        print(f"üìÅ –§–∞–π–ª: {test_file}")
        print("-" * 50)
        
        start_time = time.time()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ subprocess
            cmd = [sys.executable, test_file]
            if verbose:
                cmd.append('-v')
            
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=os.path.dirname(os.path.dirname(__file__)))
            
            duration = time.time() - start_time
            
            if result.returncode == 0:
                print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                self.reporter.add_test_result(test_module, "passed", duration=duration)
                return True
            else:
                print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω")
                print(f"–û—à–∏–±–∫–∞: {result.stderr}")
                self.reporter.add_test_result(test_module, "failed", result.stderr, duration)
                return False
                
        except Exception as e:
            duration = time.time() - start_time
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞: {e}")
            self.reporter.add_test_result(test_module, "failed", str(e), duration)
            return False
    
    def run_all_tests(self, verbose: bool = False) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        self.reporter.start_test_suite()
        
        all_passed = True
        
        for test_module in self.test_modules.keys():
            success = self.run_single_test(test_module, verbose)
            if not success:
                all_passed = False
            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        self.reporter.end_test_suite()
        return all_passed
    
    def run_regression_tests(self, verbose: bool = False) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        self.reporter.start_test_suite()
        
        regression_tests = ['comprehensive', 'portfolio_risk', 'additional_metrics']
        all_passed = True
        
        for test_module in regression_tests:
            success = self.run_single_test(test_module, verbose)
            if not success:
                all_passed = False
            print()
        
        self.reporter.end_test_suite()
        return all_passed
    
    def run_quick_tests(self, verbose: bool = False) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã"""
        self.reporter.start_test_suite()
        
        quick_tests = ['comprehensive']  # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        all_passed = True
        
        for test_module in quick_tests:
            success = self.run_single_test(test_module, verbose)
            if not success:
                all_passed = False
            print()
        
        self.reporter.end_test_suite()
        return all_passed
    
    def list_available_tests(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        print("-" * 30)
        
        for key, module in self.test_modules.items():
            test_file = f"tests/{module}.py"
            exists = "‚úÖ" if os.path.exists(test_file) else "‚ùå"
            print(f"{exists} {key:15} - {module}")
        
        print()
        print("üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python tests/test_runner.py --test comprehensive")
        print("  python tests/test_runner.py --all")
        print("  python tests/test_runner.py --regression")
        print("  python tests/test_runner.py --quick")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è okama-bot')
    parser.add_argument('--test', choices=['comprehensive', 'simple', 'portfolio_risk', 'additional_metrics', 'hk_comparison', 'test_command'],
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç')
    parser.add_argument('--all', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã')
    parser.add_argument('--regression', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã')
    parser.add_argument('--quick', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã')
    parser.add_argument('--simple', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã')
    parser.add_argument('--list', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã')
    parser.add_argument('--verbose', '-v', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    
    args = parser.parse_args()
    
    runner = TestSuiteRunner()
    
    if args.list:
        runner.list_available_tests()
        return
    
    if args.test:
        success = runner.run_single_test(args.test, args.verbose)
        sys.exit(0 if success else 1)
    
    elif args.all:
        success = runner.run_all_tests(args.verbose)
        sys.exit(0 if success else 1)
    
    elif args.regression:
        success = runner.run_regression_tests(args.verbose)
        sys.exit(0 if success else 1)
    
    elif args.quick:
        success = runner.run_quick_tests(args.verbose)
        sys.exit(0 if success else 1)
    
    elif args.simple:
        success = runner.run_single_test('simple', args.verbose)
        sys.exit(0 if success else 1)
    
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        success = runner.run_single_test('simple', args.verbose)
        sys.exit(0 if success else 1)


if __name__ == '__main__':
    main()
