#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
"""

import unittest
from unittest.mock import AsyncMock, MagicMock, patch
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot import ShansAi


class TestPortfolioMarkdownFix(unittest.TestCase):
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.bot = ShansAi()
        self.bot.logger = MagicMock()
        
    @patch('bot.ShansAi._update_user_context')
    @patch('bot.ShansAi._send_callback_message')
    async def test_portfolio_button_markdown_formatting(self, mock_send_callback, mock_update_context):
        """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        update = MagicMock()
        context = MagicMock()
        update.callback_query = MagicMock()
        update.callback_query.edit_message_reply_markup = AsyncMock()
        update.effective_user.id = 12345
        
        symbol = "AAPL.US"
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        await self.bot._handle_info_portfolio_button(update, context, symbol)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ _send_callback_message –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å parse_mode='Markdown'
        mock_send_callback.assert_called_once()
        call_args = mock_send_callback.call_args
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞
        self.assertEqual(call_args[0][0], update)  # update
        self.assertEqual(call_args[0][1], context)  # context
        self.assertIn("üíº **–î–æ–±–∞–≤–∏—Ç—å AAPL.US –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å**", call_args[0][2])  # text —Å–æ–¥–µ—Ä–∂–∏—Ç markdown
        self.assertEqual(call_args[0][3], 'Markdown')  # parse_mode
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        message_text = call_args[0][2]
        self.assertIn("**–î–æ–±–∞–≤–∏—Ç—å AAPL.US –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å**", message_text)
        self.assertIn("**–ü—Ä–∏–º–µ—Ä—ã:**", message_text)
        self.assertIn("`AAPL.US:0.6 QQQ.US:0.4`", message_text)
        
    @patch('bot.ShansAi._update_user_context')
    @patch('bot.ShansAi._send_callback_message')
    async def test_portfolio_button_error_markdown_formatting(self, mock_send_callback, mock_update_context):
        """–¢–µ—Å—Ç markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ"""
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        update = MagicMock()
        context = MagicMock()
        update.callback_query = MagicMock()
        update.callback_query.edit_message_reply_markup = AsyncMock()
        update.effective_user.id = 12345
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        mock_update_context.side_effect = Exception("Test error")
        
        symbol = "AAPL.US"
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        await self.bot._handle_info_portfolio_button(update, context, symbol)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ _send_callback_message –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å parse_mode='Markdown' –¥–ª—è –æ—à–∏–±–∫–∏
        mock_send_callback.assert_called_once()
        call_args = mock_send_callback.call_args
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞
        self.assertEqual(call_args[0][0], update)  # update
        self.assertEqual(call_args[0][1], context)  # context
        self.assertIn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è: Test error", call_args[0][2])  # text –æ—à–∏–±–∫–∏
        self.assertEqual(call_args[0][3], 'Markdown')  # parse_mode


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    unittest.main()
