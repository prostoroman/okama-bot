#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /test –≤ –±–æ—Ç–µ
"""

import unittest
import sys
import os
import asyncio
from unittest.mock import Mock, AsyncMock, patch

# Add the parent directory to the path to import bot module
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot import ShansAi


class TestTestCommand(unittest.TestCase):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /test"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.bot = ShansAi()
        
        # Mock Telegram objects
        self.mock_update = Mock()
        self.mock_context = Mock()
        
        # Setup mock update
        self.mock_update.effective_user = Mock()
        self.mock_update.effective_user.id = 12345
        self.mock_update.effective_user.first_name = "TestUser"
        
        # Setup mock context
        self.mock_context.bot = Mock()
        self.mock_context.bot.send_message = AsyncMock()
        self.mock_context.args = []
    
    def test_test_command_without_args(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /test –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å quick)"""
        async def run_test():
            with patch.object(self.bot, '_run_tests', new_callable=AsyncMock) as mock_run_tests:
                mock_run_tests.return_value = {
                    'success': True,
                    'stdout': 'Test passed',
                    'stderr': '',
                    'duration': 1.5,
                    'test_type': 'quick'
                }
                
                await self.bot.test_command(self.mock_update, self.mock_context)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ _run_tests –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å 'quick'
                mock_run_tests.assert_called_once_with('quick')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                self.mock_context.bot.send_message.assert_called()
                print("‚úÖ Test command without args test passed")
        
        asyncio.run(run_test())
    
    def test_test_command_with_args(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /test —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
        async def run_test():
            # –¢–µ—Å—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º 'all'
            self.mock_context.args = ['all']
            
            with patch.object(self.bot, '_run_tests', new_callable=AsyncMock) as mock_run_tests:
                mock_run_tests.return_value = {
                    'success': True,
                    'stdout': 'All tests passed',
                    'stderr': '',
                    'duration': 5.0,
                    'test_type': 'all'
                }
                
                await self.bot.test_command(self.mock_update, self.mock_context)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ _run_tests –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å 'all'
                mock_run_tests.assert_called_once_with('all')
                print("‚úÖ Test command with 'all' arg test passed")
        
        asyncio.run(run_test())
    
    def test_test_command_invalid_arg(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /test —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å quick)"""
        async def run_test():
            # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
            self.mock_context.args = ['invalid']
            
            with patch.object(self.bot, '_run_tests', new_callable=AsyncMock) as mock_run_tests:
                mock_run_tests.return_value = {
                    'success': True,
                    'stdout': 'Test passed',
                    'stderr': '',
                    'duration': 1.5,
                    'test_type': 'quick'
                }
                
                await self.bot.test_command(self.mock_update, self.mock_context)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ _run_tests –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å 'quick' (fallback)
                mock_run_tests.assert_called_once_with('quick')
                print("‚úÖ Test command with invalid arg test passed")
        
        asyncio.run(run_test())
    
    def test_run_tests_success(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ _run_tests –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"""
        async def run_test():
            with patch('subprocess.run') as mock_run:
                mock_run.return_value = Mock(
                    returncode=0,
                    stdout='Test passed\n',
                    stderr=''
                )
                
                result = await self.bot._run_tests('quick')
                
                self.assertTrue(result['success'])
                self.assertEqual(result['stdout'], 'Test passed\n')
                self.assertEqual(result['stderr'], '')
                self.assertEqual(result['test_type'], 'quick')
                self.assertGreater(result['duration'], 0)
                print("‚úÖ Run tests success test passed")
        
        asyncio.run(run_test())
    
    def test_run_tests_failure(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ _run_tests –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"""
        async def run_test():
            with patch('subprocess.run') as mock_run:
                mock_run.return_value = Mock(
                    returncode=1,
                    stdout='',
                    stderr='Test failed\n'
                )
                
                result = await self.bot._run_tests('quick')
                
                self.assertFalse(result['success'])
                self.assertEqual(result['stdout'], '')
                self.assertEqual(result['stderr'], 'Test failed\n')
                self.assertEqual(result['test_type'], 'quick')
                print("‚úÖ Run tests failure test passed")
        
        asyncio.run(run_test())
    
    def test_run_tests_timeout(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ _run_tests –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ"""
        async def run_test():
            with patch('subprocess.run') as mock_run:
                mock_run.side_effect = Exception('Timeout')
                
                result = await self.bot._run_tests('quick')
                
                self.assertFalse(result['success'])
                self.assertIn('Timeout', result['stderr'])
                self.assertEqual(result['test_type'], 'quick')
                print("‚úÖ Run tests timeout test passed")
        
        asyncio.run(run_test())
    
    def test_format_test_results_success(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ"""
        result = {
            'success': True,
            'stdout': 'Test passed\nAll good',
            'stderr': '',
            'duration': 1.5,
            'test_type': 'quick'
        }
        
        formatted = self.bot._format_test_results(result, 'quick')
        
        self.assertIn('‚úÖ', formatted)
        self.assertIn('–ü—Ä–æ–π–¥–µ–Ω—ã', formatted)
        self.assertIn('quick', formatted)
        self.assertIn('1.5', formatted)
        self.assertIn('Test passed', formatted)
        print("‚úÖ Format test results success test passed")
    
    def test_format_test_results_failure(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ"""
        result = {
            'success': False,
            'stdout': 'Some output',
            'stderr': 'Test failed\nError message',
            'duration': 2.0,
            'test_type': 'regression'
        }
        
        formatted = self.bot._format_test_results(result, 'regression')
        
        self.assertIn('‚ùå', formatted)
        self.assertIn('–ü—Ä–æ–≤–∞–ª–µ–Ω—ã', formatted)
        self.assertIn('regression', formatted)
        self.assertIn('2.0', formatted)
        self.assertIn('Test failed', formatted)
        self.assertIn('Error message', formatted)
        print("‚úÖ Format test results failure test passed")
    
    def test_format_test_results_long_output(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –¥–ª–∏–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
        # –°–æ–∑–¥–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –≤—ã–≤–æ–¥
        long_output = '\n'.join([f'Line {i}' for i in range(50)])
        
        result = {
            'success': True,
            'stdout': long_output,
            'stderr': '',
            'duration': 1.0,
            'test_type': 'all'
        }
        
        formatted = self.bot._format_test_results(result, 'all')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–≤–æ–¥ –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω
        self.assertIn('Line 30', formatted)  # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        self.assertNotIn('Line 0', formatted)  # –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω—ã
        print("‚úÖ Format test results long output test passed")
    
    def test_format_test_results_message_length_limit(self):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –≤—ã–≤–æ–¥
        very_long_output = 'A' * 5000
        
        result = {
            'success': True,
            'stdout': very_long_output,
            'stderr': '',
            'duration': 1.0,
            'test_type': 'comprehensive'
        }
        
        formatted = self.bot._format_test_results(result, 'comprehensive')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ
        self.assertLess(len(formatted), 4000)
        self.assertIn('... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)', formatted)
        print("‚úÖ Format test results message length limit test passed")


if __name__ == '__main__':
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /test")
    unittest.main(verbosity=2)
