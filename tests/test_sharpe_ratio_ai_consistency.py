#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ Sharpe Ratio –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–æ–π "–ú–µ—Ç—Ä–∏–∫–∏" –∏ AI-–∞–Ω–∞–ª–∏–∑–æ–º
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import okama as ok
import pandas as pd
import asyncio
from bot import ShansAi

def test_sharpe_ratio_consistency():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å Sharpe Ratio –º–µ–∂–¥—É –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ AI-–∞–Ω–∞–ª–∏–∑–æ–º"""
    
    print("üîç –¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ Sharpe Ratio")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ShansAi()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    symbols = ['AAPL.US', 'TSLA.US']
    currency = 'USD'
    expanded_symbols = symbols
    portfolio_contexts = []
    user_id = 12345
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã: {symbols}")
    print(f"–í–∞–ª—é—Ç–∞: {currency}")
    print()
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫ (–∫–Ω–æ–ø–∫–∞ "–ú–µ—Ç—Ä–∏–∫–∏")
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫ (–∫–Ω–æ–ø–∫–∞ '–ú–µ—Ç—Ä–∏–∫–∏')...")
    metrics_table = bot._create_summary_metrics_table(
        symbols=symbols,
        currency=currency,
        expanded_symbols=expanded_symbols,
        portfolio_contexts=portfolio_contexts,
        specified_period=None
    )
    
    # 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞
    print("2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞...")
    
    async def prepare_ai_data():
        return await bot._prepare_data_for_analysis(
            symbols=symbols,
            currency=currency,
            expanded_symbols=expanded_symbols,
            portfolio_contexts=portfolio_contexts,
            user_id=user_id
        )
    
    data_info = asyncio.run(prepare_ai_data())
    ai_table = data_info['summary_metrics_table']
    
    # 3. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ Sharpe Ratio
    print("3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ Sharpe Ratio...")
    
    def extract_sharpe_ratio_line(table):
        lines = table.split('\n')
        for line in lines:
            if 'Sharpe Ratio' in line:
                return line
        return None
    
    metrics_sharpe_line = extract_sharpe_ratio_line(metrics_table)
    ai_sharpe_line = extract_sharpe_ratio_line(ai_table)
    
    print(f"Sharpe Ratio (–ú–µ—Ç—Ä–∏–∫–∏): {metrics_sharpe_line}")
    print(f"Sharpe Ratio (AI):      {ai_sharpe_line}")
    print()
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏...")
    
    if metrics_sharpe_line == ai_sharpe_line:
        print("‚úÖ –°–¢–†–û–ö–ò SHARPE RATIO –ò–î–ï–ù–¢–ò–ß–ù–´!")
        print("–î–∞–Ω–Ω—ã–µ Sharpe Ratio –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ AI-–∞–Ω–∞–ª–∏–∑.")
    else:
        print("‚ùå –°–¢–†–û–ö–ò SHARPE RATIO –†–ê–ó–õ–ò–ß–ê–Æ–¢–°–Ø!")
        print("–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö –≤ AI-–∞–Ω–∞–ª–∏–∑.")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π...")
    
    def has_numeric_values(line):
        if line is None:
            return False
        return 'N/A' not in line and ('0.244' in line or '0.093' in line)
    
    metrics_has_numeric = has_numeric_values(metrics_sharpe_line)
    ai_has_numeric = has_numeric_values(ai_sharpe_line)
    
    if metrics_has_numeric and ai_has_numeric:
        print("‚úÖ –û–ë–ï –¢–ê–ë–õ–ò–¶–´ –°–û–î–ï–†–ñ–ê–¢ –ß–ò–°–õ–û–í–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø SHARPE RATIO")
        print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    elif metrics_has_numeric and not ai_has_numeric:
        print("‚ùå –¢–û–õ–¨–ö–û –¢–ê–ë–õ–ò–¶–ê –ú–ï–¢–†–ò–ö –°–û–î–ï–†–ñ–ò–¢ –ß–ò–°–õ–û–í–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø")
        print("–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö –≤ AI-–∞–Ω–∞–ª–∏–∑.")
    elif not metrics_has_numeric and ai_has_numeric:
        print("‚ùå –¢–û–õ–¨–ö–û AI –¢–ê–ë–õ–ò–¶–ê –°–û–î–ï–†–ñ–ò–¢ –ß–ò–°–õ–û–í–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø")
        print("–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –º–µ—Ç—Ä–∏–∫.")
    else:
        print("‚ùå –ù–ò –û–î–ù–ê –¢–ê–ë–õ–ò–¶–ê –ù–ï –°–û–î–ï–†–ñ–ò–¢ –ß–ò–°–õ–û–í–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø")
        print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    
    # 6. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π
    print("\n6. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π...")
    
    def extract_sharpe_values(line):
        if line is None:
            return None, None
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã: | Sharpe Ratio | 0.244 | 0.093 |
        parts = line.split('|')
        if len(parts) >= 4:
            try:
                aapl_value = float(parts[2].strip())
                tsla_value = float(parts[3].strip())
                return aapl_value, tsla_value
            except (ValueError, IndexError):
                pass
        return None, None
    
    metrics_values = extract_sharpe_values(metrics_sharpe_line)
    ai_values = extract_sharpe_values(ai_sharpe_line)
    
    if metrics_values[0] is not None and ai_values[0] is not None:
        print(f"AAPL.US Sharpe Ratio:")
        print(f"  –ú–µ—Ç—Ä–∏–∫–∏: {metrics_values[0]:.3f}")
        print(f"  AI:      {ai_values[0]:.3f}")
        print(f"  –†–∞–∑–Ω–∏—Ü–∞: {abs(metrics_values[0] - ai_values[0]):.6f}")
        
        print(f"TSLA.US Sharpe Ratio:")
        print(f"  –ú–µ—Ç—Ä–∏–∫–∏: {metrics_values[1]:.3f}")
        print(f"  AI:      {ai_values[1]:.3f}")
        print(f"  –†–∞–∑–Ω–∏—Ü–∞: {abs(metrics_values[1] - ai_values[1]):.6f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å (–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.001)
        tolerance = 0.001
        aapl_match = abs(metrics_values[0] - ai_values[0]) < tolerance
        tsla_match = abs(metrics_values[1] - ai_values[1]) < tolerance
        
        if aapl_match and tsla_match:
            print("‚úÖ –ó–ù–ê–ß–ï–ù–ò–Ø –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢ –° –¢–û–ß–ù–û–°–¢–¨–Æ –î–û 0.001")
        else:
            print("‚ùå –ó–ù–ê–ß–ï–ù–ò–Ø –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢")
    else:
        print("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ò–ó–í–õ–ï–ß–¨ –ß–ò–°–õ–û–í–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø")
    
    print("\n" + "=" * 50)
    print("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")

if __name__ == "__main__":
    test_sharpe_ratio_consistency()
