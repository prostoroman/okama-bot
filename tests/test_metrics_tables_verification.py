#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è —Å–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü –º–µ—Ç—Ä–∏–∫:
1. –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ (—Ä—É—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã)
2. –¢–∞–±–ª–∏—Ü–∞ –∏–∑ okama.AssetList.describe
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot import ShansAi
import okama as ok

def test_metrics_tables_consistency():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–∞–±–ª–∏—Ü–∞–º–∏ –º–µ—Ç—Ä–∏–∫"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü –º–µ—Ç—Ä–∏–∫")
    print("=" * 60)
    
    bot = ShansAi()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    symbols = ['SBER.MOEX', 'LKOH.MOEX', 'OBLG.MOEX', 'GOLD.MOEX']
    currency = 'RUB'
    
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(symbols)}")
    print(f"üí∞ –í–∞–ª—é—Ç–∞: {currency}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º AssetList –¥–ª—è describe –¥–∞–Ω–Ω—ã—Ö
        asset_list = ok.AssetList(symbols, ccy=currency)
        describe_data = asset_list.describe()
        
        print(f"\nüìà –î–∞–Ω–Ω—ã–µ –∏–∑ okama.AssetList.describe:")
        print(f"   –†–∞–∑–º–µ—Ä: {describe_data.shape}")
        print(f"   –ú–µ—Ç—Ä–∏–∫–∏: {list(describe_data.index)}")
        print(f"   –°–∏–º–≤–æ–ª—ã: {list(describe_data.columns)}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        manual_metrics = {}
        
        for symbol in symbols:
            try:
                asset = ok.Asset(symbol)
                returns = asset.ror
                prices = (1 + returns).cumprod()
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä—É—á–Ω—É—é
                total_return = (prices.iloc[-1] / prices.iloc[0]) - 1
                years = len(prices) / 12.0
                cagr = (1 + total_return) ** (1 / years) - 1
                volatility = returns.std() * np.sqrt(12)
                
                # –ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
                risk_free_rate = bot.get_risk_free_rate(currency, years)
                
                # Sharpe ratio
                sharpe = (cagr - risk_free_rate) / volatility if volatility > 0 else 0
                
                # Sortino ratio
                negative_returns = returns[returns < 0]
                if len(negative_returns) > 0:
                    downside_deviation = negative_returns.std() * np.sqrt(12)
                    sortino = (cagr - risk_free_rate) / downside_deviation if downside_deviation > 0 else 0
                else:
                    sortino = sharpe
                
                # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
                running_max = prices.expanding().max()
                drawdown = (prices - running_max) / running_max
                max_drawdown = drawdown.min()
                
                # Calmar ratio
                calmar = cagr / abs(max_drawdown) if max_drawdown != 0 else 0
                
                manual_metrics[symbol] = {
                    'cagr': cagr,
                    'volatility': volatility,
                    'sharpe': sharpe,
                    'sortino': sortino,
                    'max_drawdown': max_drawdown,
                    'calmar': calmar,
                    'period_years': years
                }
                
                print(f"\nüìä {symbol}:")
                print(f"   CAGR: {cagr:.2%}")
                print(f"   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.2%}")
                print(f"   Sharpe: {sharpe:.3f}")
                print(f"   Sortino: {sortino:.3f}")
                print(f"   –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2%}")
                print(f"   Calmar: {calmar:.3f}")
                print(f"   –ü–µ—Ä–∏–æ–¥: {years:.1f} –ª–µ—Ç")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è {symbol}: {e}")
                manual_metrics[symbol] = {}
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print(f"\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
        print("=" * 60)
        
        comparison_results = {}
        
        for symbol in symbols:
            if symbol not in manual_metrics or not manual_metrics[symbol]:
                continue
                
            print(f"\nüìä {symbol}:")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º CAGR
            if symbol in describe_data.columns:
                describe_cagr = describe_data.loc['Annual Return', symbol] if 'Annual Return' in describe_data.index else None
                manual_cagr = manual_metrics[symbol]['cagr']
                
                if describe_cagr is not None and not pd.isna(describe_cagr):
                    cagr_diff = abs(describe_cagr - manual_cagr)
                    cagr_diff_pct = (cagr_diff / abs(manual_cagr)) * 100 if manual_cagr != 0 else 0
                    
                    print(f"   CAGR - Describe: {describe_cagr:.2%}, Manual: {manual_cagr:.2%}, Diff: {cagr_diff:.4f} ({cagr_diff_pct:.1f}%)")
                    
                    if cagr_diff < 0.01:  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω–µ–µ 1%
                        print(f"   ‚úÖ CAGR: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ")
                        comparison_results[f"{symbol}_cagr"] = True
                    else:
                        print(f"   ‚ö†Ô∏è  CAGR: –†–∞–∑–Ω–∏—Ü–∞ {cagr_diff_pct:.1f}%")
                        comparison_results[f"{symbol}_cagr"] = False
                else:
                    print(f"   ‚ùå CAGR: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ describe")
                    comparison_results[f"{symbol}_cagr"] = False
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                describe_vol = describe_data.loc['Volatility', symbol] if 'Volatility' in describe_data.index else None
                manual_vol = manual_metrics[symbol]['volatility']
                
                if describe_vol is not None and not pd.isna(describe_vol):
                    vol_diff = abs(describe_vol - manual_vol)
                    vol_diff_pct = (vol_diff / abs(manual_vol)) * 100 if manual_vol != 0 else 0
                    
                    print(f"   Volatility - Describe: {describe_vol:.2%}, Manual: {manual_vol:.2%}, Diff: {vol_diff:.4f} ({vol_diff_pct:.1f}%)")
                    
                    if vol_diff < 0.01:  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω–µ–µ 1%
                        print(f"   ‚úÖ Volatility: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ")
                        comparison_results[f"{symbol}_volatility"] = True
                    else:
                        print(f"   ‚ö†Ô∏è  Volatility: –†–∞–∑–Ω–∏—Ü–∞ {vol_diff_pct:.1f}%")
                        comparison_results[f"{symbol}_volatility"] = False
                else:
                    print(f"   ‚ùå Volatility: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ describe")
                    comparison_results[f"{symbol}_volatility"] = False
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º Sharpe ratio
                describe_sharpe = describe_data.loc['Sharpe Ratio', symbol] if 'Sharpe Ratio' in describe_data.index else None
                manual_sharpe = manual_metrics[symbol]['sharpe']
                
                if describe_sharpe is not None and not pd.isna(describe_sharpe):
                    sharpe_diff = abs(describe_sharpe - manual_sharpe)
                    
                    print(f"   Sharpe - Describe: {describe_sharpe:.3f}, Manual: {manual_sharpe:.3f}, Diff: {sharpe_diff:.3f}")
                    
                    if sharpe_diff < 0.1:  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω–µ–µ 0.1
                        print(f"   ‚úÖ Sharpe: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ")
                        comparison_results[f"{symbol}_sharpe"] = True
                    else:
                        print(f"   ‚ö†Ô∏è  Sharpe: –†–∞–∑–Ω–∏—Ü–∞ {sharpe_diff:.3f}")
                        comparison_results[f"{symbol}_sharpe"] = False
                else:
                    print(f"   ‚ùå Sharpe: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ describe")
                    comparison_results[f"{symbol}_sharpe"] = False
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
                describe_dd = describe_data.loc['Max Drawdown', symbol] if 'Max Drawdown' in describe_data.index else None
                manual_dd = manual_metrics[symbol]['max_drawdown']
                
                if describe_dd is not None and not pd.isna(describe_dd):
                    dd_diff = abs(describe_dd - manual_dd)
                    dd_diff_pct = (dd_diff / abs(manual_dd)) * 100 if manual_dd != 0 else 0
                    
                    print(f"   Max Drawdown - Describe: {describe_dd:.2%}, Manual: {manual_dd:.2%}, Diff: {dd_diff:.4f} ({dd_diff_pct:.1f}%)")
                    
                    if dd_diff < 0.01:  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω–µ–µ 1%
                        print(f"   ‚úÖ Max Drawdown: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ")
                        comparison_results[f"{symbol}_max_drawdown"] = True
                    else:
                        print(f"   ‚ö†Ô∏è  Max Drawdown: –†–∞–∑–Ω–∏—Ü–∞ {dd_diff_pct:.1f}%")
                        comparison_results[f"{symbol}_max_drawdown"] = False
                else:
                    print(f"   ‚ùå Max Drawdown: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ describe")
                    comparison_results[f"{symbol}_max_drawdown"] = False
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:")
        print("=" * 60)
        
        total_comparisons = len(comparison_results)
        successful_comparisons = sum(comparison_results.values())
        
        print(f"–í—Å–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: {total_comparisons}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_comparisons}")
        print(f"–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {total_comparisons - successful_comparisons}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_comparisons/total_comparisons)*100:.1f}%")
        
        if successful_comparisons == total_comparisons:
            print("‚úÖ –í–°–ï –°–†–ê–í–ù–ï–ù–ò–Ø –£–°–ü–ï–®–ù–´!")
            return True
        elif successful_comparisons >= total_comparisons * 0.8:
            print("‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –°–†–ê–í–ù–ï–ù–ò–ô –£–°–ü–ï–®–ù–´")
            return True
        else:
            print("‚ùå –ú–ù–û–ì–û –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ô")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_period_calculation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –ø–µ—Ä–∏–æ–¥–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")
    print("=" * 60)
    
    symbols = ['SBER.MOEX', 'LKOH.MOEX', 'OBLG.MOEX', 'GOLD.MOEX']
    
    for symbol in symbols:
        try:
            asset = ok.Asset(symbol)
            returns = asset.ror
            prices = (1 + returns).cumprod()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥
            years = len(prices) / 12.0
            
            print(f"\nüìä {symbol}:")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {len(prices)}")
            print(f"   –ü–µ—Ä–∏–æ–¥ –≤ –≥–æ–¥–∞—Ö: {years:.1f}")
            print(f"   –ü–µ—Ä–∏–æ–¥ –≤ –º–µ—Å—è—Ü–∞—Ö: {years*12:.0f}")
            
            if years < 1:
                print(f"   –§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {years*12:.1f} –º–µ—Å")
            else:
                print(f"   –§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {years:.1f} –ª–µ—Ç")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è {symbol}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –°–í–ï–†–ö–ò –¢–ê–ë–õ–ò–¶ –ú–ï–¢–†–ò–ö")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü
    consistency_success = test_metrics_tables_consistency()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –ø–µ—Ä–∏–æ–¥–∞
    test_period_calculation()
    
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 60)
    
    if consistency_success:
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –¢–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã")
        print("‚úÖ –ü–µ—Ä–∏–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –û–±–µ —Ç–∞–±–ª–∏—Ü—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    else:
        print("‚ö†Ô∏è –¢–µ—Å—Ç —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –ï—Å—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö")
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
