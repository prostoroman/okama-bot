#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å Sharpe Ratio –∏ Calmar Ratio
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SPY.US –∏ VTI.US —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import okama as ok
import pandas as pd
import numpy as np

def test_sharpe_calmar_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç Sharpe –∏ Calmar Ratio –¥–ª—è SPY.US –∏ VTI.US"""
    
    symbols = ['SPY.US', 'VTI.US']
    currency = 'USD'
    
    print("=== –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø SHARPE –ò CALMAR RATIO ===")
    print(f"–°–∏–º–≤–æ–ª—ã: {symbols}")
    print(f"–í–∞–ª—é—Ç–∞: {currency}")
    print()
    
    try:
        # –°–æ–∑–¥–∞–µ–º AssetList
        asset_list = ok.AssetList(symbols, ccy=currency)
        describe_data = asset_list.describe()
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ bot.py
        risk_free_rate = 0.05  # 5% –¥–ª—è USD
        
        print("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –†–ê–°–ß–ï–¢–ê ===")
        
        for symbol in symbols:
            print(f"=== {symbol} ===")
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ CAGR –∏ Risk
            cagr_value = None
            risk_value = None
            max_drawdown_value = None
            
            # Try to find 5-year period first, then fallback to available periods
            for idx in describe_data.index:
                property_name = describe_data.loc[idx, 'property']
                period = describe_data.loc[idx, 'period']
                
                if symbol in describe_data.columns:
                    value = describe_data.loc[idx, symbol]
                    if not pd.isna(value):
                        # Look for 5-year CAGR first
                        if property_name == 'CAGR' and ('5 years' in str(period) or period == '5 years'):
                            cagr_value = value
                        # Look for Risk - try 5-year first, then any available
                        elif property_name == 'Risk' and ('5 years' in str(period) or period == '5 years'):
                            risk_value = value
                        # Look for Max drawdowns - try 5-year first, then any available
                        elif property_name == 'Max drawdowns' and ('5 years' in str(period) or period == '5 years'):
                            max_drawdown_value = value
            
            # If we didn't find 5-year Risk, try to find any Risk period
            if risk_value is None:
                for idx in describe_data.index:
                    property_name = describe_data.loc[idx, 'property']
                    period = describe_data.loc[idx, 'period']
                    
                    if symbol in describe_data.columns:
                        value = describe_data.loc[idx, symbol]
                        if not pd.isna(value) and property_name == 'Risk':
                            risk_value = value
                            break
            
            # If we didn't find 5-year CAGR, try to find any CAGR period
            if cagr_value is None:
                for idx in describe_data.index:
                    property_name = describe_data.loc[idx, 'property']
                    period = describe_data.loc[idx, 'period']
                    
                    if symbol in describe_data.columns:
                        value = describe_data.loc[idx, symbol]
                        if not pd.isna(value) and property_name == 'CAGR':
                            cagr_value = value
                            break
            
            # If we didn't find 5-year Max drawdowns, try to find any Max drawdowns period
            if max_drawdown_value is None:
                for idx in describe_data.index:
                    property_name = describe_data.loc[idx, 'property']
                    period = describe_data.loc[idx, 'period']
                    
                    if symbol in describe_data.columns:
                        value = describe_data.loc[idx, symbol]
                        if not pd.isna(value) and property_name == 'Max drawdowns':
                            max_drawdown_value = value
                            break
            
            print(f"  CAGR: {cagr_value}")
            print(f"  Risk: {risk_value}")
            print(f"  Max drawdown: {max_drawdown_value}")
            print(f"  Risk-free rate: {risk_free_rate}")
            
            # –†–∞—Å—á–µ—Ç Sharpe Ratio
            if cagr_value is not None and risk_value is not None and risk_value > 0:
                sharpe = (cagr_value - risk_free_rate) / risk_value
                print(f"  Sharpe Ratio: {sharpe:.3f}")
            else:
                print(f"  Sharpe Ratio: N/A (cagr={cagr_value}, risk={risk_value})")
            
            # –†–∞—Å—á–µ—Ç Calmar Ratio
            if cagr_value is not None and max_drawdown_value is not None and max_drawdown_value < 0:
                calmar = cagr_value / abs(max_drawdown_value)
                print(f"  Calmar Ratio: {calmar:.3f}")
            else:
                print(f"  Calmar Ratio: N/A (cagr={cagr_value}, max_dd={max_drawdown_value})")
            
            print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
        print("=== –ü–†–û–í–ï–†–ö–ê –£–°–ü–ï–®–ù–û–°–¢–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===")
        success_count = 0
        total_tests = len(symbols) * 2  # 2 –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Å–∏–º–≤–æ–ª
        
        for symbol in symbols:
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            cagr_value = None
            risk_value = None
            max_drawdown_value = None
            
            # –ü–æ–∏—Å–∫ –∑–Ω–∞—á–µ–Ω–∏–π
            for idx in describe_data.index:
                property_name = describe_data.loc[idx, 'property']
                period = describe_data.loc[idx, 'period']
                
                if symbol in describe_data.columns:
                    value = describe_data.loc[idx, symbol]
                    if not pd.isna(value):
                        if property_name == 'CAGR' and ('5 years' in str(period) or period == '5 years'):
                            cagr_value = value
                        elif property_name == 'Risk' and ('5 years' in str(period) or period == '5 years'):
                            risk_value = value
                        elif property_name == 'Max drawdowns' and ('5 years' in str(period) or period == '5 years'):
                            max_drawdown_value = value
            
            # Fallback –ø–æ–∏—Å–∫
            if risk_value is None:
                for idx in describe_data.index:
                    property_name = describe_data.loc[idx, 'property']
                    if symbol in describe_data.columns:
                        value = describe_data.loc[idx, symbol]
                        if not pd.isna(value) and property_name == 'Risk':
                            risk_value = value
                            break
            
            if cagr_value is None:
                for idx in describe_data.index:
                    property_name = describe_data.loc[idx, 'property']
                    if symbol in describe_data.columns:
                        value = describe_data.loc[idx, symbol]
                        if not pd.isna(value) and property_name == 'CAGR':
                            cagr_value = value
                            break
            
            if max_drawdown_value is None:
                for idx in describe_data.index:
                    property_name = describe_data.loc[idx, 'property']
                    if symbol in describe_data.columns:
                        value = describe_data.loc[idx, symbol]
                        if not pd.isna(value) and property_name == 'Max drawdowns':
                            max_drawdown_value = value
                            break
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Sharpe Ratio
            if cagr_value is not None and risk_value is not None and risk_value > 0:
                sharpe = (cagr_value - risk_free_rate) / risk_value
                print(f"‚úÖ {symbol} Sharpe Ratio: {sharpe:.3f}")
                success_count += 1
            else:
                print(f"‚ùå {symbol} Sharpe Ratio: N/A")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Calmar Ratio
            if cagr_value is not None and max_drawdown_value is not None and max_drawdown_value < 0:
                calmar = cagr_value / abs(max_drawdown_value)
                print(f"‚úÖ {symbol} Calmar Ratio: {calmar:.3f}")
                success_count += 1
            else:
                print(f"‚ùå {symbol} Calmar Ratio: N/A")
        
        print(f"\n=== –ò–¢–û–ì ===")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤: {success_count}/{total_tests}")
        if success_count == total_tests:
            print("üéâ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤—Å–µ –µ—â–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç N/A")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_sharpe_calmar_fix()
