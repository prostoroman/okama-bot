#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º –∏–º–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ /list
"""

import unittest
from unittest.mock import Mock, AsyncMock, patch
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot import ShansAi
from telegram import Update, CallbackQuery, Message, User, Chat
from telegram.ext import ContextTypes


class TestNamespaceNavigation(unittest.TestCase):
    """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º –∏–º–µ–Ω"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.bot = ShansAi()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        self.mock_user = Mock(spec=User)
        self.mock_user.id = 12345
        self.mock_user.username = "testuser"
        
        self.mock_chat = Mock(spec=Chat)
        self.mock_chat.id = 12345
        
        self.mock_message = Mock(spec=Message)
        self.mock_message.chat = self.mock_chat
        self.mock_message.chat_id = 12345
        
        self.mock_callback_query = Mock(spec=CallbackQuery)
        self.mock_callback_query.message = self.mock_message
        self.mock_callback_query.data = "nav_namespace_US_1"
        
        self.mock_update = Mock(spec=Update)
        self.mock_update.effective_user = self.mock_user
        self.mock_update.callback_query = self.mock_callback_query
        
        self.mock_context = Mock(spec=ContextTypes.DEFAULT_TYPE)
        self.mock_context.bot = Mock()
        self.mock_context.bot.send_message = AsyncMock()
    
    @patch('bot.ok')
    async def test_okama_namespace_navigation(self, mock_ok):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è okama –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è okama
        import pandas as pd
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        test_symbols = []
        for i in range(50):  # 50 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            test_symbols.append({
                'symbol': f'SYMBOL{i:03d}.US',
                'name': f'Test Company {i}'
            })
        
        mock_df = pd.DataFrame(test_symbols)
        mock_ok.symbols_in_namespace.return_value = mock_df
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await self.bot._show_namespace_symbols(
            self.mock_update, 
            self.mock_context, 
            'US', 
            is_callback=True, 
            page=0
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_ok.symbols_in_namespace.assert_called_with('US')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        self.mock_context.bot.send_message.assert_called()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞
        call_args = self.mock_context.bot.send_message.call_args
        message_text = call_args[1]['text']
        reply_markup = call_args[1]['reply_markup']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.assertIn('üìä **US** - –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: 50', message_text)
        self.assertIn('üìã **–ù–∞–≤–∏–≥–∞—Ü–∏—è:** –ü–æ–∫–∞–∑–∞–Ω—ã —Å–∏–º–≤–æ–ª—ã 1-20 –∏–∑ 50', message_text)
        self.assertIn('üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 3', message_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = reply_markup.inline_keyboard
        self.assertEqual(len(keyboard), 2)  # –ù–∞–≤–∏–≥–∞—Ü–∏—è + Excel
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = keyboard[0]
        self.assertEqual(len(nav_buttons), 3)  # –ù–∞–∑–∞–¥, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –≤–ø–µ—Ä–µ–¥
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback –¥–∞–Ω–Ω—ã–µ
        self.assertEqual(nav_buttons[0].callback_data, "nav_namespace_US_0")  # –ù–∞–∑–∞–¥ (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)
        self.assertEqual(nav_buttons[1].callback_data, "noop")  # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä
        self.assertEqual(nav_buttons[2].callback_data, "nav_namespace_US_1")  # –í–ø–µ—Ä–µ–¥
    
    @patch('bot.tushare_service')
    async def test_tushare_namespace_navigation(self, mock_tushare_service):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è tushare –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è tushare
        mock_tushare_service.get_exchange_symbols.return_value = [
            {'symbol': f'00000{i}.SZ', 'name': f'Test Company {i}'} 
            for i in range(50)
        ]
        mock_tushare_service.get_exchange_symbols_count.return_value = 5000
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await self.bot._show_tushare_namespace_symbols(
            self.mock_update, 
            self.mock_context, 
            'SZSE', 
            is_callback=True, 
            page=0
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
        mock_tushare_service.get_exchange_symbols.assert_called_with('SZSE')
        mock_tushare_service.get_exchange_symbols_count.assert_called_with('SZSE')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        self.mock_context.bot.send_message.assert_called()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞
        call_args = self.mock_context.bot.send_message.call_args
        message_text = call_args[1]['text']
        reply_markup = call_args[1]['reply_markup']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.assertIn('üìä **Shenzhen Stock Exchange**', message_text)
        self.assertIn('üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: 5,000', message_text)
        self.assertIn('üìã **–ù–∞–≤–∏–≥–∞—Ü–∏—è:** –ü–æ–∫–∞–∑–∞–Ω—ã —Å–∏–º–≤–æ–ª—ã 1-20 –∏–∑ 50', message_text)
        self.assertIn('üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 3', message_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = reply_markup.inline_keyboard
        self.assertEqual(len(keyboard), 2)  # –ù–∞–≤–∏–≥–∞—Ü–∏—è + Excel
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = keyboard[0]
        self.assertEqual(len(nav_buttons), 3)  # –ù–∞–∑–∞–¥, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –≤–ø–µ—Ä–µ–¥
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback –¥–∞–Ω–Ω—ã–µ
        self.assertEqual(nav_buttons[0].callback_data, "nav_tushare_SZSE_0")  # –ù–∞–∑–∞–¥ (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)
        self.assertEqual(nav_buttons[1].callback_data, "noop")  # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä
        self.assertEqual(nav_buttons[2].callback_data, "nav_tushare_SZSE_1")  # –í–ø–µ—Ä–µ–¥
    
    async def test_navigation_callback_handlers(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è okama
        self.mock_callback_query.data = "nav_namespace_US_1"
        
        with patch.object(self.bot, '_show_namespace_symbols', new_callable=AsyncMock) as mock_show:
            await self.bot.button_callback(self.mock_update, self.mock_context)
            mock_show.assert_called_with(self.mock_update, self.mock_context, 'US', True, 1)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è tushare
        self.mock_callback_query.data = "nav_tushare_SSE_2"
        
        with patch.object(self.bot, '_show_tushare_namespace_symbols', new_callable=AsyncMock) as mock_show_tushare:
            await self.bot.button_callback(self.mock_update, self.mock_context)
            mock_show_tushare.assert_called_with(self.mock_update, self.mock_context, 'SSE', True, 2)
    
    def test_pagination_calculation(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        test_cases = [
            (50, 20, 3),   # 50 —Å–∏–º–≤–æ–ª–æ–≤, 20 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É = 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            (100, 20, 5),  # 100 —Å–∏–º–≤–æ–ª–æ–≤, 20 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É = 5 —Å—Ç—Ä–∞–Ω–∏—Ü
            (15, 20, 1),   # 15 —Å–∏–º–≤–æ–ª–æ–≤, 20 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É = 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            (0, 20, 0),    # 0 —Å–∏–º–≤–æ–ª–æ–≤, 20 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É = 0 —Å—Ç—Ä–∞–Ω–∏—Ü
        ]
        
        for total_symbols, symbols_per_page, expected_pages in test_cases:
            total_pages = (total_symbols + symbols_per_page - 1) // symbols_per_page
            self.assertEqual(total_pages, expected_pages, 
                           f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è {total_symbols} —Å–∏–º–≤–æ–ª–æ–≤")


if __name__ == '__main__':
    unittest.main()
