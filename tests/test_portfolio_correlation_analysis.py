#!/usr/bin/env python3
"""
Test script to verify that correlation data is properly passed to Gemini portfolio analysis
"""

import sys
import os
import asyncio
import logging

# Add the parent directory to the path so we can import the bot
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot import ShansAi
import okama as ok

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_portfolio_correlation_analysis():
    """Test that correlation data is properly included in portfolio AI analysis"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤ AI –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
        
        # Initialize bot
        bot = ShansAi()
        
        # Test symbols
        symbols = ['AAPL.US', 'MSFT.US', 'GOOGL.US']
        weights = [0.4, 0.3, 0.3]
        currency = 'USD'
        user_id = 12345
        
        print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã: {symbols}")
        print(f"‚öñÔ∏è –í–µ—Å–∞: {weights}")
        
        # Create portfolio
        try:
            portfolio = ok.Portfolio(symbols, weights=weights, ccy=currency)
            print(f"‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            return
        
        # Test data preparation
        print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        portfolio_data = await bot._prepare_portfolio_data_for_analysis(
            portfolio=portfolio,
            symbols=symbols,
            weights=weights,
            currency=currency,
            user_id=user_id
        )
        
        if portfolio_data:
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # Check if correlations are present
            correlations = portfolio_data.get('correlations', [])
            print(f"üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {'–ï—Å—Ç—å' if correlations else '–ù–µ—Ç'}")
            
            if correlations:
                print(f"   –†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {len(correlations)}x{len(correlations[0]) if correlations else 0}")
                
                # Show correlation values
                print(f"   –ó–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:")
                for i, symbol1 in enumerate(symbols):
                    for j, symbol2 in enumerate(symbols):
                        if i < j:  # Only upper triangle
                            corr = correlations[i][j]
                            print(f"     {symbol1} ‚Üî {symbol2}: {corr:.3f}")
            else:
                print(f"‚ùå –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è")
            
            # Test Gemini service description preparation
            if bot.gemini_service and bot.gemini_service.is_available():
                print(f"\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è Gemini...")
                
                # Test portfolio description preparation
                description = bot.gemini_service._prepare_portfolio_description(portfolio_data)
                
                if description:
                    print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è Gemini –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    print(f"   –î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # Check if correlation section is in description
                    if "–ö–û–†–†–ï–õ–Ø–¶–ò–û–ù–ù–ê–Ø –ú–ê–¢–†–ò–¶–ê" in description:
                        print(f"‚úÖ –°–µ–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏")
                        
                        # Extract correlation section
                        lines = description.split('\n')
                        correlation_section = []
                        in_correlation_section = False
                        
                        for line in lines:
                            if "–ö–û–†–†–ï–õ–Ø–¶–ò–û–ù–ù–ê–Ø –ú–ê–¢–†–ò–¶–ê" in line:
                                in_correlation_section = True
                                correlation_section.append(line)
                            elif in_correlation_section:
                                if line.strip().startswith('‚Ä¢') and '‚Üî' in line:
                                    correlation_section.append(line)
                                elif line.strip() and not line.strip().startswith('‚Ä¢'):
                                    break
                        
                        if correlation_section:
                            print(f"   –°–µ–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:")
                            for line in correlation_section:
                                print(f"     {line}")
                    else:
                        print(f"‚ùå –°–µ–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏")
                else:
                    print(f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è Gemini –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ")
            else:
                print(f"‚ö†Ô∏è Gemini —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
            
            # Test full portfolio analysis
            if bot.gemini_service and bot.gemini_service.is_available():
                print(f"\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
                
                portfolio_analysis = bot.gemini_service.analyze_portfolio(portfolio_data)
                
                if portfolio_analysis and portfolio_analysis.get('success'):
                    analysis_text = portfolio_analysis.get('analysis', '')
                    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    print(f"   –î–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(analysis_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # Check if correlation is mentioned in analysis
                    if any(word in analysis_text.lower() for word in ['–∫–æ—Ä—Ä–µ–ª—è—Ü', 'correlation', '—Å–≤—è–∑']):
                        print(f"‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ –∞–Ω–∞–ª–∏–∑–µ")
                    else:
                        print(f"‚ö†Ô∏è –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ –∞–Ω–∞–ª–∏–∑–µ")
                else:
                    error_msg = portfolio_analysis.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if portfolio_analysis else '–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω'
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {error_msg}")
            else:
                print(f"‚ö†Ô∏è Gemini —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞")
        else:
            print(f"‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        
        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_portfolio_correlation_analysis())
