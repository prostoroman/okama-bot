#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ç–∞–±–ª–∏—Ü –º–µ—Ç—Ä–∏–∫
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot import ShansAi
import okama as ok

def demo_enhanced_metrics():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ç–∞–±–ª–∏—Ü –º–µ—Ç—Ä–∏–∫"""
    
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ù–´–• –¢–ê–ë–õ–ò–¶ –ú–ï–¢–†–ò–ö")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    bot = ShansAi()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    symbols = ['SBER.MOEX', 'LKOH.MOEX', 'OBLG.MOEX']
    currency = 'RUB'
    
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(symbols)}")
    print(f"üí∞ –í–∞–ª—é—Ç–∞: {currency}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫
    print(f"\nüîç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        portfolio_contexts = []
        for symbol in symbols:
            try:
                asset = ok.Asset(symbol)
                portfolio_contexts.append({
                    'portfolio_object': None,
                    'portfolio_symbols': [symbol]
                })
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞ {symbol}: {e}")
                portfolio_contexts.append({
                    'portfolio_object': None,
                    'portfolio_symbols': [symbol]
                })
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫
        metrics_table = bot._create_summary_metrics_table(
            symbols=symbols,
            currency=currency,
            expanded_symbols=symbols,
            portfolio_contexts=portfolio_contexts,
            specified_period=None
        )
        
        print(f"\nüìã –°–æ–∑–¥–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫:")
        print("=" * 60)
        print(metrics_table)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –±–µ–∑—Ä–∏—Å–∫–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏
        print(f"\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –±–µ–∑—Ä–∏—Å–∫–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫:")
        print("=" * 60)
        
        currencies = ['USD', 'EUR', 'RUB', 'CNY', 'GBP', 'ILS', 'HKD']
        periods = [0.5, 1.0, 5.0]
        
        print("–í–∞–ª—é—Ç–∞ | 0.5 –ª–µ—Ç | 1.0 –ª–µ—Ç | 5.0 –ª–µ—Ç")
        print("-" * 40)
        
        for currency in currencies:
            rates = []
            for period in periods:
                try:
                    rate = bot.get_risk_free_rate(currency, period)
                    rates.append(f"{rate:.1%}")
                except Exception as e:
                    rates.append("–û—à–∏–±–∫–∞")
            
            print(f"{currency:6} | {rates[0]:7} | {rates[1]:7} | {rates[2]:7}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        print(f"\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:")
        print("=" * 60)
        
        for symbol in symbols:
            try:
                asset = ok.Asset(symbol)
                returns = asset.ror
                prices = (1 + returns).cumprod()
                
                years = len(prices) / 12.0
                
                print(f"\nüìä {symbol}:")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {len(prices)}")
                print(f"   –ü–µ—Ä–∏–æ–¥ –≤ –≥–æ–¥–∞—Ö: {years:.1f}")
                
                if years < 1:
                    print(f"   –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {years*12:.1f} –º–µ—Å")
                else:
                    print(f"   –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {years:.1f} –ª–µ—Ç")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
        
        print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

def demo_okama_rates():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å okama.Rate"""
    
    print(f"\nüîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø OKAMA.RATE")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫
    rate_symbols = [
        'US_EFFR.RATE',
        'RUS_CBR.RATE',
        'RUONIA_AVG_6M.RATE',
        'CHN_LPR1.RATE'
    ]
    
    for rate_symbol in rate_symbols:
        try:
            rate_obj = ok.Rate(rate_symbol)
            rate_values = rate_obj.values_monthly
            
            if rate_values is not None and len(rate_values) > 0:
                print(f"\nüìä {rate_symbol}:")
                print(f"   –ü–µ—Ä–∏–æ–¥: {rate_values.index[0]} - {rate_values.index[-1]}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {len(rate_values)}")
                print(f"   –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {rate_values.mean():.4f}")
                print(f"   –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {rate_values.iloc[-1]:.4f}")
                
        except Exception as e:
            print(f"‚ùå {rate_symbol}: –û—à–∏–±–∫–∞ - {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫
    demo_enhanced_metrics()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º okama.Rate
    demo_okama_rates()
    
    print(f"\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
    print("=" * 60)
    
    print("‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
    print("   - –ü–µ—Ä–∏–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ")
    print("   - –í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å okama.AssetList.describe —Å–æ–∑–¥–∞–µ—Ç—Å—è")
    print("   - –ë–µ–∑—Ä–∏—Å–∫–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—É—á–∞—é—Ç—Å—è –∏–∑ okama.Rate")
    print("   - HKD –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É 2.85%")
    print("   - –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
