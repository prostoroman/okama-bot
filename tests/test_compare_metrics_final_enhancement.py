#!/usr/bin/env python3
"""
Test script to verify the final compare metrics enhancements:
1. Renamed '–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (CAGR)' to '–°—Ä–µ–¥–Ω. –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (CAGR)'
2. Moved '–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞' to be after '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å'
3. Added period information to metric names in describe table
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import okama as ok
import pandas as pd
from bot import ShansAi

def test_compare_metrics_final_enhancement():
    """Test the final compare metrics enhancements"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –º–µ—Ç—Ä–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
    print("=" * 60)
    
    # Test symbols
    symbols = ['SPY.US', 'QQQ.US']
    currency = 'USD'
    
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {symbols}")
    print(f"üí∞ –í–∞–ª—é—Ç–∞: {currency}")
    
    try:
        # Create bot instance
        bot = ShansAi()
        
        # Test 1: Check first table structure and naming
        print(f"\nüîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã")
        
        # Create expanded symbols and portfolio contexts for testing
        expanded_symbols = []
        portfolio_contexts = []
        
        for symbol in symbols:
            try:
                asset = ok.Asset(symbol)
                expanded_symbols.append(symbol)
                portfolio_contexts.append({
                    'portfolio_object': asset,
                    'portfolio_symbols': [symbol]
                })
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞ {symbol}: {e}")
                return False
        
        # Test the summary metrics table creation
        summary_table = bot._create_summary_metrics_table(
            symbols=symbols,
            currency=currency,
            expanded_symbols=expanded_symbols,
            portfolio_contexts=portfolio_contexts,
            specified_period=None
        )
        
        if summary_table and not summary_table.startswith("‚ùå"):
            print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # Check if CAGR is renamed correctly
            if "–°—Ä–µ–¥–Ω. –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (CAGR)" in summary_table and "–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (CAGR)" not in summary_table:
                print(f"   ‚úÖ CAGR –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '–°—Ä–µ–¥–Ω. –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (CAGR)'")
            else:
                print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º CAGR")
            
            # Check if Max Drawdown is after Volatility
            volatility_pos = summary_table.find("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
            drawdown_pos = summary_table.find("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞")
            
            if volatility_pos != -1 and drawdown_pos != -1 and drawdown_pos > volatility_pos:
                print(f"   ‚úÖ '–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞' —Ä–∞–∑–º–µ—â–µ–Ω–∞ –ø–æ—Å–ª–µ '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏'")
            else:
                print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º '–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞'")
                print(f"      –ü–æ–∑–∏—Ü–∏—è –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {volatility_pos}")
                print(f"      –ü–æ–∑–∏—Ü–∏—è –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∏: {drawdown_pos}")
                
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã:")
            print(summary_table[:800] + "..." if len(summary_table) > 800 else summary_table)
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫: {summary_table}")
            return False
        
        # Test 2: Check describe table with period information
        print(f"\nüîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã describe —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏")
        
        # First, let's check the raw describe data structure
        asset_list = ok.AssetList(symbols, ccy=currency)
        describe_data = asset_list.describe()
        
        print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ describe –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   - –ö–æ–ª–æ–Ω–∫–∏: {list(describe_data.columns)}")
        print(f"   - –ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–∏–æ–¥–æ–≤: {describe_data['period'].head().tolist()}")
        
        describe_table = bot._create_describe_table(symbols, currency)
        
        if describe_table:
            print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ describe —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # Check if period information is included in metric names
            has_periods_in_names = any("(" in line and ")" in line for line in describe_table.split('\n') if "|" in line)
            
            if has_periods_in_names:
                print(f"   ‚úÖ –ü–µ—Ä–∏–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –º–µ—Ç—Ä–∏–∫")
            else:
                print(f"   ‚ùå –ü–µ—Ä–∏–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –º–µ—Ç—Ä–∏–∫")
            
            # Check for specific period examples
            period_examples = ["YTD", "1 years", "5 years", "10 years"]
            found_periods = []
            for period in period_examples:
                if period in describe_table:
                    found_periods.append(period)
            
            if found_periods:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–µ—Ä–∏–æ–¥—ã –≤ —Ç–∞–±–ª–∏—Ü–µ: {found_periods}")
            else:
                print(f"   ‚ö†Ô∏è  –û–∂–∏–¥–∞–µ–º—ã–µ –ø–µ—Ä–∏–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã describe:")
            print(describe_table[:800] + "..." if len(describe_table) > 800 else describe_table)
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã describe")
            return False
        
        print(f"\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_compare_metrics_final_enhancement()
    if success:
        print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
