#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /portfolio:
1. –ö–Ω–æ–ø–∫–∞ –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç _create_summary_metrics_table()
2. –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ AI-–∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ –î–∏–≤–∏–¥–µ–Ω–¥—ã
3. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª AI-–∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω —Å—Ä–∞–≤–Ω–µ–Ω–∏—é
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import asyncio
import unittest
from unittest.mock import Mock, AsyncMock, patch, MagicMock
import pandas as pd
import okama as ok

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
from bot import ShansAi
from services.gemini_service import GeminiService

class TestPortfolioEnhancements(unittest.TestCase):
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /portfolio"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.bot = ShansAi()
        self.bot.logger = Mock()
        
        # –ú–æ–∫–∞–µ–º Gemini —Å–µ—Ä–≤–∏—Å
        self.mock_gemini = Mock()
        self.mock_gemini.is_available.return_value = True
        self.mock_gemini.analyze_data.return_value = {
            'success': True,
            'analysis': '–¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è'
        }
        self.bot.gemini_service = self.mock_gemini
        
        # –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.mock_user_context = {
            'saved_portfolios': {
                'test_portfolio': {
                    'symbols': ['SBER.MOEX', 'LKOH.MOEX'],
                    'weights': [0.6, 0.4],
                    'currency': 'RUB'
                }
            }
        }
        
        # –ú–æ–∫–∞–µ–º update –∏ context
        self.mock_update = Mock()
        self.mock_context = Mock()
        self.mock_update.effective_user.id = 12345
        self.mock_update.effective_chat.id = 67890
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã –±–æ—Ç–∞
        self.bot._get_user_context = Mock(return_value=self.mock_user_context)
        self.bot._find_portfolio_by_symbol = Mock(return_value='test_portfolio')
        self.bot._send_callback_message = AsyncMock()
        self.bot._send_callback_message_with_keyboard_removal = AsyncMock()
        self.bot._send_ephemeral_message = AsyncMock()
        self.bot._create_portfolio_command_keyboard = Mock()
        self.bot._create_summary_metrics_table = Mock(return_value="–¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫")
        self.bot._prepare_data_for_analysis = AsyncMock(return_value={'test': 'data'})
        
    def test_portfolio_metrics_button_uses_summary_table(self):
        """–¢–µ—Å—Ç: –∫–Ω–æ–ø–∫–∞ –ú–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç _create_summary_metrics_table"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è _create_summary_metrics_table –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
        # –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        with patch('okama.Asset') as mock_asset:
            mock_asset.return_value = Mock()
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ú–µ—Ç—Ä–∏–∫–∏
            asyncio.run(self.bot._handle_portfolio_risk_metrics_by_symbol(
                self.mock_update, self.mock_context, 'test_portfolio'
            ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ _create_summary_metrics_table –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
            self.bot._create_summary_metrics_table.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞
            call_args = self.bot._create_summary_metrics_table.call_args
            self.assertEqual(call_args[0][0], ['test_portfolio'])  # symbols
            self.assertEqual(call_args[0][1], 'RUB')  # currency
            self.assertEqual(call_args[0][2], ['test_portfolio'])  # expanded_symbols
            self.assertIsInstance(call_args[0][3], list)  # portfolio_contexts
            self.assertIsNone(call_args[0][4])  # specified_period
    
    def test_ai_analysis_button_in_keyboard(self):
        """–¢–µ—Å—Ç: –∫–Ω–æ–ø–∫–∞ AI-–∞–Ω–∞–ª–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
        keyboard = self.bot._create_portfolio_command_keyboard('test_portfolio')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
        self.assertIsNotNone(keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ AI-–∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        keyboard_buttons = []
        for row in keyboard.inline_keyboard:
            for button in row:
                keyboard_buttons.append(button.text)
        
        self.assertIn('ü§ñ AI-–∞–Ω–∞–ª–∏–∑', keyboard_buttons)
    
    def test_ai_analysis_button_callback_handling(self):
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback'–∞ –∫–Ω–æ–ø–∫–∏ AI-–∞–Ω–∞–ª–∏–∑"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback 'portfolio_ai_analysis_test_portfolio' 
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        callback_data = 'portfolio_ai_analysis_test_portfolio'
        
        # –ú–æ–∫–∞–µ–º button_callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        with patch.object(self.bot, 'button_callback', new_callable=AsyncMock) as mock_callback:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ button_callback
            mock_callback.return_value = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
            self.assertTrue(callback_data.startswith('portfolio_ai_analysis_'))
    
    def test_ai_analysis_functionality(self):
        """–¢–µ—Å—Ç: —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª AI-–∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        with patch('okama.Asset') as mock_asset:
            mock_asset.return_value = Mock()
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ AI-–∞–Ω–∞–ª–∏–∑–∞
            asyncio.run(self.bot._handle_portfolio_ai_analysis_button(
                self.mock_update, self.mock_context, 'test_portfolio'
            ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ _prepare_data_for_analysis –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
            self.bot._prepare_data_for_analysis.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Gemini —Å–µ—Ä–≤–∏—Å –±—ã–ª –≤—ã–∑–≤–∞–Ω
            self.mock_gemini.analyze_data.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            self.bot._send_callback_message_with_keyboard_removal.assert_called()
    
    def test_portfolio_metrics_table_format(self):
        """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        with patch('okama.Asset') as mock_asset:
            mock_asset.return_value = Mock()
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ú–µ—Ç—Ä–∏–∫–∏
            asyncio.run(self.bot._handle_portfolio_risk_metrics_by_symbol(
                self.mock_update, self.mock_context, 'test_portfolio'
            ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            call_args = self.bot._send_callback_message_with_keyboard_removal.call_args
            message_text = call_args[0][2]  # –¢—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
            self.assertIn('üìä **–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫**', message_text)
    
    def test_different_currencies_support(self):
        """–¢–µ—Å—Ç: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç"""
        test_cases = [
            {'currency': 'USD', 'symbols': ['SPY.US', 'QQQ.US']},
            {'currency': 'EUR', 'symbols': ['EUNL.ETF', 'IWDA.ETF']},
            {'currency': 'RUB', 'symbols': ['SBER.MOEX', 'LKOH.MOEX']}
        ]
        
        for case in test_cases:
            with self.subTest(currency=case['currency']):
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.mock_user_context['saved_portfolios']['test_portfolio']['currency'] = case['currency']
                self.mock_user_context['saved_portfolios']['test_portfolio']['symbols'] = case['symbols']
                
                with patch('okama.Asset') as mock_asset:
                    mock_asset.return_value = Mock()
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ú–µ—Ç—Ä–∏–∫–∏
                    asyncio.run(self.bot._handle_portfolio_risk_metrics_by_symbol(
                        self.mock_update, self.mock_context, 'test_portfolio'
                    ))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª—é—Ç–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                    call_args = self.bot._create_summary_metrics_table.call_args
                    self.assertEqual(call_args[0][1], case['currency'])
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
        self.bot._find_portfolio_by_symbol.return_value = None
        
        asyncio.run(self.bot._handle_portfolio_ai_analysis_button(
            self.mock_update, self.mock_context, 'nonexistent_portfolio'
        ))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        self.bot._send_callback_message.assert_called()
        call_args = self.bot._send_callback_message.call_args
        self.assertIn('–Ω–µ –Ω–∞–π–¥–µ–Ω', call_args[0][2])

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    unittest.main(verbosity=2)
