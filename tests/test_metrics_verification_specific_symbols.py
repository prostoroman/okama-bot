#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –º–µ—Ç—Ä–∏–∫ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö:
SBER.MOEX, LKOH.MOEX, LQDT.MOEX, OBLG.MOEX, GOLD.MOEX

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ê–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤ CAGR, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏, Sharpe, Sortino
2. –ü—Ä–æ–±–ª–µ–º—ã —Å LQDT (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 42,203%, –ø—Ä–æ—Å–∞–¥–∫–∞ -99.9%)
3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –±–µ–∑—Ä–∏—Å–∫–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ (—Å–µ–π—á–∞—Å 16.5% - –∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë)
4. –†–∞—Å—á–µ—Ç Sortino ratio (downside deviation)
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    import okama as ok
    print("‚úÖ Okama –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ okama: {e}")
    sys.exit(1)

def test_metrics_calculation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    
    symbols = ['SBER.MOEX', 'LKOH.MOEX', 'LQDT.MOEX', 'OBLG.MOEX', 'GOLD.MOEX']
    results = {}
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤:")
    print("=" * 60)
    
    for symbol in symbols:
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {symbol}")
        print("-" * 40)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–∞
            asset = ok.Asset(symbol)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            returns = asset.ror
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π (wealth index)
            prices = (1 + returns).cumprod()
            
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {prices.index[0].strftime('%Y-%m-%d')} - {prices.index[-1].strftime('%Y-%m-%d')}")
            print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {len(prices)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
            print(f"üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {prices.iloc[0]:.2f}")
            print(f"üí∞ –ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞: {prices.iloc[-1]:.2f}")
            print(f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {prices.min():.2f}")
            print(f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {prices.max():.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω—É–ª–µ–≤—ã–µ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
            if (prices <= 0).any():
                print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ù–£–õ–ï–í–´–ï –ò–õ–ò –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ï –¶–ï–ù–´!")
                zero_prices = prices[prices <= 0]
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ü–µ–Ω: {len(zero_prices)}")
                print(f"   –î–∞—Ç—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ü–µ–Ω: {zero_prices.index.tolist()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
            print(f"üìä –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {returns.mean():.6f}")
            print(f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {returns.std():.6f}")
            print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {returns.min():.6f}")
            print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {returns.max():.6f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            extreme_returns = returns[abs(returns) > 0.5]  # –ë–æ–ª–µ–µ 50% –∑–∞ –¥–µ–Ω—å
            if len(extreme_returns) > 0:
                print(f"‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ï –î–û–•–û–î–ù–û–°–¢–ò (>50%): {len(extreme_returns)}")
                for date, ret in extreme_returns.items():
                    print(f"   {date.strftime('%Y-%m-%d')}: {ret:.2%}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = calculate_metrics_manually(prices, returns, symbol)
            results[symbol] = metrics
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\nüìà –†–ê–°–ß–ï–¢–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
            print(f"   CAGR: {metrics['cagr']:.2%}")
            print(f"   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {metrics['volatility']:.2%}")
            print(f"   Sharpe Ratio: {metrics['sharpe']:.4f}")
            print(f"   Sortino Ratio: {metrics['sortino']:.4f}")
            print(f"   –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics['max_drawdown']:.2%}")
            print(f"   Calmar Ratio: {metrics['calmar']:.4f}")
            print(f"   VaR 95%: {metrics['var_95']:.2%}")
            print(f"   CVaR 95%: {metrics['cvar_95']:.2%}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
            check_anomalies(symbol, metrics)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {e}")
            results[symbol] = {'error': str(e)}
    
    return results

def calculate_metrics_manually(prices, returns, symbol):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    # CAGR
    total_return = (prices.iloc[-1] / prices.iloc[0]) - 1
    # –î–ª—è –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤
    months = len(prices)
    years = months / 12.0
    cagr = (1 + total_return) ** (1 / years) - 1
    
    # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–∞–Ω–Ω—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
    volatility = returns.std() * np.sqrt(12)  # –î–ª—è –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    # –ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (—Ç–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - 16.5% –¥–ª—è RUB)
    risk_free_rate = 0.165
    
    # Sharpe Ratio
    sharpe = (cagr - risk_free_rate) / volatility if volatility > 0 else 0
    
    # Sortino Ratio (downside deviation)
    negative_returns = returns[returns < 0]
    if len(negative_returns) > 0:
        downside_deviation = negative_returns.std() * np.sqrt(12)  # –î–ª—è –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        sortino = (cagr - risk_free_rate) / downside_deviation if downside_deviation > 0 else 0
    else:
        sortino = sharpe  # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
    cumulative = (1 + returns).cumprod()
    running_max = cumulative.expanding().max()
    drawdown = (cumulative - running_max) / running_max
    max_drawdown = drawdown.min()
    
    # Calmar Ratio
    calmar = cagr / abs(max_drawdown) if max_drawdown != 0 else 0
    
    # VaR 95% –∏ CVaR 95%
    var_95 = returns.quantile(0.05)
    returns_below_var = returns[returns <= var_95]
    cvar_95 = returns_below_var.mean() if len(returns_below_var) > 0 else var_95
    
    return {
        'cagr': cagr,
        'volatility': volatility,
        'sharpe': sharpe,
        'sortino': sortino,
        'max_drawdown': max_drawdown,
        'calmar': calmar,
        'var_95': var_95,
        'cvar_95': cvar_95,
        'risk_free_rate': risk_free_rate
    }

def check_anomalies(symbol, metrics):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏"""
    
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ù–ê –ê–ù–û–ú–ê–õ–ò–ò:")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    if metrics['volatility'] > 5.0:  # –ë–æ–ª–µ–µ 500%
        print(f"   ‚ö†Ô∏è  –ê–ù–û–ú–ê–õ–¨–ù–û –í–´–°–û–ö–ê–Ø –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨: {metrics['volatility']:.2%}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å–∞–¥–∫–∏
    if metrics['max_drawdown'] < -0.95:  # –ë–æ–ª–µ–µ -95%
        print(f"   ‚ö†Ô∏è  –ê–ù–û–ú–ê–õ–¨–ù–û –ì–õ–£–ë–û–ö–ê–Ø –ü–†–û–°–ê–î–ö–ê: {metrics['max_drawdown']:.2%}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Sortino
    if abs(metrics['sortino']) > 10:  # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 10
        print(f"   ‚ö†Ô∏è  –ê–ù–û–ú–ê–õ–¨–ù–´–ô SORTINO RATIO: {metrics['sortino']:.4f}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Sharpe
    if metrics['sharpe'] < -2 or metrics['sharpe'] > 5:
        print(f"   ‚ö†Ô∏è  –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô SHARPE RATIO: {metrics['sharpe']:.4f}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CAGR
    if abs(metrics['cagr']) > 1.0:  # –ë–æ–ª–µ–µ 100% –≥–æ–¥–æ–≤—ã—Ö
        print(f"   ‚ö†Ô∏è  –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–ê–Ø –î–û–•–û–î–ù–û–°–¢–¨: {metrics['cagr']:.2%}")

def analyze_risk_free_rate_issue():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –±–µ–∑—Ä–∏—Å–∫–æ–≤–æ–π —Å—Ç–∞–≤–∫–æ–π"""
    
    print("\n" + "=" * 60)
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –ë–ï–ó–†–ò–°–ö–û–í–û–ô –°–¢–ê–í–ö–û–ô")
    print("=" * 60)
    
    print("\nüìä –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è:")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë: 16.5%")
    print("   - –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞")
    print("   - –ò—Å–∫–∞–∂–∞–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("   1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –û–§–ó (–≥–æ—Å–æ–±–ª–∏–≥–∞—Ü–∏–π)")
    print("   2. –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π - –û–§–ó 1Y")
    print("   3. –î–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö - –û–§–ó 10Y")
    print("   4. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: —Å—Ä–µ–¥–Ω—è—è –∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –∑–∞ 5-10 –ª–µ—Ç")
    
    print("\nüéØ –í–ª–∏—è–Ω–∏–µ –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏:")
    print("   - –ü—Ä–∏ —Å—Ç–∞–≤–∫–µ 16.5% –ø–æ—á—Ç–∏ –≤—Å–µ –∞–∫—Ç–∏–≤—ã –∏–º–µ—é—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π Sharpe")
    print("   - –≠—Ç–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫—É—é —Å—Ç–∞–≤–∫—É, –∞ –Ω–µ '–ø–ª–æ—Ö–∏–µ' –∞–∫—Ç–∏–≤—ã")
    print("   - –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –º–∞–ª–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ü–†–û–í–ï–†–ö–ò –ú–ï–¢–†–ò–ö")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    results = test_metrics_calculation()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –±–µ–∑—Ä–∏—Å–∫–æ–≤–æ–π —Å—Ç–∞–≤–∫–æ–π
    analyze_risk_free_rate_issue()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 60)
    
    print("\n‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã:")
    for symbol, metrics in results.items():
        if 'error' not in metrics:
            print(f"   {symbol}: CAGR {metrics['cagr']:.1%}, Vol {metrics['volatility']:.1%}")
    
    print("\n‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–∫—Ç–∏–≤—ã:")
    for symbol, metrics in results.items():
        if 'error' not in metrics:
            issues = []
            if metrics['volatility'] > 5.0:
                issues.append(f"Vol {metrics['volatility']:.0%}")
            if metrics['max_drawdown'] < -0.95:
                issues.append(f"DD {metrics['max_drawdown']:.1%}")
            if abs(metrics['sortino']) > 10:
                issues.append(f"Sortino {metrics['sortino']:.1f}")
            
            if issues:
                print(f"   {symbol}: {', '.join(issues)}")
    
    print("\nüîß –¢—Ä–µ–±—É–µ–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    print("   1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è LQDT")
    print("   2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Å–∞–¥–∫–∏ –¥–ª—è LQDT")
    print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É Sortino (downside deviation)")
    print("   4. –ò–∑–º–µ–Ω–∏—Ç—å –±–µ–∑—Ä–∏—Å–∫–æ–≤—É—é —Å—Ç–∞–≤–∫—É –Ω–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –û–§–ó")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
