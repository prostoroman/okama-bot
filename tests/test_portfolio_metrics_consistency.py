#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_portfolio_metrics_consistency():
    """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏–º–µ—é—Ç —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ –∏ –≤ compare"""
    from bot import ShansAi
    import okama as ok
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ShansAi()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        symbols = ['SBER.MOEX', 'LKOH.MOEX']
        weights = [0.6, 0.4]
        currency = 'RUB'
        
        portfolio = ok.Portfolio(symbols, weights=weights, ccy=currency)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_table = bot._create_portfolio_summary_metrics_table(portfolio, symbols, weights, currency)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞
        assert portfolio_table is not None, "–¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        assert not portfolio_table.startswith("‚ùå"), f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {portfolio_table}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        assert "## üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è" in portfolio_table, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–∑ okama.describe()
        key_metrics_from_describe = [
            "Compound return",
            "CAGR",
            "Annualized mean return", 
            "Dividend yield",
            "Risk",
            "CVAR",
            "Max drawdowns"
        ]
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –∏–∑ okama.describe():")
        for metric in key_metrics_from_describe:
            present = metric in portfolio_table
            status = "‚úÖ" if present else "‚ùå"
            print(f"   {status} {metric}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        additional_metrics = [
            "Risk free rate",
            "Sharpe Ratio", 
            "Sortino Ratio",
            "Calmar Ratio"
        ]
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫:")
        for metric in additional_metrics:
            present = metric in portfolio_table
            status = "‚úÖ" if present else "‚ùå"
            print(f"   {status} {metric}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã (markdown)
        assert "|" in portfolio_table, "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –≤ markdown —Ñ–æ—Ä–º–∞—Ç–µ"
        assert "–ú–µ—Ç—Ä–∏–∫–∞" in portfolio_table, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ '–ú–µ—Ç—Ä–∏–∫–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert "–ó–Ω–∞—á–µ–Ω–∏–µ" in portfolio_table, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ '–ó–Ω–∞—á–µ–Ω–∏–µ' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        print("\n‚úÖ –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print("‚úÖ –§–æ—Ä–º–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∞–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        print("‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
        print("–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö okama")
        return False

def test_portfolio_vs_compare_format():
    """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    from bot import ShansAi
    import okama as ok
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ShansAi()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        symbols = ['SBER.MOEX', 'LKOH.MOEX']
        weights = [0.6, 0.4]
        currency = 'RUB'
        
        portfolio = ok.Portfolio(symbols, weights=weights, ccy=currency)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_table = bot._create_portfolio_summary_metrics_table(portfolio, symbols, weights, currency)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Ö –∂–µ –∞–∫—Ç–∏–≤–æ–≤
        compare_table = bot._create_summary_metrics_table(symbols, currency, symbols, [], None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
        assert portfolio_table is not None, "–¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        assert compare_table is not None, "–¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç markdown
        assert "|" in portfolio_table, "–¢–∞–±–ª–∏—Ü–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ –≤ markdown —Ñ–æ—Ä–º–∞—Ç–µ"
        assert "|" in compare_table, "–¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ –≤ markdown —Ñ–æ—Ä–º–∞—Ç–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ç–∏–ø—ã –º–µ—Ç—Ä–∏–∫
        portfolio_metrics = set()
        compare_metrics = set()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü
        for line in portfolio_table.split('\n'):
            if '|' in line and not line.startswith('|') and '–ú–µ—Ç—Ä–∏–∫–∞' not in line:
                metric = line.split('|')[1].strip()
                if metric:
                    portfolio_metrics.add(metric)
        
        for line in compare_table.split('\n'):
            if '|' in line and not line.startswith('|') and '–ú–µ—Ç—Ä–∏–∫–∞' not in line:
                metric = line.split('|')[1].strip()
                if metric:
                    compare_metrics.add(metric)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        common_metrics = portfolio_metrics.intersection(compare_metrics)
        print(f"\nüìä –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –º–µ–∂–¥—É –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º: {len(common_metrics)}")
        for metric in sorted(common_metrics):
            print(f"   ‚úÖ {metric}")
        
        print("\n‚úÖ –§–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–µ–Ω")
        print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç—Ä–∏–∫–∞–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
        print("–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö okama")
        return False

if __name__ == '__main__':
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    print("=" * 70)
    
    success_count = 0
    total_tests = 2
    
    try:
        if test_portfolio_metrics_consistency():
            success_count += 1
        
        if test_portfolio_vs_compare_format():
            success_count += 1
        
        print("=" * 70)
        if success_count == total_tests:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç—Ä–∏–∫–∞–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            print("‚úÖ –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–æ–¥ –∏–∑ _create_summary_metrics_table")
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ—à–ª–æ {success_count} –∏–∑ {total_tests} —Ç–µ—Å—Ç–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        import traceback
        traceback.print_exc()
