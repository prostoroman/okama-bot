#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /portfolio
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_portfolio_keyboard_has_ai_analysis():
    """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É AI-–∞–Ω–∞–ª–∏–∑"""
    from bot import ShansAi
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ShansAi()
    
    # –ú–æ–∫–∞–µ–º Gemini —Å–µ—Ä–≤–∏—Å –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π
    class MockGemini:
        def is_available(self):
            return True
    bot.gemini_service = MockGemini()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
    keyboard = bot._create_portfolio_command_keyboard('test_portfolio')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert keyboard is not None, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ AI-–∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    has_ai_button = False
    for row in keyboard.inline_keyboard:
        for button in row:
            if 'AI-–∞–Ω–∞–ª–∏–∑' in button.text:
                has_ai_button = True
                break
    
    assert has_ai_button, "–ö–Ω–æ–ø–∫–∞ AI-–∞–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"
    print("‚úÖ –ö–Ω–æ–ø–∫–∞ AI-–∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")

def test_portfolio_keyboard_without_gemini():
    """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–µ–∑ Gemini —Å–µ—Ä–≤–∏—Å–∞ –∫–Ω–æ–ø–∫–∞ AI-–∞–Ω–∞–ª–∏–∑ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è"""
    from bot import ShansAi
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ShansAi()
    
    # –ú–æ–∫–∞–µ–º Gemini —Å–µ—Ä–≤–∏—Å –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π
    class MockGemini:
        def is_available(self):
            return False
    bot.gemini_service = MockGemini()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
    keyboard = bot._create_portfolio_command_keyboard('test_portfolio')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert keyboard is not None, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    has_ai_button = False
    for row in keyboard.inline_keyboard:
        for button in row:
            if 'AI-–∞–Ω–∞–ª–∏–∑' in button.text:
                has_ai_button = True
                break
    
    assert not has_ai_button, "–ö–Ω–æ–ø–∫–∞ AI-–∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–∞, —Ö–æ—Ç—è Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    print("‚úÖ –ö–Ω–æ–ø–∫–∞ AI-–∞–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Gemini")

def test_callback_routing():
    """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ callback'–∏ –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    callback_data = 'portfolio_ai_analysis_test_portfolio'
    
    assert callback_data.startswith('portfolio_ai_analysis_'), "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å callback'–∞"
    print("‚úÖ Callback –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å")

def test_metrics_button_uses_summary_table():
    """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –ú–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é"""
    from bot import ShansAi
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ShansAi()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è _create_summary_metrics_table —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    assert hasattr(bot, '_create_summary_metrics_table'), "–§—É–Ω–∫—Ü–∏—è _create_summary_metrics_table –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    print("‚úÖ –§—É–Ω–∫—Ü–∏—è _create_summary_metrics_table —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def test_ai_analysis_handler_exists():
    """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ AI-–∞–Ω–∞–ª–∏–∑–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    from bot import ShansAi
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ShansAi()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    assert hasattr(bot, '_handle_portfolio_ai_analysis_button'), "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ AI-–∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ AI-–∞–Ω–∞–ª–∏–∑–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

if __name__ == '__main__':
    print("üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /portfolio")
    print("=" * 60)
    
    try:
        test_portfolio_keyboard_has_ai_analysis()
        test_portfolio_keyboard_without_gemini()
        test_callback_routing()
        test_metrics_button_uses_summary_table()
        test_ai_analysis_handler_exists()
        
        print("=" * 60)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ö–Ω–æ–ø–∫–∞ –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç _create_summary_metrics_table()")
        print("‚úÖ –ö–Ω–æ–ø–∫–∞ AI-–∞–Ω–∞–ª–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        print("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª AI-–∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é")
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        import traceback
        traceback.print_exc()
