#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_portfolio_metrics_values():
    """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
    from bot import ShansAi
    import okama as ok
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ShansAi()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        symbols = ['SBER.MOEX', 'LKOH.MOEX']
        weights = [0.6, 0.4]
        currency = 'RUB'
        
        portfolio = ok.Portfolio(symbols, weights=weights, ccy=currency)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_table = bot._create_portfolio_summary_metrics_table(portfolio, symbols, weights, currency)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞
        assert portfolio_table is not None, "–¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        assert not portfolio_table.startswith("‚ùå"), f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {portfolio_table}"
        
        print("üìä –°–æ–∑–¥–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫:")
        print(portfolio_table)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —è–≤–ª—è—é—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Ç—Ä–∏–∫
        lines = portfolio_table.split('\n')
        for line in lines:
            if '|' in line and not line.startswith('|') and '–ú–µ—Ç—Ä–∏–∫–∞' not in line:
                parts = line.split('|')
                if len(parts) >= 3:
                    metric_name = parts[1].strip()
                    metric_value = parts[2].strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–≤–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–µ—Ç—Ä–∏–∫–∏
                    assert metric_value != metric_name, f"–ó–Ω–∞—á–µ–Ω–∏–µ '{metric_value}' —Ä–∞–≤–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–µ—Ç—Ä–∏–∫–∏ '{metric_name}'"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞ –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    has_number = any(char.isdigit() for char in metric_value)
                    has_percent = '%' in metric_value
                    has_na = metric_value == 'N/A'
                    
                    assert has_number or has_percent or has_na, f"–ó–Ω–∞—á–µ–Ω–∏–µ '{metric_value}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–µ–ª, –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏–ª–∏ N/A"
        
        print("\n‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        print("‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Ä–∞–≤–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è–º –º–µ—Ç—Ä–∏–∫")
        print("‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç —á–∏—Å–ª–∞, –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–ª–∏ N/A")
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
        print("–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö okama")
        import traceback
        traceback.print_exc()
        return False

def test_specific_metrics():
    """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    from bot import ShansAi
    import okama as ok
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ShansAi()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        symbols = ['SBER.MOEX', 'LKOH.MOEX']
        weights = [0.6, 0.4]
        currency = 'RUB'
        
        portfolio = ok.Portfolio(symbols, weights=weights, ccy=currency)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_table = bot._create_portfolio_summary_metrics_table(portfolio, symbols, weights, currency)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        expected_metrics = [
            "compound return (YTD)",
            "CAGR (5 years)",
            "Risk (19 years, 0 months)",
            "Max drawdown (19 years, 0 months)",
            "Risk free rate",
            "Sharpe Ratio"
        ]
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫:")
        for metric in expected_metrics:
            if metric in portfolio_table:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                lines = portfolio_table.split('\n')
                for line in lines:
                    if metric in line and '|' in line:
                        parts = line.split('|')
                        if len(parts) >= 3:
                            value = parts[2].strip()
                            print(f"   ‚úÖ {metric}: {value}")
                            break
            else:
                print(f"   ‚ùå {metric}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
        return False

if __name__ == '__main__':
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    print("=" * 70)
    
    success_count = 0
    total_tests = 2
    
    try:
        if test_portfolio_metrics_values():
            success_count += 1
        
        if test_specific_metrics():
            success_count += 1
        
        print("=" * 70)
        if success_count == total_tests:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            print("‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ okama.portfolio.describe()")
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ—à–ª–æ {success_count} –∏–∑ {total_tests} —Ç–µ—Å—Ç–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        import traceback
        traceback.print_exc()
