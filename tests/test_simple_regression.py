#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è okama-bot
–§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö mock –æ–±—ä–µ–∫—Ç–æ–≤
"""

import unittest
import sys
import os
import asyncio
from unittest.mock import Mock, AsyncMock, patch
import pandas as pd
import numpy as np

# Add the parent directory to the path to import bot module
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    import okama as ok
    OKAMA_AVAILABLE = True
except ImportError:
    OKAMA_AVAILABLE = False
    print("Warning: okama library not available for testing")

from bot import ShansAi


class TestSimpleRegression(unittest.TestCase):
    """–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.bot = ShansAi()
        self.test_user_id = 12345
        self.test_symbols = ['SPY.US', 'QQQ.US', 'VOO.US']
    
    def test_bot_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        self.assertIsNotNone(self.bot)
        self.assertIsNotNone(self.bot.logger)
        self.assertIsNotNone(self.bot.chart_styles)
        print("‚úÖ Bot initialization test passed")
    
    def test_clean_symbol(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤"""
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        test_cases = [
            ("SPY.US", "SPY.US"),
            ("spy.us", "spy.us"),
            ("SPY\\US", "SPYUS"),
            ("SPY/US", "SPYUS"),
            ("SPY\"US", "SPYUS"),
            ("  SPY.US  ", "SPY.US"),
            ("SPY   US", "SPY US")
        ]
        
        for input_symbol, expected in test_cases:
            result = self.bot.clean_symbol(input_symbol)
            self.assertEqual(result, expected)
            print(f"‚úÖ Symbol cleaning test passed: '{input_symbol}' -> '{result}'")
    
    def test_symbol_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–º–≤–æ–ª–æ–≤"""
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
        test_cases = [
            "SPY.US",
            "SBER.MOEX", 
            "GC.COMM",
            "EURUSD.FX",
            "SPX.INDX"
        ]
        
        for symbol in test_cases:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
            self.assertIsInstance(symbol, str)
            self.assertIn(".", symbol)  # –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ—á–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            print(f"‚úÖ Symbol parsing test passed for {symbol}")
    
    def test_weight_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–µ—Å–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–µ—Å–æ–≤
        test_cases = [
            "SPY.US:0.5",
            "QQQ.US:0.3",
            "VOO.US:0.2"
        ]
        
        for case in test_cases:
            parts = case.split(":")
            self.assertEqual(len(parts), 2)
            symbol = parts[0]
            weight = float(parts[1])
            
            self.assertIsInstance(symbol, str)
            self.assertIsInstance(weight, float)
            self.assertGreater(weight, 0)
            self.assertLessEqual(weight, 1)
            
            print(f"‚úÖ Weight parsing test passed for {case}")
    
    def test_context_store(self):
        """–¢–µ—Å—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context = self.bot._get_user_context(self.test_user_id)
        self.assertIsInstance(context, dict)
        
        # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        test_data = {"test_key": "test_value"}
        self.bot._update_user_context(self.test_user_id, **test_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        saved_context = self.bot._get_user_context(self.test_user_id)
        self.assertEqual(saved_context.get("test_key"), "test_value")
        
        print("‚úÖ Context store test passed")
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
        invalid_symbol = "INVALID_SYMBOL"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –Ω–µ –ø–∞–¥–∞–µ—Ç –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Å–∏–º–≤–æ–ª–µ
        try:
            # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è gracefully
            self.assertIsInstance(invalid_symbol, str)
            print("‚úÖ Error handling test passed")
        except Exception as e:
            self.fail(f"Error handling test failed: {e}")
    
    def test_message_splitting(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        long_message = "A" * 5000  # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–º–∏—Ç–∞ Telegram
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        if hasattr(self.bot, '_split_text_smart'):
            parts = self.bot._split_text_smart(long_message)
            self.assertIsInstance(parts, list)
            self.assertGreater(len(parts), 1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
            for part in parts:
                self.assertLessEqual(len(part), 4096)
            
            print("‚úÖ Message splitting test passed")
    
    @unittest.skipUnless(OKAMA_AVAILABLE, "okama library not available")
    def test_okama_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Okama"""
        try:
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–∫—Ç–∏–≤–∞
            asset = ok.Asset("SPY.US")
            self.assertIsNotNone(asset)
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            if hasattr(asset, 'close_prices'):
                prices = asset.close_prices()
                self.assertIsInstance(prices, pd.Series)
                self.assertGreater(len(prices), 0)
            
            print("‚úÖ Okama integration test passed")
        except Exception as e:
            print(f"‚ö†Ô∏è Okama integration test failed: {e}")
    
    def test_ai_services_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        self.assertIsNotNone(self.bot.yandexgpt_service)
        self.assertIsNotNone(self.bot.gemini_service)
        
        print("‚úÖ AI services availability test passed")
    
    def test_chart_styles_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∏–ª–µ–π –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∏–ª–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã
        self.assertIsNotNone(self.bot.chart_styles)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        self.assertTrue(hasattr(self.bot.chart_styles, 'create_price_chart'))
        self.assertTrue(hasattr(self.bot.chart_styles, 'create_portfolio_wealth_chart'))
        self.assertTrue(hasattr(self.bot.chart_styles, 'save_figure'))
        
        print("‚úÖ Chart styles availability test passed")
    
    def test_configuration_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        from config import Config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        try:
            Config.validate()
            print("‚úÖ Configuration validation test passed")
        except ValueError as e:
            print(f"‚ö†Ô∏è Configuration validation test failed: {e}")
    
    def test_test_command_functions(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–º–∞–Ω–¥—ã /test"""
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ _run_tests
        self.assertTrue(hasattr(self.bot, '_run_tests'))
        self.assertTrue(hasattr(self.bot, '_format_test_results'))
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        test_result = {
            'success': True,
            'stdout': 'Test passed',
            'stderr': '',
            'duration': 1.5,
            'test_type': 'quick'
        }
        
        formatted = self.bot._format_test_results(test_result, 'quick')
        self.assertIsInstance(formatted, str)
        self.assertIn('‚úÖ', formatted)
        self.assertIn('quick', formatted)
        
        print("‚úÖ Test command functions test passed")
    
    def test_button_callback_handlers(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback —Ñ—É–Ω–∫—Ü–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        required_handlers = [
            '_handle_drawdowns_button',
            '_handle_dividends_button',
            '_handle_correlation_button',
            '_handle_risk_metrics_button',
            '_handle_monte_carlo_button',
            '_handle_forecast_button'
        ]
        
        for handler in required_handlers:
            self.assertTrue(hasattr(self.bot, handler), f"Missing handler: {handler}")
        
        print("‚úÖ Button callback handlers test passed")
    
    def run_simple_test(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
        print("=" * 60)
        
        test_methods = [
            'test_bot_initialization',
            'test_clean_symbol',
            'test_symbol_parsing',
            'test_weight_parsing',
            'test_context_store',
            'test_error_handling',
            'test_message_splitting',
            'test_okama_integration',
            'test_ai_services_availability',
            'test_chart_styles_availability',
            'test_configuration_validation',
            'test_test_command_functions',
            'test_button_callback_handlers'
        ]
        
        passed_tests = 0
        failed_tests = 0
        
        for test_method in test_methods:
            try:
                print(f"\nüß™ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: {test_method}")
                getattr(self, test_method)()
                passed_tests += 1
            except Exception as e:
                print(f"‚ùå –¢–µ—Å—Ç {test_method} –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
                failed_tests += 1
        
        print("\n" + "=" * 60)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests / (passed_tests + failed_tests)) * 100:.1f}%")
        
        if failed_tests == 0:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"‚ö†Ô∏è {failed_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.")
        
        return failed_tests == 0


if __name__ == '__main__':
    print("üß™ –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è okama-bot")
    print(f"üìö Okama –¥–æ—Å—Ç—É–ø–µ–Ω: {OKAMA_AVAILABLE}")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    test_instance = TestSimpleRegression()
    test_instance.setUp()
    
    success = test_instance.run_simple_test()
    
    if success:
        print("\nüéØ –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\nüí• –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—è–≤–∏–ª–æ –ø—Ä–æ–±–ª–µ–º—ã!")
        sys.exit(1)
