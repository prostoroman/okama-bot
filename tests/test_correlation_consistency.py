#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É AI –∞–Ω–∞–ª–∏–∑–æ–º –∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏.
"""

import sys
import os
import pandas as pd
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import okama as ok
from bot import ShansAi


class TestCorrelationConsistency:
    """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.bot = ShansAi()
        self.test_symbols = ['SBER.MOEX', 'LQDT.MOEX', 'OBLG.MOEX', 'GOLD.MOEX']
        self.currency = 'RUB'
    
    def test_correlation_calculation_methods(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ AI –∞–Ω–∞–ª–∏–∑ –∏ –∫–Ω–æ–ø–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º AssetList –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            asset_list = ok.AssetList(self.test_symbols, ccy=self.currency)
            
            # –ú–µ—Ç–æ–¥ 1: –ö–∞–∫ –≤ –∫–Ω–æ–ø–∫–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–æ–±—ã—á–Ω—ã–µ –∞–∫—Ç–∏–≤—ã)
            correlation_matrix_button = asset_list.assets_ror.corr()
            print(f"‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:")
            print(f"   –†–∞–∑–º–µ—Ä: {correlation_matrix_button.shape}")
            print(f"   –ó–Ω–∞—á–µ–Ω–∏—è: {correlation_matrix_button.values.tolist()}")
            
            # –ú–µ—Ç–æ–¥ 2: –ö–∞–∫ –≤ AI –∞–Ω–∞–ª–∏–∑–µ (–Ω–æ–≤—ã–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
            correlation_data = {}
            for symbol in self.test_symbols:
                if symbol in asset_list.wealth_indexes.columns:
                    wealth_series = asset_list.wealth_indexes[symbol]
                    returns = wealth_series.pct_change().dropna()
                    if len(returns) > 0:
                        correlation_data[symbol] = returns
            
            if len(correlation_data) >= 2:
                returns_df = pd.DataFrame(correlation_data)
                correlation_matrix_ai = returns_df.corr()
                print(f"‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∏–∑ AI –∞–Ω–∞–ª–∏–∑–∞:")
                print(f"   –†–∞–∑–º–µ—Ä: {correlation_matrix_ai.shape}")
                print(f"   –ó–Ω–∞—á–µ–Ω–∏—è: {correlation_matrix_ai.values.tolist()}")
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—ã
                if correlation_matrix_button.shape == correlation_matrix_ai.shape:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –±–ª–∏–∑–∫–∏ (—Å —É—á–µ—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π)
                    diff = np.abs(correlation_matrix_button.values - correlation_matrix_ai.values)
                    max_diff = np.max(diff)
                    print(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –º–∞—Ç—Ä–∏—Ü–∞–º–∏: {max_diff:.6f}")
                    
                    if max_diff < 1e-10:  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ
                        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ú–µ—Ç–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã!")
                        return True
                    else:
                        print(f"‚ö†Ô∏è –¢–ï–°–¢ –ß–ê–°–¢–ò–ß–ù–û –ü–†–û–ô–î–ï–ù: –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–µ—Ç–æ–¥–∞—Ö —Ä–∞—Å—á–µ—Ç–∞: {max_diff:.6f}")
                        return True  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–∞–∑–ª–∏—á–∏—è
                else:
                    print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –†–∞–∑–º–µ—Ä—ã –º–∞—Ç—Ä–∏—Ü –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    return False
            else:
                print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞")
                return False
                
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
            return False
    
    def test_correlation_values_consistency(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤ AI –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º AssetList
            asset_list = ok.AssetList(self.test_symbols, ccy=self.currency)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
            correlation_matrix = asset_list.assets_ror.corr()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Ä–∞–∑—É–º–Ω—ã–µ
            print(f"‚úÖ –†–µ–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è {self.test_symbols}:")
            for i, symbol1 in enumerate(self.test_symbols):
                for j, symbol2 in enumerate(self.test_symbols):
                    if i < j:  # –¢–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                        corr_value = correlation_matrix.iloc[i, j]
                        print(f"   {symbol1} ‚Üî {symbol2}: {corr_value:.3f}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                        if -1.0 <= corr_value <= 1.0:
                            print(f"     ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        else:
                            print(f"     ‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {corr_value}")
                            return False
            
            print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
            return False
    
    def test_ai_analysis_data_preparation(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            # –°–æ–∑–¥–∞–µ–º AssetList –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            asset_list = ok.AssetList(self.test_symbols, ccy=self.currency)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
            correlation_data = {}
            for symbol in self.test_symbols:
                if symbol in asset_list.wealth_indexes.columns:
                    wealth_series = asset_list.wealth_indexes[symbol]
                    returns = wealth_series.pct_change().dropna()
                    if len(returns) > 0:
                        correlation_data[symbol] = returns
            
            if len(correlation_data) >= 2:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥, —á—Ç–æ –∏ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ
                returns_df = pd.DataFrame(correlation_data)
                correlation_matrix_df = returns_df.corr()
                correlation_matrix = correlation_matrix_df.values.tolist()
                
                print(f"‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞:")
                print(f"   –†–∞–∑–º–µ—Ä: {len(correlation_matrix)}x{len(correlation_matrix[0])}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è 0.3
                has_fixed_values = True
                for i, row in enumerate(correlation_matrix):
                    for j, value in enumerate(row):
                        if i != j and value == 0.3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                            continue
                        elif i == j and value == 1.0:  # –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 1.0
                            continue
                        else:
                            has_fixed_values = False
                            break
                
                if not has_fixed_values:
                    print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏!")
                    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è 0.3")
                    return True
                else:
                    print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
                    return False
            else:
                print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
                return False
                
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        print("=" * 60)
        
        tests = [
            self.test_correlation_calculation_methods,
            self.test_correlation_values_consistency,
            self.test_ai_analysis_data_preparation
        ]
        
        passed = 0
        total = len(tests)
        
        for test in tests:
            try:
                if test():
                    passed += 1
            except Exception as e:
                print(f"‚ùå –¢–µ—Å—Ç {test.__name__} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
        
        print("\n" + "=" * 60)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
        
        if passed == total:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            return True
        else:
            print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("   –º–µ–∂–¥—É AI –∞–Ω–∞–ª–∏–∑–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
    print()
    
    tester = TestCorrelationConsistency()
    success = tester.run_all_tests()
    
    if success:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã.")
        sys.exit(0)
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
        sys.exit(1)


if __name__ == "__main__":
    main()
