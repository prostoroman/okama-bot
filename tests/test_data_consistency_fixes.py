#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot import ShansAi
from services.gemini_service import GeminiService
import okama as ok

async def test_gemini_data_no_duplication():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Gemini"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Gemini")
    print("=" * 60)
    
    bot = ShansAi()
    gemini_service = GeminiService()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    symbols = ['SBER.MOEX', 'LKOH.MOEX']
    currency = 'RUB'
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
    portfolio_contexts = []
    expanded_symbols = []
    
    for symbol in symbols:
        try:
            asset = ok.Asset(symbol)
            portfolio_contexts.append({
                'portfolio_object': None,
                'portfolio_symbols': [symbol]
            })
            expanded_symbols.append(symbol)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞ {symbol}: {e}")
            portfolio_contexts.append({
                'portfolio_object': None,
                'portfolio_symbols': [symbol]
            })
            expanded_symbols.append(symbol)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Gemini –∞–Ω–∞–ª–∏–∑–∞
        data_info = await bot._prepare_data_for_analysis(
            symbols=symbols,
            currency=currency,
            expanded_symbols=expanded_symbols,
            portfolio_contexts=portfolio_contexts,
            user_id=12345
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Gemini
        description = gemini_service._prepare_data_description(data_info)
        
        print(f"\nüìã –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–æ")
        print(f"   –†–∞–∑–º–µ—Ä: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∞ "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò"
        has_performance_section = "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò" in description
        print(f"   ‚úÖ –†–∞–∑–¥–µ–ª '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏' —É–¥–∞–ª–µ–Ω: {'–ù–µ—Ç' if not has_performance_section else '–ï—Å—Ç—å'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫
        has_main_table = "–û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò –ê–ö–¢–ò–í–û–í" in description
        print(f"   ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫: {'–ï—Å—Ç—å' if has_main_table else '–ù–µ—Ç'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã describe
        has_describe_table = "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê" in description
        print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ describe: {'–ï—Å—Ç—å' if has_describe_table else '–ù–µ—Ç'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        has_correlations = "–ö–û–†–†–ï–õ–Ø–¶–ò–û–ù–ù–ê–Ø –ú–ê–¢–†–ò–¶–ê" in description
        print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞: {'–ï—Å—Ç—å' if has_correlations else '–ù–µ—Ç'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü—ã
        has_efficient_frontier = "–≠–§–§–ï–ö–¢–ò–í–ù–û–ô –ì–†–ê–ù–ò–¶–´" in description
        print(f"   ‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞: {'–ï—Å—Ç—å' if has_efficient_frontier else '–ù–µ—Ç'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        has_instructions = "–ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê" in description
        print(f"   ‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {'–ï—Å—Ç—å' if has_instructions else '–ù–µ—Ç'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–∞
        has_disclaimer = "–¥–∏—Å–∫–ª–µ–π–º–µ—Ä" in description.lower() or "–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π" in description
        print(f"   ‚úÖ –î–∏—Å–∫–ª–µ–π–º–µ—Ä: {'–ï—Å—Ç—å' if has_disclaimer else '–ù–µ—Ç'}")
        
        success = (not has_performance_section and has_main_table and 
                  has_describe_table and has_correlations and has_instructions and has_disclaimer)
        
        if success:
            print(f"\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ!")
        else:
            print(f"\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        
        return success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_data_source_consistency():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    symbols = ['SBER.MOEX', 'LKOH.MOEX']
    currency = 'RUB'
    
    try:
        # –°–æ–∑–¥–∞–µ–º AssetList –∫–∞–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        asset_list = ok.AssetList(symbols, ccy=currency)
        
        print(f"üìä AssetList —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ AssetList
        if hasattr(asset_list, 'wealth_indexes'):
            wealth_indexes = asset_list.wealth_indexes
            print(f"\nüìà AssetList wealth indexes:")
            print(f"   –†–∞–∑–º–µ—Ä: {wealth_indexes.shape}")
            print(f"   –ü–µ—Ä–∏–æ–¥: {wealth_indexes.index[0]} - {wealth_indexes.index[-1]}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {len(wealth_indexes)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ —Å –Ω–æ–≤—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        
        for symbol in symbols:
            try:
                asset = ok.Asset(symbol)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: close_monthly -> wealth_index -> adj_close -> close_daily
                if hasattr(asset, 'close_monthly') and asset.close_monthly is not None:
                    selected_data = asset.close_monthly
                    source = 'close_monthly'
                elif hasattr(asset, 'wealth_index') and asset.wealth_index is not None:
                    selected_data = asset.wealth_index
                    source = 'wealth_index'
                elif hasattr(asset, 'adj_close') and asset.adj_close is not None:
                    selected_data = asset.adj_close
                    source = 'adj_close'
                elif hasattr(asset, 'close_daily') and asset.close_daily is not None:
                    selected_data = asset.close_daily
                    source = 'close_daily'
                else:
                    selected_data = None
                    source = 'none'
                
                print(f"\nüìä {symbol}:")
                print(f"   –í—ã–±—Ä–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {source}")
                
                if selected_data is not None and source == 'close_monthly':
                    print(f"   –ü–µ—Ä–∏–æ–¥: {selected_data.index[0]} - {selected_data.index[-1]}")
                    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {len(selected_data)}")
                    
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å AssetList
                    if hasattr(asset_list, 'wealth_indexes') and symbol in asset_list.wealth_indexes.columns:
                        assetlist_data = asset_list.wealth_indexes[symbol]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö (–º–µ—Å—è—á–Ω—ã–µ)
                        both_monthly = (len(selected_data) < 500 and len(assetlist_data) < 500)  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        print(f"   ‚úÖ –û–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {'–î–∞' if both_monthly else '–ù–µ—Ç'}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫
                        count_diff = abs(len(selected_data) - len(assetlist_data))
                        counts_close = count_diff <= 5  # –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ä–∞–∑–Ω–∏—Ü—É
                        print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –±–ª–∏–∑–∫–æ: {'–î–∞' if counts_close else f'–ù–µ—Ç (—Ä–∞–∑–Ω–∏—Ü–∞: {count_diff})'}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ AssetList: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Gemini
    gemini_success = await test_gemini_data_no_duplication()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    data_source_success = test_data_source_consistency()
    
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 60)
    
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
    print(f"   - –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Gemini: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if gemini_success else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"   - –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if data_source_success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    if gemini_success and data_source_success:
        print("\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –£–°–ü–ï–®–ù–´!")
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ")
        print("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è Gemini –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã")
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ï –ó–ê–í–ï–†–®–ï–ù–´")
        print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
