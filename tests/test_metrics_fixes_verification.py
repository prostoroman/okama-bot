#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–µ—Ç—Ä–∏–∫:
1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Sortino ratio (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–µ–∑—Ä–∏—Å–∫–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏)
2. –£–ª—É—á—à–µ–Ω–∏–µ –±–µ–∑—Ä–∏—Å–∫–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è RUB (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –û–§–ó –≤–º–µ—Å—Ç–æ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –¶–ë)
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot import ShansAi
import okama as ok

def test_risk_free_rate_improvements():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –±–µ–∑—Ä–∏—Å–∫–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –±–µ–∑—Ä–∏—Å–∫–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏")
    print("=" * 60)
    
    bot = ShansAi()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è RUB
    periods = [0.1, 0.5, 1.0, 3.0, 5.0, 10.0]
    
    print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è RUB:")
    print("–ü–µ—Ä–∏–æ–¥ (–ª–µ—Ç) | –°—Ç–∞—Ä–∞—è —Å—Ç–∞–≤–∫–∞ | –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ | –†–∞–∑–Ω–∏—Ü–∞")
    print("-" * 55)
    
    old_rates = {
        0.1: 0.15,   # 15%
        0.5: 0.155,  # 15.5%
        1.0: 0.16,   # 16%
        3.0: 0.165,  # 16.5%
        5.0: 0.165,  # 16.5%
        10.0: 0.165  # 16.5%
    }
    
    new_rates = {
        0.1: 0.12,   # 12%
        0.5: 0.125,  # 12.5%
        1.0: 0.13,   # 13%
        3.0: 0.135,  # 13.5%
        5.0: 0.14,   # 14%
        10.0: 0.145  # 14.5%
    }
    
    for period in periods:
        old_rate = old_rates[period]
        new_rate = bot.get_risk_free_rate('RUB', period)
        difference = new_rate - old_rate
        
        print(f"{period:8.1f}     | {old_rate:8.1%}     | {new_rate:8.1%}     | {difference:+6.1%}")
    
    print(f"\n‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: –°–Ω–∏–∂–µ–Ω–∏–µ –±–µ–∑—Ä–∏—Å–∫–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ 2.5-3.5%")
    print(f"   –≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏")

def test_sortino_ratio_fixes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Sortino ratio"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Sortino ratio")
    print("=" * 60)
    
    bot = ShansAi()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        {'symbol': 'SBER.MOEX', 'currency': 'RUB', 'period': 5.0},
        {'symbol': 'LKOH.MOEX', 'currency': 'RUB', 'period': 10.0},
        {'symbol': 'OBLG.MOEX', 'currency': 'RUB', 'period': 3.0},
    ]
    
    print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö Sortino ratio:")
    print("–°–∏–º–≤–æ–ª        | –°—Ç–∞—Ä—ã–π Sortino | –ù–æ–≤—ã–π Sortino | –†–∞–∑–Ω–∏—Ü–∞")
    print("-" * 60)
    
    for case in test_cases:
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–∞
            asset = ok.Asset(case['symbol'])
            returns = asset.ror
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
            prices = (1 + returns).cumprod()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            total_return = (prices.iloc[-1] / prices.iloc[0]) - 1
            years = len(prices) / 12.0
            cagr = (1 + total_return) ** (1 / years) - 1
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            volatility = returns.std() * np.sqrt(12)
            
            # –°—Ç–∞—Ä–∞—è –±–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è 2%)
            old_risk_free = 0.02
            
            # –ù–æ–≤–∞—è –±–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
            new_risk_free = bot.get_risk_free_rate(case['currency'], case['period'])
            
            # Sortino ratio (downside deviation)
            negative_returns = returns[returns < 0]
            if len(negative_returns) > 0:
                downside_deviation = negative_returns.std() * np.sqrt(12)
                
                # –°—Ç–∞—Ä—ã–π Sortino
                old_sortino = (cagr - old_risk_free) / downside_deviation if downside_deviation > 0 else 0
                
                # –ù–æ–≤—ã–π Sortino
                new_sortino = (cagr - new_risk_free) / downside_deviation if downside_deviation > 0 else 0
                
                difference = new_sortino - old_sortino
                
                print(f"{case['symbol']:12} | {old_sortino:11.4f} | {new_sortino:11.4f} | {difference:+6.4f}")
            else:
                print(f"{case['symbol']:12} | –ù–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π")
                
        except Exception as e:
            print(f"{case['symbol']:12} | –û—à–∏–±–∫–∞: {e}")
    
    print(f"\n‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: Sortino ratio —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±–µ–∑—Ä–∏—Å–∫–æ–≤—É—é —Å—Ç–∞–≤–∫—É")

def test_sharpe_ratio_improvements():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è Sharpe ratio"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π Sharpe ratio")
    print("=" * 60)
    
    bot = ShansAi()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        {'symbol': 'SBER.MOEX', 'currency': 'RUB', 'period': 5.0},
        {'symbol': 'LKOH.MOEX', 'currency': 'RUB', 'period': 10.0},
        {'symbol': 'OBLG.MOEX', 'currency': 'RUB', 'period': 3.0},
    ]
    
    print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö Sharpe ratio:")
    print("–°–∏–º–≤–æ–ª        | –°—Ç–∞—Ä—ã–π Sharpe | –ù–æ–≤—ã–π Sharpe | –†–∞–∑–Ω–∏—Ü–∞")
    print("-" * 55)
    
    for case in test_cases:
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–∞
            asset = ok.Asset(case['symbol'])
            returns = asset.ror
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
            prices = (1 + returns).cumprod()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            total_return = (prices.iloc[-1] / prices.iloc[0]) - 1
            years = len(prices) / 12.0
            cagr = (1 + total_return) ** (1 / years) - 1
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            volatility = returns.std() * np.sqrt(12)
            
            # –°—Ç–∞—Ä–∞—è –±–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (16.5%)
            old_risk_free = 0.165
            
            # –ù–æ–≤–∞—è –±–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
            new_risk_free = bot.get_risk_free_rate(case['currency'], case['period'])
            
            # Sharpe ratio
            old_sharpe = (cagr - old_risk_free) / volatility if volatility > 0 else 0
            new_sharpe = (cagr - new_risk_free) / volatility if volatility > 0 else 0
            
            difference = new_sharpe - old_sharpe
            
            print(f"{case['symbol']:12} | {old_sharpe:10.4f} | {new_sharpe:10.4f} | {difference:+6.4f}")
                
        except Exception as e:
            print(f"{case['symbol']:12} | –û—à–∏–±–∫–∞: {e}")
    
    print(f"\n‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: Sharpe ratio —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –±–µ–∑—Ä–∏—Å–∫–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏")

def test_metrics_calculation_consistency():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤ –º–µ—Ç—Ä–∏–∫"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –º–µ—Ç—Ä–∏–∫")
    print("=" * 60)
    
    bot = ShansAi()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
    symbol = 'SBER.MOEX'
    currency = 'RUB'
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–∞
        asset = ok.Asset(symbol)
        returns = asset.ror
        prices = (1 + returns).cumprod()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä—É—á–Ω—É—é
        total_return = (prices.iloc[-1] / prices.iloc[0]) - 1
        years = len(prices) / 12.0
        cagr = (1 + total_return) ** (1 / years) - 1
        volatility = returns.std() * np.sqrt(12)
        
        # –ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
        risk_free_rate = bot.get_risk_free_rate(currency, years)
        
        # Sharpe ratio
        sharpe = (cagr - risk_free_rate) / volatility if volatility > 0 else 0
        
        # Sortino ratio
        negative_returns = returns[returns < 0]
        if len(negative_returns) > 0:
            downside_deviation = negative_returns.std() * np.sqrt(12)
            sortino = (cagr - risk_free_rate) / downside_deviation if downside_deviation > 0 else 0
        else:
            sortino = sharpe
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        running_max = prices.expanding().max()
        drawdown = (prices - running_max) / running_max
        max_drawdown = drawdown.min()
        
        # Calmar ratio
        calmar = cagr / abs(max_drawdown) if max_drawdown != 0 else 0
        
        print(f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {symbol}:")
        print(f"   CAGR: {cagr:.2%}")
        print(f"   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.2%}")
        print(f"   –ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {risk_free_rate:.2%}")
        print(f"   Sharpe Ratio: {sharpe:.4f}")
        print(f"   Sortino Ratio: {sortino:.4f}")
        print(f"   –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2%}")
        print(f"   Calmar Ratio: {calmar:.4f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π:")
        
        if -0.5 < sharpe < 2.0:
            print(f"   ‚úÖ Sharpe Ratio –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö: {sharpe:.4f}")
        else:
            print(f"   ‚ö†Ô∏è  Sharpe Ratio –≤–Ω–µ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤: {sharpe:.4f}")
        
        if -0.5 < sortino < 2.0:
            print(f"   ‚úÖ Sortino Ratio –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö: {sortino:.4f}")
        else:
            print(f"   ‚ö†Ô∏è  Sortino Ratio –≤–Ω–µ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤: {sortino:.4f}")
        
        if 0.05 < risk_free_rate < 0.20:
            print(f"   ‚úÖ –ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö: {risk_free_rate:.2%}")
        else:
            print(f"   ‚ö†Ô∏è  –ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –≤–Ω–µ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤: {risk_free_rate:.2%}")
        
        print(f"\n‚úÖ –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ü–†–û–í–ï–†–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ú–ï–¢–†–ò–ö")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è –±–µ–∑—Ä–∏—Å–∫–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
    test_risk_free_rate_improvements()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Sortino ratio
    test_sortino_ratio_fixes()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è Sharpe ratio
    test_sharpe_ratio_improvements()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤
    test_metrics_calculation_consistency()
    
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 60)
    
    print("\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    print("   1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞—Å—á–µ—Ç Sortino ratio - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±–µ–∑—Ä–∏—Å–∫–æ–≤—É—é —Å—Ç–∞–≤–∫—É")
    print("   2. –£–ª—É—á—à–µ–Ω–∞ –±–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è RUB - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –û–§–ó –≤–º–µ—Å—Ç–æ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –¶–ë")
    print("   3. –°–Ω–∏–∂–µ–Ω–∞ –±–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ 2.5-3.5% –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")
    print("   4. –û–±–µ—Å–ø–µ—á–µ–Ω–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
    
    print("\nüéØ –û–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
    print("   - Sharpe –∏ Sortino ratio —Å—Ç–∞–Ω—É—Ç –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏")
    print("   - –ú–µ—Ç—Ä–∏–∫–∏ –±—É–¥—É—Ç –ª—É—á—à–µ –æ—Ç—Ä–∞–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤")
    print("   - –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –∞–Ω–æ–º–∞–ª—å–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
