#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–Ω–æ–ø–∫–∏ AI-–∞–Ω–∞–ª–∏–∑:
1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –º–æ–∑–≥ üß† –∫ –∫–Ω–æ–ø–∫–µ AI-–∞–Ω–∞–ª–∏–∑
2. –ü–µ—Ä–µ–Ω–æ—Å –∫–Ω–æ–ø–∫–∏ AI-–∞–Ω–∞–ª–∏–∑ –≤ –æ–¥–∏–Ω —Ä—è–¥ —Å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü–µ–π
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ AI-–∞–Ω–∞–ª–∏–∑–∞
"""

import unittest
from unittest.mock import Mock, patch, AsyncMock
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot import ShansAi


class TestAIAnalysisKeyboardFix(unittest.TestCase):
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–Ω–æ–ø–∫–∏ AI-–∞–Ω–∞–ª–∏–∑"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.bot = ShansAi()
        
        # –ú–æ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        self.bot.gemini_service = Mock()
        self.bot.gemini_service.is_available.return_value = True
        
        # –ú–æ–∫–∞–µ–º logger
        self.bot.logger = Mock()
        
        # –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.bot._get_user_context = Mock()
        self.bot._get_user_context.return_value = {
            'current_symbols': ['AAPL', 'GOOGL'],
            'current_currency': 'USD',
            'expanded_symbols': ['AAPL', 'GOOGL'],
            'portfolio_contexts': []
        }
        
        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.bot._send_ephemeral_message = AsyncMock()
        self.bot._send_callback_message_with_keyboard_removal = AsyncMock()
        self.bot._prepare_data_for_analysis = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        self.bot.gemini_service.analyze_data.return_value = {
            'success': True,
            'analysis': '–¢–µ—Å—Ç–æ–≤—ã–π AI-–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö'
        }
    
    def test_keyboard_structure_with_gemini_available(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ–≥–¥–∞ Gemini –¥–æ—Å—Ç—É–ø–µ–Ω"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç update
        update = Mock()
        update.effective_user.id = 12345
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = self.bot._create_compare_command_keyboard(['AAPL', 'GOOGL'], 'USD', update)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.assertIsNotNone(keyboard)
        self.assertIsNotNone(keyboard.inline_keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤
        self.assertEqual(len(keyboard.inline_keyboard), 4)  # 4 —Ä—è–¥–∞ –∫–Ω–æ–ø–æ–∫
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —Ä—è–¥ (–î–∏–≤–∏–¥–µ–Ω–¥—ã –∏ –ü—Ä–æ—Å–∞–¥–∫–∏)
        first_row = keyboard.inline_keyboard[0]
        self.assertEqual(len(first_row), 2)
        self.assertEqual(first_row[0].text, "üí∞ –î–∏–≤–∏–¥–µ–Ω–¥—ã")
        self.assertEqual(first_row[1].text, "üìâ –ü—Ä–æ—Å–∞–¥–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π —Ä—è–¥ (–ú–µ—Ç—Ä–∏–∫–∏ –∏ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è)
        second_row = keyboard.inline_keyboard[1]
        self.assertEqual(len(second_row), 2)
        self.assertEqual(second_row[0].text, "üìä –ú–µ—Ç—Ä–∏–∫–∏")
        self.assertEqual(second_row[1].text, "üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ—Ç–∏–π —Ä—è–¥ (–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –∏ AI-–∞–Ω–∞–ª–∏–∑)
        third_row = keyboard.inline_keyboard[2]
        self.assertEqual(len(third_row), 2)
        self.assertEqual(third_row[0].text, "üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞")
        self.assertEqual(third_row[1].text, "üß† AI-–∞–Ω–∞–ª–∏–∑")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏ –º–æ–∑–≥
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ (–í –ü–æ—Ä—Ç—Ñ–µ–ª—å)
        fourth_row = keyboard.inline_keyboard[3]
        self.assertEqual(len(fourth_row), 1)
        self.assertEqual(fourth_row[0].text, "üíº –í –ü–æ—Ä—Ç—Ñ–µ–ª—å")
    
    def test_keyboard_structure_without_gemini(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ–≥–¥–∞ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        # –û—Ç–∫–ª—é—á–∞–µ–º Gemini
        self.bot.gemini_service.is_available.return_value = False
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç update
        update = Mock()
        update.effective_user.id = 12345
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = self.bot._create_compare_command_keyboard(['AAPL', 'GOOGL'], 'USD', update)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.assertIsNotNone(keyboard)
        self.assertIsNotNone(keyboard.inline_keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 4, –Ω–æ —Ç—Ä–µ—Ç–∏–π —Ä—è–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É)
        self.assertEqual(len(keyboard.inline_keyboard), 4)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ—Ç–∏–π —Ä—è–¥ (—Ç–æ–ª—å–∫–æ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞)
        third_row = keyboard.inline_keyboard[2]
        self.assertEqual(len(third_row), 1)
        self.assertEqual(third_row[0].text, "üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞")
    
    @patch('bot.ShansAi._send_callback_message_with_keyboard_removal')
    async def test_ai_analysis_shows_keyboard(self, mock_send_message):
        """–¢–µ—Å—Ç —á—Ç–æ AI-–∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        update = Mock()
        context = Mock()
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é AI-–∞–Ω–∞–ª–∏–∑–∞
        await self.bot._handle_data_analysis_compare_button(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
        self.assertTrue(mock_send_message.called)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –≤—ã–∑–æ–≤–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω reply_markup (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
        call_args = mock_send_message.call_args
        self.assertIn('reply_markup', call_args.kwargs)
        self.assertIsNotNone(call_args.kwargs['reply_markup'])
    
    def test_ai_analysis_button_callback_data(self):
        """–¢–µ—Å—Ç callback_data –∫–Ω–æ–ø–∫–∏ AI-–∞–Ω–∞–ª–∏–∑"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç update
        update = Mock()
        update.effective_user.id = 12345
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = self.bot._create_compare_command_keyboard(['AAPL', 'GOOGL'], 'USD', update)
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É AI-–∞–Ω–∞–ª–∏–∑
        ai_button = None
        for row in keyboard.inline_keyboard:
            for button in row:
                if button.text == "üß† AI-–∞–Ω–∞–ª–∏–∑":
                    ai_button = button
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data
        self.assertIsNotNone(ai_button)
        self.assertEqual(ai_button.callback_data, "data_analysis_compare")


if __name__ == '__main__':
    unittest.main()