#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è okama.Rate –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ–∑—Ä–∏—Å–∫–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot import ShansAi
import okama as ok

def test_okama_rates_availability():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–æ–∫ –≤ okama.Rate"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∞–≤–æ–∫ –≤ okama.Rate")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    rate_symbols = [
        'US_EFFR.RATE',
        'EU_DFR.RATE',
        'EU_MLR.RATE',
        'EU_MRO.RATE',
        'RUS_CBR.RATE',
        'RUONIA.RATE',
        'RUONIA_AVG_1M.RATE',
        'RUONIA_AVG_3M.RATE',
        'RUONIA_AVG_6M.RATE',
        'CHN_LPR1.RATE',
        'CHN_LPR5.RATE',
        'UK_BR.RATE',
        'ISR_IR.RATE'
    ]
    
    available_rates = {}
    
    for rate_symbol in rate_symbols:
        try:
            rate_obj = ok.Rate(rate_symbol)
            rate_values = rate_obj.values_monthly
            
            if rate_values is not None and len(rate_values) > 0:
                avg_rate = rate_values.mean()
                available_rates[rate_symbol] = {
                    'available': True,
                    'avg_rate': float(avg_rate),
                    'data_points': len(rate_values),
                    'period': f"{rate_values.index[0]} - {rate_values.index[-1]}"
                }
                print(f"‚úÖ {rate_symbol}: {avg_rate:.4f} ({len(rate_values)} —Ç–æ—á–µ–∫)")
            else:
                available_rates[rate_symbol] = {'available': False}
                print(f"‚ùå {rate_symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            available_rates[rate_symbol] = {'available': False, 'error': str(e)}
            print(f"‚ùå {rate_symbol}: –û—à–∏–±–∫–∞ - {e}")
    
    return available_rates

def test_currency_rate_mapping():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –≤–∞–ª—é—Ç –Ω–∞ —Å—Ç–∞–≤–∫–∏"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –≤–∞–ª—é—Ç –Ω–∞ —Å—Ç–∞–≤–∫–∏")
    print("=" * 60)
    
    bot = ShansAi()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã –∏ –ø–µ—Ä–∏–æ–¥—ã
    test_cases = [
        {'currency': 'USD', 'period': 1.0},
        {'currency': 'EUR', 'period': 2.0},
        {'currency': 'RUB', 'period': 0.5},
        {'currency': 'RUB', 'period': 1.0},
        {'currency': 'RUB', 'period': 5.0},
        {'currency': 'CNY', 'period': 1.0},
        {'currency': 'CNY', 'period': 6.0},
        {'currency': 'GBP', 'period': 1.0},
        {'currency': 'ILS', 'period': 1.0},
        {'currency': 'HKD', 'period': 1.0},  # –î–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É
    ]
    
    print("\nüìä –ú–∞–ø–ø–∏–Ω–≥ –≤–∞–ª—é—Ç –Ω–∞ —Å—Ç–∞–≤–∫–∏:")
    print("–í–∞–ª—é—Ç–∞ | –ü–µ—Ä–∏–æ–¥ | –°—Ç–∞–≤–∫–∏ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏")
    print("-" * 50)
    
    for case in test_cases:
        currency = case['currency']
        period = case['period']
        
        try:
            rate_symbols = bot._get_rate_symbol_for_currency(currency, period)
            print(f"{currency:6} | {period:6.1f} | {', '.join(rate_symbols) if rate_symbols else '–ù–µ—Ç —Å—Ç–∞–≤–æ–∫'}")
        except Exception as e:
            print(f"{currency:6} | {period:6.1f} | –û—à–∏–±–∫–∞: {e}")

def test_risk_free_rate_calculation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –±–µ–∑—Ä–∏—Å–∫–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º okama.Rate"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –±–µ–∑—Ä–∏—Å–∫–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏")
    print("=" * 60)
    
    bot = ShansAi()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        {'currency': 'USD', 'period': 1.0},
        {'currency': 'EUR', 'period': 2.0},
        {'currency': 'RUB', 'period': 0.5},
        {'currency': 'RUB', 'period': 1.0},
        {'currency': 'RUB', 'period': 5.0},
        {'currency': 'CNY', 'period': 1.0},
        {'currency': 'CNY', 'period': 6.0},
        {'currency': 'GBP', 'period': 1.0},
        {'currency': 'ILS', 'period': 1.0},
        {'currency': 'HKD', 'period': 1.0},
    ]
    
    print("\nüìä –†–∞—Å—á–µ—Ç –±–µ–∑—Ä–∏—Å–∫–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫:")
    print("–í–∞–ª—é—Ç–∞ | –ü–µ—Ä–∏–æ–¥ | –°—Ç–∞–≤–∫–∞ | –ò—Å—Ç–æ—á–Ω–∏–∫")
    print("-" * 45)
    
    for case in test_cases:
        currency = case['currency']
        period = case['period']
        
        try:
            rate = bot.get_risk_free_rate(currency, period)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç–∞–≤–∫–∏
            if currency.upper() == 'HKD':
                source = "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ –∏–∑ okama
                try:
                    okama_rate = bot._get_okama_rate_data(currency, period)
                    if okama_rate is not None:
                        source = "okama.Rate"
                    else:
                        source = "Fallback"
                except:
                    source = "Fallback"
            
            print(f"{currency:6} | {period:6.1f} | {rate:6.1%} | {source}")
            
        except Exception as e:
            print(f"{currency:6} | {period:6.1f} | –û—à–∏–±–∫–∞: {e}")

def test_rate_data_quality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫
    key_rates = [
        'US_EFFR.RATE',
        'RUS_CBR.RATE',
        'RUONIA_AVG_6M.RATE',
        'CHN_LPR1.RATE'
    ]
    
    for rate_symbol in key_rates:
        try:
            rate_obj = ok.Rate(rate_symbol)
            rate_values = rate_obj.values_monthly
            
            if rate_values is not None and len(rate_values) > 0:
                print(f"\nüìä {rate_symbol}:")
                print(f"   –ü–µ—Ä–∏–æ–¥: {rate_values.index[0]} - {rate_values.index[-1]}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {len(rate_values)}")
                print(f"   –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {rate_values.mean():.4f}")
                print(f"   –ú–∏–Ω–∏–º—É–º: {rate_values.min():.4f}")
                print(f"   –ú–∞–∫—Å–∏–º—É–º: {rate_values.max():.4f}")
                print(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {rate_values.std():.4f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
                if rate_values.std() > rate_values.mean():
                    print(f"   ‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∫–∏")
                
                if rate_values.min() < 0:
                    print(f"   ‚ö†Ô∏è  –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏")
                    
            else:
                print(f"‚ùå {rate_symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            print(f"‚ùå {rate_symbol}: –û—à–∏–±–∫–∞ - {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ü–†–û–í–ï–†–ö–ò OKAMA.RATE")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–æ–∫
    available_rates = test_okama_rates_availability()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥ –≤–∞–ª—é—Ç
    test_currency_rate_mapping()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –±–µ–∑—Ä–∏—Å–∫–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
    test_risk_free_rate_calculation()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    test_rate_data_quality()
    
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 60)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
    total_rates = len(available_rates)
    available_count = sum(1 for rate in available_rates.values() if rate.get('available', False))
    
    print(f"–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total_rates}")
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {available_count}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {(available_count/total_rates)*100:.1f}%")
    
    if available_count >= total_rates * 0.7:
        print("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã - okama.Rate –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
    elif available_count >= total_rates * 0.5:
        print("‚ö†Ô∏è  –ü–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–∞–≤–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã - okama.Rate —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–º")
    else:
        print("‚ùå –ú–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ - –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback —Å—Ç–∞–≤–∫–∏")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
