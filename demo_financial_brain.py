#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Okama Financial Brain

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.financial_brain_enhanced import EnhancedOkamaFinancialBrain
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def demo_financial_brain():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Financial Brain"""
    print("üß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Okama Financial Brain")
    print("=" * 60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        brain = EnhancedOkamaFinancialBrain()
        print("‚úÖ Financial Brain –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        print("\nüìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:")
        print("-" * 40)
        
        demo_queries = [
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π Apple",
            "–°—Ä–∞–≤–Ω–∏ –∑–æ–ª–æ—Ç–æ –∏ —Å–µ—Ä–µ–±—Ä–æ", 
            "–ü–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ VOO.US –∏ AGG.US —Å –≤–µ—Å–∞–º–∏ 60% –∏ 40%",
            "–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ –°–®–ê",
            "–°—Ä–∞–≤–Ω–∏ S&P 500 –∏ NASDAQ –≤ —Ä—É–±–ª—è—Ö"
        ]
        
        for i, query in enumerate(demo_queries, 1):
            print(f"\nüîç –ó–∞–ø—Ä–æ—Å {i}: {query}")
            try:
                # –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
                decomposed = brain._decompose_query(query)
                print(f"   –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {decomposed.intent}")
                print(f"   –ê–∫—Ç–∏–≤—ã: {decomposed.assets}")
                print(f"   –ö–ª–∞—Å—Å—ã –∞–∫—Ç–∏–≤–æ–≤: {decomposed.asset_classes}")
                print(f"   –í–µ—Å–∞: {decomposed.weights}")
                print(f"   –í–∞–ª—é—Ç–∞: {decomposed.currency}")
                print(f"   –ü–µ—Ä–∏–æ–¥: {decomposed.period}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        print("\nüîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
        print("-" * 40)
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Å–æ–≤
        print("\n‚öñÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Å–æ–≤:")
        weight_tests = [
            "–ü–æ—Ä—Ç—Ñ–µ–ª—å 60% –∞–∫—Ü–∏–∏, 40% –æ–±–ª–∏–≥–∞—Ü–∏–∏",
            "–í–µ—Å–∞: 50% –∏ 50%",
            "70% –∑–æ–ª–æ—Ç–æ, 30% —Å–µ—Ä–µ–±—Ä–æ",
            "–ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –≤–µ—Å–∞–º–∏ 80% –∏ 20%"
        ]
        
        for test in weight_tests:
            weights = brain._extract_weights(test, 2)
            print(f"   '{test}' -> {weights}")
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
        print("\nüí∞ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
        currency_tests = [
            "–ê–Ω–∞–ª–∏–∑ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö",
            "–ü–æ–∫–∞–∂–∏ –≤ –µ–≤—Ä–æ",
            "–î–∞–Ω–Ω—ã–µ –≤ —Ä—É–±–ª—è—Ö",
            "–û—Ç—á–µ—Ç –≤ USD"
        ]
        
        for test in currency_tests:
            currency = brain._extract_currency(test, {})
            print(f"   '{test}' -> {currency}")
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
        print("\nüìÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞:")
        period_tests = [
            "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç",
            "–ê–Ω–∞–ª–∏–∑ –∑–∞ 3 –≥–æ–¥–∞",
            "–î–∞–Ω–Ω—ã–µ —Å 2020 –ø–æ 2024",
            "–ó–∞ –ø–µ—Ä–∏–æ–¥ 1Y"
        ]
        
        for test in period_tests:
            period = brain._extract_period(test, {})
            print(f"   '{test}' -> {period}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        print("\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:")
        print("-" * 40)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        from services.financial_brain_enhanced import EnhancedFinancialQuery, EnhancedAnalysisResult
        
        test_query = EnhancedFinancialQuery(
            intent='single_asset_info',
            assets=['AAPL.US'],
            asset_classes=['US'],
            weights=None,
            currency='USD',
            period='5Y',
            user_message='–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π Apple'
        )
        
        test_result = EnhancedAnalysisResult(
            query=test_query,
            data_report={
                'ticker': 'AAPL.US',
                'name': 'Apple Inc.',
                'currency': 'USD',
                'metrics': {
                    'cagr': 0.1523,
                    'volatility': 0.1845,
                    'sharpe': 0.82,
                    'max_drawdown': -0.2345
                }
            },
            charts=[],
            ai_insights='Apple –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Å —Ö–æ—Ä–æ—à–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å.',
            recommendations='–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å –≤ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å.'
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_response = brain.format_final_response(test_result)
        print("üìù –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:")
        print(formatted_response)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—é–º–µ
        summary = brain.get_analysis_summary(test_result)
        print(f"\nüìã –†–µ–∑—é–º–µ –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: {summary['timestamp']}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {summary['charts_count']}")
        print(f"   AI –≤—ã–≤–æ–¥—ã: {'–î–∞' if summary['has_ai_insights'] else '–ù–µ—Ç'}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {'–î–∞' if summary['has_recommendations'] else '–ù–µ—Ç'}")
        
        print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("Financial Brain –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    return True

def show_capabilities():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Okama Financial Brain:")
    print("=" * 50)
    
    capabilities = [
        "üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π",
        "üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞",
        "‚öñÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è",
        "üí∞ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –æ—Ç—á–µ—Ç–∞",
        "üìÖ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤",
        "üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤",
        "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π",
        "ü§ñ AI-–∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        "üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        "üîÑ Fallback –∫ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º"
    ]
    
    for capability in capabilities:
        print(f"   {capability}")
    
    print("\nüí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:")
    examples = [
        '"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π Apple"',
        '"–°—Ä–∞–≤–Ω–∏ –∑–æ–ª–æ—Ç–æ –∏ —Å–µ—Ä–µ–±—Ä–æ"',
        '"–ü–æ—Ä—Ç—Ñ–µ–ª—å 60% –∞–∫—Ü–∏–∏, 40% –æ–±–ª–∏–≥–∞—Ü–∏–∏"',
        '"–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ –°–®–ê –∑–∞ 5 –ª–µ—Ç"',
        '"–°—Ä–∞–≤–Ω–∏ S&P 500 –∏ NASDAQ –≤ —Ä—É–±–ª—è—Ö"'
    ]
    
    for example in examples:
        print(f"   ‚Ä¢ {example}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Okama Financial Brain")
    print("=" * 70)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    show_capabilities()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    success = demo_financial_brain()
    
    if success:
        print("\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Financial Brain –≤ –±–æ—Ç–µ!")
    else:
        print("\n‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
